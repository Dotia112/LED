
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005548  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a0  080057a0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080057a0  080057a0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057a0  080057a0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080057a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d8  20000020  080057c8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019f8  080057c8  000219f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cff  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e7  00000000  00000000  00030d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00033630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00034548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000326b  00000000  00000000  00035370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c98  00000000  00000000  000385db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c51e  00000000  00000000  00049273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  000d57e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08005640 	.word	0x08005640

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08005640 	.word	0x08005640

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 f985 	bl	80004a0 <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fcb0 	bl	8000afc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f943 	bl	800042c <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fca7 	bl	8000afc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f92b 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 f99a 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f924 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 f993 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f91d 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 f98c 	bl	80004f0 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f916 	bl	800040a <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f986 	bl	80004f0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8ce 	bl	8000390 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f875 	bl	80002e8 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8bc 	bl	8000390 <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f968 	bl	80004f0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f876 	bl	8000314 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f872 	bl	8000314 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003f 	.word	0x2000003f
 8000240:	20000040 	.word	0x20000040
 8000244:	2000003c 	.word	0x2000003c
 8000248:	2000003d 	.word	0x2000003d
 800024c:	2000003e 	.word	0x2000003e
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f897 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f943 	bl	80004f0 <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f88c 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f938 	bl	80004f0 <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f85d 	bl	8000390 <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	08005658 	.word	0x08005658
 80002e4:	2000003f 	.word	0x2000003f

080002e8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_Display+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_Display+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_Display+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f843 	bl	8000390 <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000003d 	.word	0x2000003d

08000314 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	b25b      	sxtb	r3, r3
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	b25b      	sxtb	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f82a 	bl	8000390 <SendCommand>
  for (int i=0; i<8; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e009      	b.n	8000356 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f82e 	bl	80003ac <SendChar>
  for (int i=0; i<8; i++)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b07      	cmp	r3, #7
 800035a:	ddf2      	ble.n	8000342 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036e:	e006      	b.n	800037e <HD44780_PrintStr+0x18>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f817 	bl	80003ac <SendChar>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f4      	bne.n	8000370 <HD44780_PrintStr+0xa>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f812 	bl	80003c8 <Send>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SendChar>:

static void SendChar(uint8_t ch)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f804 	bl	80003c8 <Send>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f023 030f 	bic.w	r3, r3, #15
 80003de:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e6:	7bfa      	ldrb	r2, [r7, #15]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f80b 	bl	800040a <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f4:	7bba      	ldrb	r2, [r7, #14]
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f804 	bl	800040a <Write4Bits>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f808 	bl	800042c <ExpanderWrite>
  PulseEnable(value);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f820 	bl	8000464 <PulseEnable>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <ExpanderWrite+0x30>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000442:	f107 020f 	add.w	r2, r7, #15
 8000446:	230a      	movs	r3, #10
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2170      	movs	r1, #112	; 0x70
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <ExpanderWrite+0x34>)
 8000450:	f000 ff54 	bl	80012fc <HAL_I2C_Master_Transmit>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000040 	.word	0x20000040
 8000460:	20000044 	.word	0x20000044

08000464 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffd8 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 f837 	bl	80004f0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f023 0304 	bic.w	r3, r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffce 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 8000490:	2014      	movs	r0, #20
 8000492:	f000 f82d 	bl	80004f0 <DelayUS>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DelayInit>:

static void DelayInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <DelayInit+0x48>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <DelayInit+0x48>)
 80004aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <DelayInit+0x48>)
 80004b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <DelayInit+0x4c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <DelayInit+0x4c>)
 80004c2:	f023 0301 	bic.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <DelayInit+0x4c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <DelayInit+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
  __ASM volatile ("NOP");
 80004dc:	bf00      	nop
  __ASM volatile ("NOP");
 80004de:	bf00      	nop
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	e000edf0 	.word	0xe000edf0
 80004ec:	e0001000 	.word	0xe0001000

080004f0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <DelayUS+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <DelayUS+0x44>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9a      	lsrs	r2, r3, #18
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DelayUS+0x48>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <DelayUS+0x48>)
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d8f6      	bhi.n	8000512 <DelayUS+0x22>
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000010 	.word	0x20000010
 8000534:	431bde83 	.word	0x431bde83
 8000538:	e0001000 	.word	0xe0001000

0800053c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fa7a 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f85c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8c4 	bl	80006d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800054c:	f000 f894 	bl	8000678 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff fdfd 	bl	8000150 <HD44780_Init>
    HD44780_Clear();
 8000556:	f7ff fe7f 	bl	8000258 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe91 	bl	8000284 <HD44780_SetCursor>
    HD44780_PrintStr("BTN don't push");
 8000562:	4818      	ldr	r0, [pc, #96]	; (80005c4 <main+0x88>)
 8000564:	f7ff feff 	bl	8000366 <HD44780_PrintStr>
   /* buttonQueueHandle = osMessageQueueNew(1, sizeof(uint8_t), &buttonQueue_attributes); */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f001 fdd4 	bl	8002114 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  buttonSemaphoreHandle = osSemaphoreNew(1, 0, &buttonSemaphore_attributes);
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <main+0x8c>)
 800056e:	2100      	movs	r1, #0
 8000570:	2001      	movs	r0, #1
 8000572:	f001 ff0d 	bl	8002390 <osSemaphoreNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <main+0x90>)
 800057a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <main+0x94>)
 800057e:	2100      	movs	r1, #0
 8000580:	4814      	ldr	r0, [pc, #80]	; (80005d4 <main+0x98>)
 8000582:	f001 fe2d 	bl	80021e0 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <main+0x9c>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(buttonTask, NULL, &buttonTask_attributes);
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <main+0xa0>)
 800058e:	2100      	movs	r1, #0
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <main+0xa4>)
 8000592:	f001 fe25 	bl	80021e0 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <main+0xa8>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(ledTask, NULL, &ledTask_attributes);
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <main+0xac>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <main+0xb0>)
 80005a2:	f001 fe1d 	bl	80021e0 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <main+0xb4>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(lcdTask, NULL, &lcdTask_attributes);
 80005ac:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <main+0xb8>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <main+0xbc>)
 80005b2:	f001 fe15 	bl	80021e0 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <main+0xc0>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005bc:	f001 fddc 	bl	8002178 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x84>
 80005c2:	bf00      	nop
 80005c4:	080056a0 	.word	0x080056a0
 80005c8:	08005778 	.word	0x08005778
 80005cc:	2000009c 	.word	0x2000009c
 80005d0:	080056e8 	.word	0x080056e8
 80005d4:	08000771 	.word	0x08000771
 80005d8:	20000098 	.word	0x20000098
 80005dc:	0800570c 	.word	0x0800570c
 80005e0:	08000781 	.word	0x08000781
 80005e4:	200000a0 	.word	0x200000a0
 80005e8:	08005730 	.word	0x08005730
 80005ec:	080007c1 	.word	0x080007c1
 80005f0:	200000a4 	.word	0x200000a4
 80005f4:	08005754 	.word	0x08005754
 80005f8:	08000835 	.word	0x08000835
 80005fc:	200000a8 	.word	0x200000a8

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b090      	sub	sp, #64	; 0x40
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	2228      	movs	r2, #40	; 0x28
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 f80e 	bl	8005630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2310      	movs	r3, #16
 800062c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f966 	bl	8001908 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000642:	f000 f92d 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fbd4 	bl	8001e0c <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800066a:	f000 f919 	bl	80008a0 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3740      	adds	r7, #64	; 0x40
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_I2C1_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000684:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x58>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_I2C1_Init+0x50>)
 8000696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2C1_Init+0x50>)
 80006b6:	f000 fcdd 	bl	8001074 <HAL_I2C_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f8ee 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000044 	.word	0x20000044
 80006cc:	40005400 	.word	0x40005400
 80006d0:	000186a0 	.word	0x000186a0

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <MX_GPIO_Init+0x90>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <MX_GPIO_Init+0x90>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_GPIO_Init+0x90>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0310 	and.w	r3, r3, #16
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_GPIO_Init+0x90>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0x90>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_GPIO_Init+0x90>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	4812      	ldr	r0, [pc, #72]	; (8000768 <MX_GPIO_Init+0x94>)
 8000720:	f000 fc8f 	bl	8001042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	2302      	movs	r3, #2
 8000734:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4619      	mov	r1, r3
 800073c:	480a      	ldr	r0, [pc, #40]	; (8000768 <MX_GPIO_Init+0x94>)
 800073e:	f000 fae5 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	4619      	mov	r1, r3
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_GPIO_Init+0x98>)
 8000758:	f000 fad8 	bl	8000d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	40011000 	.word	0x40011000
 800076c:	40010c00 	.word	0x40010c00

08000770 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f001 fddb 	bl	8002334 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartDefaultTask+0x8>

08000780 <buttonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void buttonTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    uint8_t last_state = GPIO_PIN_SET; // предполагаем, что кнопка не нажата
 8000788:	2301      	movs	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
        uint8_t current_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800078c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <buttonTask+0x38>)
 8000792:	f000 fc3f 	bl	8001014 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	73bb      	strb	r3, [r7, #14]
        if(current_state != last_state)
 800079a:	7bba      	ldrb	r2, [r7, #14]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d006      	beq.n	80007b0 <buttonTask+0x30>
        {
            last_state = current_state;
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	73fb      	strb	r3, [r7, #15]
            osSemaphoreRelease(buttonSemaphoreHandle); // сигнал об изменении состояния
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <buttonTask+0x3c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fef2 	bl	8002594 <osSemaphoreRelease>
        }
        osDelay(10);
 80007b0:	200a      	movs	r0, #10
 80007b2:	f001 fdbf 	bl	8002334 <osDelay>
    {
 80007b6:	e7e9      	b.n	800078c <buttonTask+0xc>
 80007b8:	40010c00 	.word	0x40010c00
 80007bc:	2000009c 	.word	0x2000009c

080007c0 <ledTask>:
    }
}

void ledTask(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    uint8_t led_on = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
        // Ждем семафор с таймаутом 100 мс
        if(osSemaphoreAcquire(buttonSemaphoreHandle, 100) == osOK)
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <ledTask+0x68>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2164      	movs	r1, #100	; 0x64
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fe78 	bl	80024c8 <osSemaphoreAcquire>
        {
            // получили сигнал об изменении, читаем актуальное состояние кнопки
        }
        uint8_t button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4813      	ldr	r0, [pc, #76]	; (800082c <ledTask+0x6c>)
 80007de:	f000 fc19 	bl	8001014 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73bb      	strb	r3, [r7, #14]

        if(button_state == GPIO_PIN_RESET)
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d108      	bne.n	80007fe <ledTask+0x3e>
        {
            // Кнопка нажата — светодиод горит постоянно
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f2:	480f      	ldr	r0, [pc, #60]	; (8000830 <ledTask+0x70>)
 80007f4:	f000 fc25 	bl	8001042 <HAL_GPIO_WritePin>
            led_on = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
 80007fc:	e7e6      	b.n	80007cc <ledTask+0xc>
        }
        else
        {
            // Кнопка отпущена — мигаем светодиодом
            led_on = !led_on;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf0c      	ite	eq
 8000804:	2301      	moveq	r3, #1
 8000806:	2300      	movne	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73fb      	strb	r3, [r7, #15]
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, (led_on) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b00      	cmp	r3, #0
 8000810:	bf0c      	ite	eq
 8000812:	2301      	moveq	r3, #1
 8000814:	2300      	movne	r3, #0
 8000816:	b2db      	uxtb	r3, r3
 8000818:	461a      	mov	r2, r3
 800081a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <ledTask+0x70>)
 8000820:	f000 fc0f 	bl	8001042 <HAL_GPIO_WritePin>
    {
 8000824:	e7d2      	b.n	80007cc <ledTask+0xc>
 8000826:	bf00      	nop
 8000828:	2000009c 	.word	0x2000009c
 800082c:	40010c00 	.word	0x40010c00
 8000830:	40011000 	.word	0x40011000

08000834 <lcdTask>:
        }
    }
}

void lcdTask(void *argument)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    uint8_t prev_state = 0xFF;
 800083c:	23ff      	movs	r3, #255	; 0xff
 800083e:	73fb      	strb	r3, [r7, #15]
    for(;;)
    {
        // Ждем семафор с таймаутом 100 мс
        if(osSemaphoreAcquire(buttonSemaphoreHandle, 100) == osOK)
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <lcdTask+0x5c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2164      	movs	r1, #100	; 0x64
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fe3e 	bl	80024c8 <osSemaphoreAcquire>
        {
            // получили сигнал об изменении, читаем актуальное состояние кнопки
        }
        uint8_t button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800084c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000850:	4810      	ldr	r0, [pc, #64]	; (8000894 <lcdTask+0x60>)
 8000852:	f000 fbdf 	bl	8001014 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	73bb      	strb	r3, [r7, #14]

        if(button_state != prev_state)
 800085a:	7bba      	ldrb	r2, [r7, #14]
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	429a      	cmp	r2, r3
 8000860:	d011      	beq.n	8000886 <lcdTask+0x52>
        {
            HD44780_Clear();
 8000862:	f7ff fcf9 	bl	8000258 <HD44780_Clear>
            HD44780_SetCursor(0,0);
 8000866:	2100      	movs	r1, #0
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff fd0b 	bl	8000284 <HD44780_SetCursor>
            if(button_state == GPIO_PIN_RESET)
 800086e:	7bbb      	ldrb	r3, [r7, #14]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d103      	bne.n	800087c <lcdTask+0x48>
                HD44780_PrintStr("BTN has push");
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <lcdTask+0x64>)
 8000876:	f7ff fd76 	bl	8000366 <HD44780_PrintStr>
 800087a:	e002      	b.n	8000882 <lcdTask+0x4e>

            else
                HD44780_PrintStr("BTN don't push");
 800087c:	4807      	ldr	r0, [pc, #28]	; (800089c <lcdTask+0x68>)
 800087e:	f7ff fd72 	bl	8000366 <HD44780_PrintStr>
            prev_state = button_state;
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	73fb      	strb	r3, [r7, #15]
        }
        osDelay(50);
 8000886:	2032      	movs	r0, #50	; 0x32
 8000888:	f001 fd54 	bl	8002334 <osDelay>
    {
 800088c:	e7d8      	b.n	8000840 <lcdTask+0xc>
 800088e:	bf00      	nop
 8000890:	2000009c 	.word	0x2000009c
 8000894:	40010c00 	.word	0x40010c00
 8000898:	080056b0 	.word	0x080056b0
 800089c:	080056a0 	.word	0x080056a0

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_MspInit+0x4c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <HAL_MspInit+0x4c>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_MspInit+0x4c>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_MspInit+0x4c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_MspInit+0x4c>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	210f      	movs	r1, #15
 80008e6:	f06f 0001 	mvn.w	r0, #1
 80008ea:	f000 f9e6 	bl	8000cba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <HAL_I2C_MspInit+0x90>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d132      	bne.n	8000982 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_I2C_MspInit+0x94>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <HAL_I2C_MspInit+0x94>)
 8000922:	f043 0308 	orr.w	r3, r3, #8
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_I2C_MspInit+0x94>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000934:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4812      	ldr	r0, [pc, #72]	; (8000994 <HAL_I2C_MspInit+0x98>)
 800094a:	f000 f9df 	bl	8000d0c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_I2C_MspInit+0x9c>)
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	f043 0302 	orr.w	r3, r3, #2
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <HAL_I2C_MspInit+0x9c>)
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_I2C_MspInit+0x94>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_I2C_MspInit+0x94>)
 8000970:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_I2C_MspInit+0x94>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40005400 	.word	0x40005400
 8000990:	40021000 	.word	0x40021000
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40010000 	.word	0x40010000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 f87b 	bl	8000ac4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009ce:	f003 fd3d 	bl	800444c <xTaskGetSchedulerState>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d001      	beq.n	80009dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009d8:	f004 fb9e 	bl	8005118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	; (8000a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a12:	f7ff ffe5 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f004 fdd9 	bl	80055cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1a:	f7ff fd8f 	bl	800053c <main>
  bx lr
 8000a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a28:	080057a8 	.word	0x080057a8
  ldr r2, =_sbss
 8000a2c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a30:	200019f8 	.word	0x200019f8

08000a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_2_IRQHandler>
	...

08000a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x28>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x28>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f92b 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff ff2a 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40022000 	.word	0x40022000

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f935 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f90b 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000010 	.word	0x20000010
 8000abc:	20000018 	.word	0x20000018
 8000ac0:	20000014 	.word	0x20000014

08000ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x1c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x20>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000018 	.word	0x20000018
 8000ae4:	200000ac 	.word	0x200000ac

08000ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <HAL_GetTick+0x10>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	200000ac 	.word	0x200000ac

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff fff0 	bl	8000ae8 <HAL_GetTick>
 8000b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d005      	beq.n	8000b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_Delay+0x44>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b22:	bf00      	nop
 8000b24:	f7ff ffe0 	bl	8000ae8 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8f7      	bhi.n	8000b24 <HAL_Delay+0x28>
  {
  }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000018 	.word	0x20000018

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff90 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff49 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff5e 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff90 	bl	8000bfc <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5f 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffb0 	bl	8000c60 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b08b      	sub	sp, #44	; 0x2c
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e169      	b.n	8000ff4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d20:	2201      	movs	r2, #1
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8158 	bne.w	8000fee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4a9a      	ldr	r2, [pc, #616]	; (8000fac <HAL_GPIO_Init+0x2a0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d05e      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d48:	4a98      	ldr	r2, [pc, #608]	; (8000fac <HAL_GPIO_Init+0x2a0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d875      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d4e:	4a98      	ldr	r2, [pc, #608]	; (8000fb0 <HAL_GPIO_Init+0x2a4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d058      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d54:	4a96      	ldr	r2, [pc, #600]	; (8000fb0 <HAL_GPIO_Init+0x2a4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d86f      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d5a:	4a96      	ldr	r2, [pc, #600]	; (8000fb4 <HAL_GPIO_Init+0x2a8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d052      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d60:	4a94      	ldr	r2, [pc, #592]	; (8000fb4 <HAL_GPIO_Init+0x2a8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d869      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d66:	4a94      	ldr	r2, [pc, #592]	; (8000fb8 <HAL_GPIO_Init+0x2ac>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d04c      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d6c:	4a92      	ldr	r2, [pc, #584]	; (8000fb8 <HAL_GPIO_Init+0x2ac>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d863      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d72:	4a92      	ldr	r2, [pc, #584]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d046      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
 8000d78:	4a90      	ldr	r2, [pc, #576]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d85d      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d82a      	bhi.n	8000dd8 <HAL_GPIO_Init+0xcc>
 8000d82:	2b12      	cmp	r3, #18
 8000d84:	d859      	bhi.n	8000e3a <HAL_GPIO_Init+0x12e>
 8000d86:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <HAL_GPIO_Init+0x80>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000e07 	.word	0x08000e07
 8000d90:	08000de1 	.word	0x08000de1
 8000d94:	08000df3 	.word	0x08000df3
 8000d98:	08000e35 	.word	0x08000e35
 8000d9c:	08000e3b 	.word	0x08000e3b
 8000da0:	08000e3b 	.word	0x08000e3b
 8000da4:	08000e3b 	.word	0x08000e3b
 8000da8:	08000e3b 	.word	0x08000e3b
 8000dac:	08000e3b 	.word	0x08000e3b
 8000db0:	08000e3b 	.word	0x08000e3b
 8000db4:	08000e3b 	.word	0x08000e3b
 8000db8:	08000e3b 	.word	0x08000e3b
 8000dbc:	08000e3b 	.word	0x08000e3b
 8000dc0:	08000e3b 	.word	0x08000e3b
 8000dc4:	08000e3b 	.word	0x08000e3b
 8000dc8:	08000e3b 	.word	0x08000e3b
 8000dcc:	08000e3b 	.word	0x08000e3b
 8000dd0:	08000de9 	.word	0x08000de9
 8000dd4:	08000dfd 	.word	0x08000dfd
 8000dd8:	4a79      	ldr	r2, [pc, #484]	; (8000fc0 <HAL_GPIO_Init+0x2b4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dde:	e02c      	b.n	8000e3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	623b      	str	r3, [r7, #32]
          break;
 8000de6:	e029      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	3304      	adds	r3, #4
 8000dee:	623b      	str	r3, [r7, #32]
          break;
 8000df0:	e024      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	3308      	adds	r3, #8
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e01f      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	330c      	adds	r3, #12
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e01a      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	623b      	str	r3, [r7, #32]
          break;
 8000e12:	e013      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d105      	bne.n	8000e28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	611a      	str	r2, [r3, #16]
          break;
 8000e26:	e009      	b.n	8000e3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	615a      	str	r2, [r3, #20]
          break;
 8000e32:	e003      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
          break;
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x130>
          break;
 8000e3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d801      	bhi.n	8000e46 <HAL_GPIO_Init+0x13a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	e001      	b.n	8000e4a <HAL_GPIO_Init+0x13e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2bff      	cmp	r3, #255	; 0xff
 8000e50:	d802      	bhi.n	8000e58 <HAL_GPIO_Init+0x14c>
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	e002      	b.n	8000e5e <HAL_GPIO_Init+0x152>
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	3b08      	subs	r3, #8
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	210f      	movs	r1, #15
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	6a39      	ldr	r1, [r7, #32]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80b1 	beq.w	8000fee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8c:	4b4d      	ldr	r3, [pc, #308]	; (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a4c      	ldr	r2, [pc, #304]	; (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <HAL_GPIO_Init+0x2b8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ea4:	4a48      	ldr	r2, [pc, #288]	; (8000fc8 <HAL_GPIO_Init+0x2bc>)
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a40      	ldr	r2, [pc, #256]	; (8000fcc <HAL_GPIO_Init+0x2c0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d013      	beq.n	8000ef8 <HAL_GPIO_Init+0x1ec>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3f      	ldr	r2, [pc, #252]	; (8000fd0 <HAL_GPIO_Init+0x2c4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_GPIO_Init+0x1e8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3e      	ldr	r2, [pc, #248]	; (8000fd4 <HAL_GPIO_Init+0x2c8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x1e4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a3d      	ldr	r2, [pc, #244]	; (8000fd8 <HAL_GPIO_Init+0x2cc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_GPIO_Init+0x1e0>
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000eec:	2304      	movs	r3, #4
 8000eee:	e004      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <HAL_GPIO_Init+0x1ee>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000efc:	f002 0203 	and.w	r2, r2, #3
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	4093      	lsls	r3, r2
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f0a:	492f      	ldr	r1, [pc, #188]	; (8000fc8 <HAL_GPIO_Init+0x2bc>)
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	492c      	ldr	r1, [pc, #176]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f32:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4928      	ldr	r1, [pc, #160]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	4922      	ldr	r1, [pc, #136]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
 8000f58:	e006      	b.n	8000f68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	491e      	ldr	r1, [pc, #120]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	4918      	ldr	r1, [pc, #96]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	608b      	str	r3, [r1, #8]
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4914      	ldr	r1, [pc, #80]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d021      	beq.n	8000fe0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	490e      	ldr	r1, [pc, #56]	; (8000fdc <HAL_GPIO_Init+0x2d0>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	60cb      	str	r3, [r1, #12]
 8000fa8:	e021      	b.n	8000fee <HAL_GPIO_Init+0x2e2>
 8000faa:	bf00      	nop
 8000fac:	10320000 	.word	0x10320000
 8000fb0:	10310000 	.word	0x10310000
 8000fb4:	10220000 	.word	0x10220000
 8000fb8:	10210000 	.word	0x10210000
 8000fbc:	10120000 	.word	0x10120000
 8000fc0:	10110000 	.word	0x10110000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40011400 	.word	0x40011400
 8000fdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4909      	ldr	r1, [pc, #36]	; (8001010 <HAL_GPIO_Init+0x304>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f47f ae8e 	bne.w	8000d20 <HAL_GPIO_Init+0x14>
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	372c      	adds	r7, #44	; 0x2c
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40010400 	.word	0x40010400

08001014 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e001      	b.n	8001036 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	807b      	strh	r3, [r7, #2]
 800104e:	4613      	mov	r3, r2
 8001050:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001052:	787b      	ldrb	r3, [r7, #1]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001058:	887a      	ldrh	r2, [r7, #2]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800105e:	e003      	b.n	8001068 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	041a      	lsls	r2, r3, #16
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	611a      	str	r2, [r3, #16]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
	...

08001074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e12b      	b.n	80012de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d106      	bne.n	80010a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fc2e 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2224      	movs	r2, #36	; 0x24
 80010a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010d8:	f000 ffea 	bl	80020b0 <HAL_RCC_GetPCLK1Freq>
 80010dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a81      	ldr	r2, [pc, #516]	; (80012e8 <HAL_I2C_Init+0x274>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d807      	bhi.n	80010f8 <HAL_I2C_Init+0x84>
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4a80      	ldr	r2, [pc, #512]	; (80012ec <HAL_I2C_Init+0x278>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	bf94      	ite	ls
 80010f0:	2301      	movls	r3, #1
 80010f2:	2300      	movhi	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	e006      	b.n	8001106 <HAL_I2C_Init+0x92>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a7d      	ldr	r2, [pc, #500]	; (80012f0 <HAL_I2C_Init+0x27c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	bf94      	ite	ls
 8001100:	2301      	movls	r3, #1
 8001102:	2300      	movhi	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0e7      	b.n	80012de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4a78      	ldr	r2, [pc, #480]	; (80012f4 <HAL_I2C_Init+0x280>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	0c9b      	lsrs	r3, r3, #18
 8001118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	430a      	orrs	r2, r1
 800112c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a6a      	ldr	r2, [pc, #424]	; (80012e8 <HAL_I2C_Init+0x274>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d802      	bhi.n	8001148 <HAL_I2C_Init+0xd4>
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	e009      	b.n	800115c <HAL_I2C_Init+0xe8>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <HAL_I2C_Init+0x284>)
 8001154:	fba2 2303 	umull	r2, r3, r2, r3
 8001158:	099b      	lsrs	r3, r3, #6
 800115a:	3301      	adds	r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	430b      	orrs	r3, r1
 8001162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800116e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	495c      	ldr	r1, [pc, #368]	; (80012e8 <HAL_I2C_Init+0x274>)
 8001178:	428b      	cmp	r3, r1
 800117a:	d819      	bhi.n	80011b0 <HAL_I2C_Init+0x13c>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e59      	subs	r1, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fbb1 f3f3 	udiv	r3, r1, r3
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001190:	400b      	ands	r3, r1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <HAL_I2C_Init+0x138>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1e59      	subs	r1, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a4:	3301      	adds	r3, #1
 80011a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011aa:	e051      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 80011ac:	2304      	movs	r3, #4
 80011ae:	e04f      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d111      	bne.n	80011dc <HAL_I2C_Init+0x168>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1e58      	subs	r0, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6859      	ldr	r1, [r3, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	440b      	add	r3, r1
 80011c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	e012      	b.n	8001202 <HAL_I2C_Init+0x18e>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e58      	subs	r0, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	0099      	lsls	r1, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80011f2:	3301      	adds	r3, #1
 80011f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_Init+0x196>
 8001206:	2301      	movs	r3, #1
 8001208:	e022      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10e      	bne.n	8001230 <HAL_I2C_Init+0x1bc>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1e58      	subs	r0, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6859      	ldr	r1, [r3, #4]
 800121a:	460b      	mov	r3, r1
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	440b      	add	r3, r1
 8001220:	fbb0 f3f3 	udiv	r3, r0, r3
 8001224:	3301      	adds	r3, #1
 8001226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800122a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122e:	e00f      	b.n	8001250 <HAL_I2C_Init+0x1dc>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1e58      	subs	r0, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6859      	ldr	r1, [r3, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	0099      	lsls	r1, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	fbb0 f3f3 	udiv	r3, r0, r3
 8001246:	3301      	adds	r3, #1
 8001248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	6809      	ldr	r1, [r1, #0]
 8001254:	4313      	orrs	r3, r2
 8001256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69da      	ldr	r2, [r3, #28]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800127e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6911      	ldr	r1, [r2, #16]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68d2      	ldr	r2, [r2, #12]
 800128a:	4311      	orrs	r1, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	430b      	orrs	r3, r1
 8001292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0201 	orr.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2220      	movs	r2, #32
 80012ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	000186a0 	.word	0x000186a0
 80012ec:	001e847f 	.word	0x001e847f
 80012f0:	003d08ff 	.word	0x003d08ff
 80012f4:	431bde83 	.word	0x431bde83
 80012f8:	10624dd3 	.word	0x10624dd3

080012fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af02      	add	r7, sp, #8
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	461a      	mov	r2, r3
 8001308:	460b      	mov	r3, r1
 800130a:	817b      	strh	r3, [r7, #10]
 800130c:	4613      	mov	r3, r2
 800130e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff fbea 	bl	8000ae8 <HAL_GetTick>
 8001314:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b20      	cmp	r3, #32
 8001320:	f040 80e0 	bne.w	80014e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2319      	movs	r3, #25
 800132a:	2201      	movs	r2, #1
 800132c:	4970      	ldr	r1, [pc, #448]	; (80014f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 f964 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800133a:	2302      	movs	r3, #2
 800133c:	e0d3      	b.n	80014e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_I2C_Master_Transmit+0x50>
 8001348:	2302      	movs	r3, #2
 800134a:	e0cc      	b.n	80014e6 <HAL_I2C_Master_Transmit+0x1ea>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b01      	cmp	r3, #1
 8001360:	d007      	beq.n	8001372 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001380:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2221      	movs	r2, #33	; 0x21
 8001386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2210      	movs	r2, #16
 800138e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	893a      	ldrh	r2, [r7, #8]
 80013a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013b4:	8979      	ldrh	r1, [r7, #10]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	6a3a      	ldr	r2, [r7, #32]
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f89c 	bl	80014f8 <I2C_MasterRequestWrite>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e08d      	b.n	80014e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013e0:	e066      	b.n	80014b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	6a39      	ldr	r1, [r7, #32]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 f9de 	bl	80017a8 <I2C_WaitOnTXEFlagUntilTimeout>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00d      	beq.n	800140e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d107      	bne.n	800140a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001408:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e06b      	b.n	80014e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001428:	b29b      	uxth	r3, r3
 800142a:	3b01      	subs	r3, #1
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001436:	3b01      	subs	r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b04      	cmp	r3, #4
 800144a:	d11b      	bne.n	8001484 <HAL_I2C_Master_Transmit+0x188>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001450:	2b00      	cmp	r3, #0
 8001452:	d017      	beq.n	8001484 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800146e:	b29b      	uxth	r3, r3
 8001470:	3b01      	subs	r3, #1
 8001472:	b29a      	uxth	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	6a39      	ldr	r1, [r7, #32]
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 f9ce 	bl	800182a <I2C_WaitOnBTFFlagUntilTimeout>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00d      	beq.n	80014b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	2b04      	cmp	r3, #4
 800149a:	d107      	bne.n	80014ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e01a      	b.n	80014e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d194      	bne.n	80013e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2220      	movs	r2, #32
 80014cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e000      	b.n	80014e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80014e4:	2302      	movs	r3, #2
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	00100002 	.word	0x00100002
 80014f4:	ffff0000 	.word	0xffff0000

080014f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af02      	add	r7, sp, #8
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b08      	cmp	r3, #8
 8001512:	d006      	beq.n	8001522 <I2C_MasterRequestWrite+0x2a>
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d003      	beq.n	8001522 <I2C_MasterRequestWrite+0x2a>
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001520:	d108      	bne.n	8001534 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e00b      	b.n	800154c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	2b12      	cmp	r3, #18
 800153a:	d107      	bne.n	800154c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f84f 	bl	80015fc <I2C_WaitOnFlagUntilTimeout>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00d      	beq.n	8001580 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001572:	d103      	bne.n	800157c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e035      	b.n	80015ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001588:	d108      	bne.n	800159c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800158a:	897b      	ldrh	r3, [r7, #10]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001598:	611a      	str	r2, [r3, #16]
 800159a:	e01b      	b.n	80015d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800159c:	897b      	ldrh	r3, [r7, #10]
 800159e:	11db      	asrs	r3, r3, #7
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f003 0306 	and.w	r3, r3, #6
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f063 030f 	orn	r3, r3, #15
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <I2C_MasterRequestWrite+0xfc>)
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 f875 	bl	80016aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e010      	b.n	80015ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015ca:	897b      	ldrh	r3, [r7, #10]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <I2C_MasterRequestWrite+0x100>)
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 f865 	bl	80016aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	00010008 	.word	0x00010008
 80015f8:	00010002 	.word	0x00010002

080015fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800160c:	e025      	b.n	800165a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d021      	beq.n	800165a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001616:	f7ff fa67 	bl	8000ae8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d302      	bcc.n	800162c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d116      	bne.n	800165a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2220      	movs	r2, #32
 8001636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f043 0220 	orr.w	r2, r3, #32
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e023      	b.n	80016a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d10d      	bne.n	8001680 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4013      	ands	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	e00c      	b.n	800169a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4013      	ands	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf0c      	ite	eq
 8001692:	2301      	moveq	r3, #1
 8001694:	2300      	movne	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	429a      	cmp	r2, r3
 800169e:	d0b6      	beq.n	800160e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016b8:	e051      	b.n	800175e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c8:	d123      	bne.n	8001712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f043 0204 	orr.w	r2, r3, #4
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e046      	b.n	80017a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d021      	beq.n	800175e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171a:	f7ff f9e5 	bl	8000ae8 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	d302      	bcc.n	8001730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d116      	bne.n	800175e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f043 0220 	orr.w	r2, r3, #32
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e020      	b.n	80017a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0c1b      	lsrs	r3, r3, #16
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d10c      	bne.n	8001782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4013      	ands	r3, r2
 8001774:	b29b      	uxth	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf14      	ite	ne
 800177a:	2301      	movne	r3, #1
 800177c:	2300      	moveq	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	e00b      	b.n	800179a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	43da      	mvns	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	4013      	ands	r3, r2
 800178e:	b29b      	uxth	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d18d      	bne.n	80016ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017b4:	e02d      	b.n	8001812 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f878 	bl	80018ac <I2C_IsAcknowledgeFailed>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e02d      	b.n	8001822 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d021      	beq.n	8001812 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ce:	f7ff f98b 	bl	8000ae8 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d302      	bcc.n	80017e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d116      	bne.n	8001812 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2220      	movs	r2, #32
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f043 0220 	orr.w	r2, r3, #32
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e007      	b.n	8001822 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181c:	2b80      	cmp	r3, #128	; 0x80
 800181e:	d1ca      	bne.n	80017b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b084      	sub	sp, #16
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001836:	e02d      	b.n	8001894 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 f837 	bl	80018ac <I2C_IsAcknowledgeFailed>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e02d      	b.n	80018a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184e:	d021      	beq.n	8001894 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001850:	f7ff f94a 	bl	8000ae8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	429a      	cmp	r2, r3
 800185e:	d302      	bcc.n	8001866 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d116      	bne.n	8001894 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f043 0220 	orr.w	r2, r3, #32
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e007      	b.n	80018a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d1ca      	bne.n	8001838 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c2:	d11b      	bne.n	80018fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	f043 0204 	orr.w	r2, r3, #4
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e272      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8087 	beq.w	8001a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001928:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b04      	cmp	r3, #4
 8001932:	d00c      	beq.n	800194e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001934:	4b8f      	ldr	r3, [pc, #572]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d112      	bne.n	8001966 <HAL_RCC_OscConfig+0x5e>
 8001940:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194c:	d10b      	bne.n	8001966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194e:	4b89      	ldr	r3, [pc, #548]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d06c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x12c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d168      	bne.n	8001a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e24c      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x76>
 8001970:	4b80      	ldr	r3, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a7f      	ldr	r2, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e02e      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7a      	ldr	r2, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a77      	ldr	r2, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0xbc>
 80019aa:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a71      	ldr	r2, [pc, #452]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0xd4>
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6a      	ldr	r2, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a67      	ldr	r2, [pc, #412]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff f880 	bl	8000ae8 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff f87c 	bl	8000ae8 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e200      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xe4>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f86c 	bl	8000ae8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f868 	bl	8000ae8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1ec      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x10c>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d063      	beq.n	8001b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d11c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x18c>
 8001a5a:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_OscConfig+0x176>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e1c0      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4939      	ldr	r1, [pc, #228]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	e03a      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d020      	beq.n	8001ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f821 	bl	8000ae8 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f81d 	bl	8000ae8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1a1      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4927      	ldr	r1, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e015      	b.n	8001b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f800 	bl	8000ae8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aec:	f7fe fffc 	bl	8000ae8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e180      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d03a      	beq.n	8001b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d019      	beq.n	8001b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7fe ffe0 	bl	8000ae8 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7fe ffdc 	bl	8000ae8 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e160      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f000 fac4 	bl	80020d8 <RCC_Delay>
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_RCC_OscConfig+0x274>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b58:	f7fe ffc6 	bl	8000ae8 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5e:	e00f      	b.n	8001b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b60:	f7fe ffc2 	bl	8000ae8 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d908      	bls.n	8001b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e146      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	42420000 	.word	0x42420000
 8001b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4b92      	ldr	r3, [pc, #584]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e9      	bne.n	8001b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80a6 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b88      	ldr	r3, [pc, #544]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4a87      	ldr	r2, [pc, #540]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	61d3      	str	r3, [r2, #28]
 8001bb6:	4b85      	ldr	r3, [pc, #532]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc6:	4b82      	ldr	r3, [pc, #520]	; (8001dd0 <HAL_RCC_OscConfig+0x4c8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d118      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd2:	4b7f      	ldr	r3, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a7e      	ldr	r2, [pc, #504]	; (8001dd0 <HAL_RCC_OscConfig+0x4c8>)
 8001bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bde:	f7fe ff83 	bl	8000ae8 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be6:	f7fe ff7f 	bl	8000ae8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b64      	cmp	r3, #100	; 0x64
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e103      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <HAL_RCC_OscConfig+0x4c8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x312>
 8001c0c:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a6e      	ldr	r2, [pc, #440]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6213      	str	r3, [r2, #32]
 8001c18:	e02d      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <HAL_RCC_OscConfig+0x334>
 8001c22:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a69      	ldr	r2, [pc, #420]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a66      	ldr	r2, [pc, #408]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	e01c      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b05      	cmp	r3, #5
 8001c42:	d10c      	bne.n	8001c5e <HAL_RCC_OscConfig+0x356>
 8001c44:	4b61      	ldr	r3, [pc, #388]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4a60      	ldr	r2, [pc, #384]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6213      	str	r3, [r2, #32]
 8001c50:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4a5d      	ldr	r2, [pc, #372]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6213      	str	r3, [r2, #32]
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0x36e>
 8001c5e:	4b5b      	ldr	r3, [pc, #364]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a5a      	ldr	r2, [pc, #360]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a57      	ldr	r2, [pc, #348]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d015      	beq.n	8001caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7fe ff33 	bl	8000ae8 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7fe ff2f 	bl	8000ae8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0b1      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ee      	beq.n	8001c86 <HAL_RCC_OscConfig+0x37e>
 8001ca8:	e014      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7fe ff1d 	bl	8000ae8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7fe ff19 	bl	8000ae8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e09b      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ee      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8087 	beq.w	8001dfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d061      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d146      	bne.n	8001d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b33      	ldr	r3, [pc, #204]	; (8001dd4 <HAL_RCC_OscConfig+0x4cc>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7fe feed 	bl	8000ae8 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7fe fee9 	bl	8000ae8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e06d      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d38:	d108      	bne.n	8001d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4921      	ldr	r1, [pc, #132]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a19      	ldr	r1, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	491b      	ldr	r1, [pc, #108]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x4cc>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7fe febd 	bl	8000ae8 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d72:	f7fe feb9 	bl	8000ae8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e03d      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x46a>
 8001d90:	e035      	b.n	8001dfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_RCC_OscConfig+0x4cc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fea6 	bl	8000ae8 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe fea2 	bl	8000ae8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e026      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x498>
 8001dbe:	e01e      	b.n	8001dfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e019      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_RCC_OscConfig+0x500>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0d0      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4965      	ldr	r1, [pc, #404]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0b8      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e68:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	494d      	ldr	r1, [pc, #308]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d040      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e07f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e073      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06b      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4936      	ldr	r1, [pc, #216]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7fe fdf4 	bl	8000ae8 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7fe fdf0 	bl	8000ae8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e053      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d210      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e032      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9a:	f000 f821 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	490a      	ldr	r1, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	5ccb      	ldrb	r3, [r1, r3]
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fd52 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08005788 	.word	0x08005788
 8001fd8:	20000010 	.word	0x20000010
 8001fdc:	20000014 	.word	0x20000014

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b490      	push	{r4, r7}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_RCC_GetSysClockFreq+0xac>)
 8001fe8:	1d3c      	adds	r4, r7, #4
 8001fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff0:	f240 2301 	movw	r3, #513	; 0x201
 8001ff4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb0>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x40>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x46>
 800201e:	e02b      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002022:	623b      	str	r3, [r7, #32]
      break;
 8002024:	e02b      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3328      	adds	r3, #40	; 0x28
 8002030:	443b      	add	r3, r7
 8002032:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002036:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0c5b      	lsrs	r3, r3, #17
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	3328      	adds	r3, #40	; 0x28
 800204e:	443b      	add	r3, r7
 8002050:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002054:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800205a:	fb03 f202 	mul.w	r2, r3, r2
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	e004      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800206c:	fb02 f303 	mul.w	r3, r2, r3
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	623b      	str	r3, [r7, #32]
      break;
 8002076:	e002      	b.n	800207e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb4>)
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207e:	6a3b      	ldr	r3, [r7, #32]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bc90      	pop	{r4, r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	080056c0 	.word	0x080056c0
 8002090:	40021000 	.word	0x40021000
 8002094:	007a1200 	.word	0x007a1200
 8002098:	003d0900 	.word	0x003d0900

0800209c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b02      	ldr	r3, [pc, #8]	; (80020ac <HAL_RCC_GetHCLKFreq+0x10>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	20000010 	.word	0x20000010

080020b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b4:	f7ff fff2 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08005798 	.word	0x08005798

080020d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <RCC_Delay+0x34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <RCC_Delay+0x38>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0a5b      	lsrs	r3, r3, #9
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020f4:	bf00      	nop
  }
  while (Delay --);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	60fa      	str	r2, [r7, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f9      	bne.n	80020f4 <RCC_Delay+0x1c>
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000010 	.word	0x20000010
 8002110:	10624dd3 	.word	0x10624dd3

08002114 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800211a:	f3ef 8305 	mrs	r3, IPSR
 800211e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002120:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10f      	bne.n	8002146 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002126:	f3ef 8310 	mrs	r3, PRIMASK
 800212a:	607b      	str	r3, [r7, #4]
  return(result);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <osKernelInitialize+0x32>
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <osKernelInitialize+0x60>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d109      	bne.n	800214e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800213a:	f3ef 8311 	mrs	r3, BASEPRI
 800213e:	603b      	str	r3, [r7, #0]
  return(result);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002146:	f06f 0305 	mvn.w	r3, #5
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	e00c      	b.n	8002168 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <osKernelInitialize+0x60>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <osKernelInitialize+0x60>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e002      	b.n	8002168 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002168:	68fb      	ldr	r3, [r7, #12]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	200000b0 	.word	0x200000b0

08002178 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800217e:	f3ef 8305 	mrs	r3, IPSR
 8002182:	60bb      	str	r3, [r7, #8]
  return(result);
 8002184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10f      	bne.n	80021aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218a:	f3ef 8310 	mrs	r3, PRIMASK
 800218e:	607b      	str	r3, [r7, #4]
  return(result);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d109      	bne.n	80021aa <osKernelStart+0x32>
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <osKernelStart+0x64>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d109      	bne.n	80021b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800219e:	f3ef 8311 	mrs	r3, BASEPRI
 80021a2:	603b      	str	r3, [r7, #0]
  return(result);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80021aa:	f06f 0305 	mvn.w	r3, #5
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	e00e      	b.n	80021d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <osKernelStart+0x64>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <osKernelStart+0x64>)
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80021c0:	f001 fcf8 	bl	8003bb4 <vTaskStartScheduler>
      stat = osOK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e002      	b.n	80021d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80021d0:	68fb      	ldr	r3, [r7, #12]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200000b0 	.word	0x200000b0

080021e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b092      	sub	sp, #72	; 0x48
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021f0:	f3ef 8305 	mrs	r3, IPSR
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 8094 	bne.w	8002326 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002202:	623b      	str	r3, [r7, #32]
  return(result);
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 808d 	bne.w	8002326 <osThreadNew+0x146>
 800220c:	4b48      	ldr	r3, [pc, #288]	; (8002330 <osThreadNew+0x150>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d106      	bne.n	8002222 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002214:	f3ef 8311 	mrs	r3, BASEPRI
 8002218:	61fb      	str	r3, [r7, #28]
  return(result);
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	2b00      	cmp	r3, #0
 800221e:	f040 8082 	bne.w	8002326 <osThreadNew+0x146>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d07e      	beq.n	8002326 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800222c:	2318      	movs	r3, #24
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002230:	2300      	movs	r3, #0
 8002232:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002234:	f107 031b 	add.w	r3, r7, #27
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d045      	beq.n	80022d2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <osThreadNew+0x74>
        name = attr->name;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <osThreadNew+0x9a>
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	2b38      	cmp	r3, #56	; 0x38
 800226c:	d805      	bhi.n	800227a <osThreadNew+0x9a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <osThreadNew+0x9e>
        return (NULL);
 800227a:	2300      	movs	r3, #0
 800227c:	e054      	b.n	8002328 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00e      	beq.n	80022b4 <osThreadNew+0xd4>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b5b      	cmp	r3, #91	; 0x5b
 800229c:	d90a      	bls.n	80022b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d006      	beq.n	80022b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d002      	beq.n	80022b4 <osThreadNew+0xd4>
        mem = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b2:	e010      	b.n	80022d6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10c      	bne.n	80022d6 <osThreadNew+0xf6>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d108      	bne.n	80022d6 <osThreadNew+0xf6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <osThreadNew+0xf6>
          mem = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d0:	e001      	b.n	80022d6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d110      	bne.n	80022fe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022e4:	9202      	str	r2, [sp, #8]
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f001 fa92 	bl	800381c <xTaskCreateStatic>
 80022f8:	4603      	mov	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e013      	b.n	8002326 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	d110      	bne.n	8002326 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	b29a      	uxth	r2, r3
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f001 fadc 	bl	80038d4 <xTaskCreate>
 800231c:	4603      	mov	r3, r0
 800231e:	2b01      	cmp	r3, #1
 8002320:	d001      	beq.n	8002326 <osThreadNew+0x146>
          hTask = NULL;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002326:	697b      	ldr	r3, [r7, #20]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3738      	adds	r7, #56	; 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200000b0 	.word	0x200000b0

08002334 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800233c:	f3ef 8305 	mrs	r3, IPSR
 8002340:	613b      	str	r3, [r7, #16]
  return(result);
 8002342:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002348:	f3ef 8310 	mrs	r3, PRIMASK
 800234c:	60fb      	str	r3, [r7, #12]
  return(result);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <osDelay+0x34>
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <osDelay+0x58>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d109      	bne.n	8002370 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800235c:	f3ef 8311 	mrs	r3, BASEPRI
 8002360:	60bb      	str	r3, [r7, #8]
  return(result);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <osDelay+0x3c>
    stat = osErrorISR;
 8002368:	f06f 0305 	mvn.w	r3, #5
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e007      	b.n	8002380 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <osDelay+0x4c>
      vTaskDelay(ticks);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f001 fbe6 	bl	8003b4c <vTaskDelay>
    }
  }

  return (stat);
 8002380:	697b      	ldr	r3, [r7, #20]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200000b0 	.word	0x200000b0

08002390 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023a0:	f3ef 8305 	mrs	r3, IPSR
 80023a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80023a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 8086 	bne.w	80024ba <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ae:	f3ef 8310 	mrs	r3, PRIMASK
 80023b2:	617b      	str	r3, [r7, #20]
  return(result);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d17f      	bne.n	80024ba <osSemaphoreNew+0x12a>
 80023ba:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <osSemaphoreNew+0x134>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d105      	bne.n	80023ce <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023c2:	f3ef 8311 	mrs	r3, BASEPRI
 80023c6:	613b      	str	r3, [r7, #16]
  return(result);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d175      	bne.n	80024ba <osSemaphoreNew+0x12a>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d072      	beq.n	80024ba <osSemaphoreNew+0x12a>
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d86e      	bhi.n	80024ba <osSemaphoreNew+0x12a>
    mem = -1;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
 80023e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d015      	beq.n	8002414 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <osSemaphoreNew+0x6e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b4f      	cmp	r3, #79	; 0x4f
 80023f6:	d902      	bls.n	80023fe <osSemaphoreNew+0x6e>
        mem = 1;
 80023f8:	2301      	movs	r3, #1
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	e00c      	b.n	8002418 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d108      	bne.n	8002418 <osSemaphoreNew+0x88>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d104      	bne.n	8002418 <osSemaphoreNew+0x88>
          mem = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	e001      	b.n	8002418 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d04c      	beq.n	80024ba <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d128      	bne.n	8002478 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d10a      	bne.n	8002442 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2203      	movs	r2, #3
 8002432:	9200      	str	r2, [sp, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	2001      	movs	r0, #1
 800243a:	f000 fa4d 	bl	80028d8 <xQueueGenericCreateStatic>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24
 8002440:	e005      	b.n	800244e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002442:	2203      	movs	r2, #3
 8002444:	2100      	movs	r1, #0
 8002446:	2001      	movs	r0, #1
 8002448:	f000 fabd 	bl	80029c6 <xQueueGenericCreate>
 800244c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	2b00      	cmp	r3, #0
 8002452:	d022      	beq.n	800249a <osSemaphoreNew+0x10a>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01f      	beq.n	800249a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800245a:	2300      	movs	r3, #0
 800245c:	2200      	movs	r2, #0
 800245e:	2100      	movs	r1, #0
 8002460:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002462:	f000 fb7b 	bl	8002b5c <xQueueGenericSend>
 8002466:	4603      	mov	r3, r0
 8002468:	2b01      	cmp	r3, #1
 800246a:	d016      	beq.n	800249a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800246c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800246e:	f001 f805 	bl	800347c <vQueueDelete>
            hSemaphore = NULL;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e010      	b.n	800249a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	461a      	mov	r2, r3
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fafe 	bl	8002a88 <xQueueCreateCountingSemaphoreStatic>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24
 800248e:	e004      	b.n	800249a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fb2f 	bl	8002af6 <xQueueCreateCountingSemaphore>
 8002498:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00c      	beq.n	80024ba <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <osSemaphoreNew+0x11e>
          name = attr->name;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	e001      	b.n	80024b2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80024b2:	69f9      	ldr	r1, [r7, #28]
 80024b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024b6:	f001 f92b 	bl	8003710 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200000b0 	.word	0x200000b0

080024c8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80024e0:	f06f 0303 	mvn.w	r3, #3
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e04b      	b.n	8002580 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024e8:	f3ef 8305 	mrs	r3, IPSR
 80024ec:	617b      	str	r3, [r7, #20]
  return(result);
 80024ee:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10f      	bne.n	8002514 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f4:	f3ef 8310 	mrs	r3, PRIMASK
 80024f8:	613b      	str	r3, [r7, #16]
  return(result);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <osSemaphoreAcquire+0x4c>
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <osSemaphoreAcquire+0xc4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d128      	bne.n	800255a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002508:	f3ef 8311 	mrs	r3, BASEPRI
 800250c:	60fb      	str	r3, [r7, #12]
  return(result);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d022      	beq.n	800255a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800251a:	f06f 0303 	mvn.w	r3, #3
 800251e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002520:	e02d      	b.n	800257e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	461a      	mov	r2, r3
 800252c:	2100      	movs	r1, #0
 800252e:	69b8      	ldr	r0, [r7, #24]
 8002530:	f000 ff24 	bl	800337c <xQueueReceiveFromISR>
 8002534:	4603      	mov	r3, r0
 8002536:	2b01      	cmp	r3, #1
 8002538:	d003      	beq.n	8002542 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800253a:	f06f 0302 	mvn.w	r3, #2
 800253e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002540:	e01d      	b.n	800257e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01a      	beq.n	800257e <osSemaphoreAcquire+0xb6>
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <osSemaphoreAcquire+0xc8>)
 800254a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002558:	e011      	b.n	800257e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	69b8      	ldr	r0, [r7, #24]
 800255e:	f000 fe01 	bl	8003164 <xQueueSemaphoreTake>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d00b      	beq.n	8002580 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800256e:	f06f 0301 	mvn.w	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	e004      	b.n	8002580 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8002576:	f06f 0302 	mvn.w	r3, #2
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	e000      	b.n	8002580 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800257e:	bf00      	nop
      }
    }
  }

  return (stat);
 8002580:	69fb      	ldr	r3, [r7, #28]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200000b0 	.word	0x200000b0
 8002590:	e000ed04 	.word	0xe000ed04

08002594 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80025aa:	f06f 0303 	mvn.w	r3, #3
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	e03e      	b.n	8002630 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b2:	f3ef 8305 	mrs	r3, IPSR
 80025b6:	617b      	str	r3, [r7, #20]
  return(result);
 80025b8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10f      	bne.n	80025de <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025be:	f3ef 8310 	mrs	r3, PRIMASK
 80025c2:	613b      	str	r3, [r7, #16]
  return(result);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <osSemaphoreRelease+0x4a>
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <osSemaphoreRelease+0xa8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d120      	bne.n	8002614 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025d2:	f3ef 8311 	mrs	r3, BASEPRI
 80025d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01a      	beq.n	8002614 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4619      	mov	r1, r3
 80025e8:	69b8      	ldr	r0, [r7, #24]
 80025ea:	f000 fc4d 	bl	8002e88 <xQueueGiveFromISR>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d003      	beq.n	80025fc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80025f4:	f06f 0302 	mvn.w	r3, #2
 80025f8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80025fa:	e018      	b.n	800262e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <osSemaphoreRelease+0x9a>
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <osSemaphoreRelease+0xac>)
 8002604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002612:	e00c      	b.n	800262e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002614:	2300      	movs	r3, #0
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	69b8      	ldr	r0, [r7, #24]
 800261c:	f000 fa9e 	bl	8002b5c <xQueueGenericSend>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d004      	beq.n	8002630 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8002626:	f06f 0302 	mvn.w	r3, #2
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	e000      	b.n	8002630 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800262e:	bf00      	nop
    }
  }

  return (stat);
 8002630:	69fb      	ldr	r3, [r7, #28]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200000b0 	.word	0x200000b0
 8002640:	e000ed04 	.word	0xe000ed04

08002644 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a06      	ldr	r2, [pc, #24]	; (800266c <vApplicationGetIdleTaskMemory+0x28>)
 8002654:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <vApplicationGetIdleTaskMemory+0x2c>)
 800265a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	200000b4 	.word	0x200000b4
 8002670:	20000110 	.word	0x20000110

08002674 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002684:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <vApplicationGetTimerTaskMemory+0x30>)
 800268a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000310 	.word	0x20000310
 80026a4:	2000036c 	.word	0x2000036c

080026a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0208 	add.w	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f103 0208 	add.w	r2, r3, #8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f103 0208 	add.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d103      	bne.n	8002764 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e00c      	b.n	800277e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3308      	adds	r3, #8
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e002      	b.n	8002772 <vListInsert+0x2e>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	d2f6      	bcs.n	800276c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6892      	ldr	r2, [r2, #8]
 80027ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6852      	ldr	r2, [r2, #4]
 80027d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d103      	bne.n	80027e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1e5a      	subs	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002832:	f002 fbf3 	bl	800501c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	441a      	add	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	3b01      	subs	r3, #1
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	441a      	add	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	22ff      	movs	r2, #255	; 0xff
 8002876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	22ff      	movs	r2, #255	; 0xff
 800287e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d114      	bne.n	80028b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01a      	beq.n	80028c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3310      	adds	r3, #16
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fc17 	bl	80040c8 <xTaskRemoveFromEventList>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d012      	beq.n	80028c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <xQueueGenericReset+0xcc>)
 80028a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	e009      	b.n	80028c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3310      	adds	r3, #16
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fef6 	bl	80026a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3324      	adds	r3, #36	; 0x24
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fef1 	bl	80026a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028c6:	f002 fbd9 	bl	800507c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	e000ed04 	.word	0xe000ed04

080028d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08e      	sub	sp, #56	; 0x38
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028fe:	bf00      	nop
 8002900:	e7fe      	b.n	8002900 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10a      	bne.n	800291e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
}
 800291a:	bf00      	nop
 800291c:	e7fe      	b.n	800291c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <xQueueGenericCreateStatic+0x52>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <xQueueGenericCreateStatic+0x56>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <xQueueGenericCreateStatic+0x58>
 800292e:	2300      	movs	r3, #0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	623b      	str	r3, [r7, #32]
}
 8002946:	bf00      	nop
 8002948:	e7fe      	b.n	8002948 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <xQueueGenericCreateStatic+0x7e>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <xQueueGenericCreateStatic+0x82>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <xQueueGenericCreateStatic+0x84>
 800295a:	2300      	movs	r3, #0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	61fb      	str	r3, [r7, #28]
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002976:	2350      	movs	r3, #80	; 0x50
 8002978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b50      	cmp	r3, #80	; 0x50
 800297e:	d00a      	beq.n	8002996 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	61bb      	str	r3, [r7, #24]
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00d      	beq.n	80029bc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f843 	bl	8002a42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029be:	4618      	mov	r0, r3
 80029c0:	3730      	adds	r7, #48	; 0x30
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b08a      	sub	sp, #40	; 0x28
 80029ca:	af02      	add	r7, sp, #8
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	613b      	str	r3, [r7, #16]
}
 80029ec:	bf00      	nop
 80029ee:	e7fe      	b.n	80029ee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e004      	b.n	8002a06 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3350      	adds	r3, #80	; 0x50
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fc06 	bl	800521c <pvPortMalloc>
 8002a10:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00f      	beq.n	8002a38 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3350      	adds	r3, #80	; 0x50
 8002a1c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a26:	79fa      	ldrb	r2, [r7, #7]
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f805 	bl	8002a42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a38:	69bb      	ldr	r3, [r7, #24]
	}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e002      	b.n	8002a64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a70:	2101      	movs	r1, #1
 8002a72:	69b8      	ldr	r0, [r7, #24]
 8002a74:	f7ff fec8 	bl	8002808 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	61bb      	str	r3, [r7, #24]
}
 8002aac:	bf00      	nop
 8002aae:	e7fe      	b.n	8002aae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d90a      	bls.n	8002ace <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	617b      	str	r3, [r7, #20]
}
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ace:	2302      	movs	r3, #2
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff fefd 	bl	80028d8 <xQueueGenericCreateStatic>
 8002ade:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002aec:	69fb      	ldr	r3, [r7, #28]
	}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	613b      	str	r3, [r7, #16]
}
 8002b18:	bf00      	nop
 8002b1a:	e7fe      	b.n	8002b1a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d90a      	bls.n	8002b3a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	60fb      	str	r3, [r7, #12]
}
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff41 	bl	80029c6 <xQueueGenericCreate>
 8002b44:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002b52:	697b      	ldr	r3, [r7, #20]
	}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08e      	sub	sp, #56	; 0x38
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <xQueueGenericSend+0x32>
	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <xQueueGenericSend+0x40>
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <xQueueGenericSend+0x44>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <xQueueGenericSend+0x46>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <xQueueGenericSend+0x60>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d103      	bne.n	8002bca <xQueueGenericSend+0x6e>
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <xQueueGenericSend+0x72>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <xQueueGenericSend+0x74>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <xQueueGenericSend+0x8e>
	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	623b      	str	r3, [r7, #32]
}
 8002be6:	bf00      	nop
 8002be8:	e7fe      	b.n	8002be8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bea:	f001 fc2f 	bl	800444c <xTaskGetSchedulerState>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <xQueueGenericSend+0x9e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <xQueueGenericSend+0xa2>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <xQueueGenericSend+0xa4>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xQueueGenericSend+0xbe>
	__asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	61fb      	str	r3, [r7, #28]
}
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c1a:	f002 f9ff 	bl	800501c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <xQueueGenericSend+0xd4>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d129      	bne.n	8002c84 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c36:	f000 fc5b 	bl	80034f0 <prvCopyDataToQueue>
 8002c3a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	3324      	adds	r3, #36	; 0x24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 fa3d 	bl	80040c8 <xTaskRemoveFromEventList>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c54:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <xQueueGenericSend+0x1f8>)
 8002c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	e00a      	b.n	8002c7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <xQueueGenericSend+0x1f8>)
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c7c:	f002 f9fe 	bl	800507c <vPortExitCritical>
				return pdPASS;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e063      	b.n	8002d4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c8a:	f002 f9f7 	bl	800507c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e05c      	b.n	8002d4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 fa77 	bl	8004190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ca6:	f002 f9e9 	bl	800507c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002caa:	f000 ffe9 	bl	8003c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cae:	f002 f9b5 	bl	800501c <vPortEnterCritical>
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d103      	bne.n	8002cc8 <xQueueGenericSend+0x16c>
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cce:	b25b      	sxtb	r3, r3
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d103      	bne.n	8002cde <xQueueGenericSend+0x182>
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cde:	f002 f9cd 	bl	800507c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ce2:	1d3a      	adds	r2, r7, #4
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 fa66 	bl	80041bc <xTaskCheckForTimeOut>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d124      	bne.n	8002d40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf8:	f000 fcf2 	bl	80036e0 <prvIsQueueFull>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	3310      	adds	r3, #16
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 f98c 	bl	8004028 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d12:	f000 fc7d 	bl	8003610 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d16:	f000 ffc1 	bl	8003c9c <xTaskResumeAll>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f af7c 	bne.w	8002c1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <xQueueGenericSend+0x1f8>)
 8002d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	e772      	b.n	8002c1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d36:	f000 fc6b 	bl	8003610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d3a:	f000 ffaf 	bl	8003c9c <xTaskResumeAll>
 8002d3e:	e76c      	b.n	8002c1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d42:	f000 fc65 	bl	8003610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d46:	f000 ffa9 	bl	8003c9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d4a:	2300      	movs	r3, #0
		}
	}
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3738      	adds	r7, #56	; 0x38
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08e      	sub	sp, #56	; 0x38
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d82:	bf00      	nop
 8002d84:	e7fe      	b.n	8002d84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <xQueueGenericSendFromISR+0x3c>
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <xQueueGenericSendFromISR+0x40>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <xQueueGenericSendFromISR+0x42>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	623b      	str	r3, [r7, #32]
}
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d103      	bne.n	8002dc2 <xQueueGenericSendFromISR+0x6a>
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <xQueueGenericSendFromISR+0x6e>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <xQueueGenericSendFromISR+0x70>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10a      	bne.n	8002de2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	61fb      	str	r3, [r7, #28]
}
 8002dde:	bf00      	nop
 8002de0:	e7fe      	b.n	8002de0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002de2:	f002 f9dd 	bl	80051a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002de6:	f3ef 8211 	mrs	r2, BASEPRI
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	61ba      	str	r2, [r7, #24]
 8002dfc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <xQueueGenericSendFromISR+0xbc>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d12c      	bne.n	8002e6e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e24:	f000 fb64 	bl	80034f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e28:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d112      	bne.n	8002e58 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	3324      	adds	r3, #36	; 0x24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f942 	bl	80040c8 <xTaskRemoveFromEventList>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e007      	b.n	8002e68 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	b25a      	sxtb	r2, r3
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e6c:	e001      	b.n	8002e72 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3738      	adds	r7, #56	; 0x38
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	623b      	str	r3, [r7, #32]
}
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	61fb      	str	r3, [r7, #28]
}
 8002ecc:	bf00      	nop
 8002ece:	e7fe      	b.n	8002ece <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <xQueueGiveFromISR+0x58>
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <xQueueGiveFromISR+0x5c>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <xQueueGiveFromISR+0x5e>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	61bb      	str	r3, [r7, #24]
}
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f00:	f002 f94e 	bl	80051a0 <vPortValidateInterruptPriority>
	__asm volatile
 8002f04:	f3ef 8211 	mrs	r2, BASEPRI
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	617a      	str	r2, [r7, #20]
 8002f1a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002f1c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d22b      	bcs.n	8002f88 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d112      	bne.n	8002f72 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d016      	beq.n	8002f82 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	3324      	adds	r3, #36	; 0x24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f8b5 	bl	80040c8 <xTaskRemoveFromEventList>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e007      	b.n	8002f82 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f76:	3301      	adds	r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	b25a      	sxtb	r2, r3
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f82:	2301      	movs	r3, #1
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
 8002f86:	e001      	b.n	8002f8c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f383 8811 	msr	BASEPRI, r3
}
 8002f96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3738      	adds	r7, #56	; 0x38
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <xQueueReceive+0x30>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	623b      	str	r3, [r7, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <xQueueReceive+0x3e>
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <xQueueReceive+0x42>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <xQueueReceive+0x44>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <xQueueReceive+0x5e>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	61fb      	str	r3, [r7, #28]
}
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003002:	f001 fa23 	bl	800444c <xTaskGetSchedulerState>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <xQueueReceive+0x6e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <xQueueReceive+0x72>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <xQueueReceive+0x74>
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <xQueueReceive+0x8e>
	__asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	61bb      	str	r3, [r7, #24]
}
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003032:	f001 fff3 	bl	800501c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01f      	beq.n	8003082 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003046:	f000 fabd 	bl	80035c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00f      	beq.n	800307a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	3310      	adds	r3, #16
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f832 	bl	80040c8 <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <xQueueReceive+0x1bc>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800307a:	f001 ffff 	bl	800507c <vPortExitCritical>
				return pdPASS;
 800307e:	2301      	movs	r3, #1
 8003080:	e069      	b.n	8003156 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003088:	f001 fff8 	bl	800507c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800308c:	2300      	movs	r3, #0
 800308e:	e062      	b.n	8003156 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f878 	bl	8004190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030a4:	f001 ffea 	bl	800507c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030a8:	f000 fdea 	bl	8003c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030ac:	f001 ffb6 	bl	800501c <vPortEnterCritical>
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d103      	bne.n	80030c6 <xQueueReceive+0x122>
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d103      	bne.n	80030dc <xQueueReceive+0x138>
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030dc:	f001 ffce 	bl	800507c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030e0:	1d3a      	adds	r2, r7, #4
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 f867 	bl	80041bc <xTaskCheckForTimeOut>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d123      	bne.n	800313c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f6:	f000 fadd 	bl	80036b4 <prvIsQueueEmpty>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	3324      	adds	r3, #36	; 0x24
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f000 ff8d 	bl	8004028 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800310e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003110:	f000 fa7e 	bl	8003610 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003114:	f000 fdc2 	bl	8003c9c <xTaskResumeAll>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d189      	bne.n	8003032 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <xQueueReceive+0x1bc>)
 8003120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	e780      	b.n	8003032 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 fa6d 	bl	8003610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003136:	f000 fdb1 	bl	8003c9c <xTaskResumeAll>
 800313a:	e77a      	b.n	8003032 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800313c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313e:	f000 fa67 	bl	8003610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003142:	f000 fdab 	bl	8003c9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003148:	f000 fab4 	bl	80036b4 <prvIsQueueEmpty>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f43f af6f 	beq.w	8003032 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003154:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003156:	4618      	mov	r0, r3
 8003158:	3730      	adds	r7, #48	; 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08e      	sub	sp, #56	; 0x38
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800316e:	2300      	movs	r3, #0
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	623b      	str	r3, [r7, #32]
}
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	61fb      	str	r3, [r7, #28]
}
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031b4:	f001 f94a 	bl	800444c <xTaskGetSchedulerState>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <xQueueSemaphoreTake+0x60>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <xQueueSemaphoreTake+0x64>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <xQueueSemaphoreTake+0x66>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	61bb      	str	r3, [r7, #24]
}
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80031e4:	f001 ff1a 	bl	800501c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d024      	beq.n	800323e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003204:	f001 faa2 	bl	800474c <pvTaskIncrementMutexHeldCount>
 8003208:	4602      	mov	r2, r0
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00f      	beq.n	8003236 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	3310      	adds	r3, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f000 ff54 	bl	80040c8 <xTaskRemoveFromEventList>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003226:	4b54      	ldr	r3, [pc, #336]	; (8003378 <xQueueSemaphoreTake+0x214>)
 8003228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003236:	f001 ff21 	bl	800507c <vPortExitCritical>
				return pdPASS;
 800323a:	2301      	movs	r3, #1
 800323c:	e097      	b.n	800336e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d111      	bne.n	8003268 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	617b      	str	r3, [r7, #20]
}
 800325c:	bf00      	nop
 800325e:	e7fe      	b.n	800325e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003260:	f001 ff0c 	bl	800507c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003264:	2300      	movs	r3, #0
 8003266:	e082      	b.n	800336e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	4618      	mov	r0, r3
 8003274:	f000 ff8c 	bl	8004190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003278:	2301      	movs	r3, #1
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800327c:	f001 fefe 	bl	800507c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003280:	f000 fcfe 	bl	8003c80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003284:	f001 feca 	bl	800501c <vPortEnterCritical>
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328e:	b25b      	sxtb	r3, r3
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d103      	bne.n	800329e <xQueueSemaphoreTake+0x13a>
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d103      	bne.n	80032b4 <xQueueSemaphoreTake+0x150>
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b4:	f001 fee2 	bl	800507c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b8:	463a      	mov	r2, r7
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 ff7b 	bl	80041bc <xTaskCheckForTimeOut>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d132      	bne.n	8003332 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032ce:	f000 f9f1 	bl	80036b4 <prvIsQueueEmpty>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d026      	beq.n	8003326 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80032e0:	f001 fe9c 	bl	800501c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 f8cd 	bl	8004488 <xTaskPriorityInherit>
 80032ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80032f0:	f001 fec4 	bl	800507c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	3324      	adds	r3, #36	; 0x24
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fe93 	bl	8004028 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003304:	f000 f984 	bl	8003610 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003308:	f000 fcc8 	bl	8003c9c <xTaskResumeAll>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	f47f af68 	bne.w	80031e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <xQueueSemaphoreTake+0x214>)
 8003316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	e75e      	b.n	80031e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003328:	f000 f972 	bl	8003610 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800332c:	f000 fcb6 	bl	8003c9c <xTaskResumeAll>
 8003330:	e758      	b.n	80031e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003334:	f000 f96c 	bl	8003610 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003338:	f000 fcb0 	bl	8003c9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800333c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800333e:	f000 f9b9 	bl	80036b4 <prvIsQueueEmpty>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f43f af4d 	beq.w	80031e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003350:	f001 fe64 	bl	800501c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003356:	f000 f8b4 	bl	80034c2 <prvGetDisinheritPriorityAfterTimeout>
 800335a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003362:	4618      	mov	r0, r3
 8003364:	f001 f96c 	bl	8004640 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003368:	f001 fe88 	bl	800507c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800336c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800336e:	4618      	mov	r0, r3
 8003370:	3738      	adds	r7, #56	; 0x38
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000ed04 	.word	0xe000ed04

0800337c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08e      	sub	sp, #56	; 0x38
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	623b      	str	r3, [r7, #32]
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <xQueueReceiveFromISR+0x3a>
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <xQueueReceiveFromISR+0x3e>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <xQueueReceiveFromISR+0x40>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	61fb      	str	r3, [r7, #28]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033d6:	f001 fee3 	bl	80051a0 <vPortValidateInterruptPriority>
	__asm volatile
 80033da:	f3ef 8211 	mrs	r2, BASEPRI
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	61ba      	str	r2, [r7, #24]
 80033f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80033f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d02f      	beq.n	8003462 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003410:	f000 f8d8 	bl	80035c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800341c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d112      	bne.n	800344c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d016      	beq.n	800345c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	3310      	adds	r3, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fe48 	bl	80040c8 <xTaskRemoveFromEventList>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e007      	b.n	800345c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800344c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003450:	3301      	adds	r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	b25a      	sxtb	r2, r3
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800345c:	2301      	movs	r3, #1
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
 8003460:	e001      	b.n	8003466 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003462:	2300      	movs	r3, #0
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	613b      	str	r3, [r7, #16]
	__asm volatile
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f383 8811 	msr	BASEPRI, r3
}
 8003470:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003474:	4618      	mov	r0, r3
 8003476:	3738      	adds	r7, #56	; 0x38
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <vQueueDelete+0x28>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	60bb      	str	r3, [r7, #8]
}
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f95b 	bl	8003760 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f001 ff75 	bl	80053a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d006      	beq.n	80034e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e001      	b.n	80034e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80034e4:	68fb      	ldr	r3, [r7, #12]
	}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d14d      	bne.n	80035b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f822 	bl	8004564 <xTaskPriorityDisinherit>
 8003520:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	605a      	str	r2, [r3, #4]
 8003528:	e043      	b.n	80035b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d119      	bne.n	8003564 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6898      	ldr	r0, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	461a      	mov	r2, r3
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	f002 f86a 	bl	8005614 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	441a      	add	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	d32b      	bcc.n	80035b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	e026      	b.n	80035b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68d8      	ldr	r0, [r3, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	461a      	mov	r2, r3
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	f002 f850 	bl	8005614 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	425b      	negs	r3, r3
 800357e:	441a      	add	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d207      	bcs.n	80035a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	425b      	negs	r3, r3
 800359a:	441a      	add	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d105      	bne.n	80035b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035ba:	697b      	ldr	r3, [r7, #20]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d018      	beq.n	8003608 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	441a      	add	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d303      	bcc.n	80035f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	461a      	mov	r2, r3
 8003602:	6838      	ldr	r0, [r7, #0]
 8003604:	f002 f806 	bl	8005614 <memcpy>
	}
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003618:	f001 fd00 	bl	800501c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003622:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003624:	e011      	b.n	800364a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	2b00      	cmp	r3, #0
 800362c:	d012      	beq.n	8003654 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3324      	adds	r3, #36	; 0x24
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fd48 	bl	80040c8 <xTaskRemoveFromEventList>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800363e:	f000 fe1f 	bl	8004280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	3b01      	subs	r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	2b00      	cmp	r3, #0
 8003650:	dce9      	bgt.n	8003626 <prvUnlockQueue+0x16>
 8003652:	e000      	b.n	8003656 <prvUnlockQueue+0x46>
					break;
 8003654:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	22ff      	movs	r2, #255	; 0xff
 800365a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800365e:	f001 fd0d 	bl	800507c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003662:	f001 fcdb 	bl	800501c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800366c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800366e:	e011      	b.n	8003694 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d012      	beq.n	800369e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3310      	adds	r3, #16
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fd23 	bl	80040c8 <xTaskRemoveFromEventList>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003688:	f000 fdfa 	bl	8004280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	3b01      	subs	r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003694:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003698:	2b00      	cmp	r3, #0
 800369a:	dce9      	bgt.n	8003670 <prvUnlockQueue+0x60>
 800369c:	e000      	b.n	80036a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800369e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036a8:	f001 fce8 	bl	800507c <vPortExitCritical>
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036bc:	f001 fcae 	bl	800501c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	e001      	b.n	80036d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036d2:	f001 fcd3 	bl	800507c <vPortExitCritical>

	return xReturn;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036e8:	f001 fc98 	bl	800501c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d102      	bne.n	80036fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e001      	b.n	8003702 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003702:	f001 fcbb 	bl	800507c <vPortExitCritical>

	return xReturn;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	e014      	b.n	800374a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003720:	4a0e      	ldr	r2, [pc, #56]	; (800375c <vQueueAddToRegistry+0x4c>)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800372c:	490b      	ldr	r1, [pc, #44]	; (800375c <vQueueAddToRegistry+0x4c>)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003736:	4a09      	ldr	r2, [pc, #36]	; (800375c <vQueueAddToRegistry+0x4c>)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003742:	e006      	b.n	8003752 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b07      	cmp	r3, #7
 800374e:	d9e7      	bls.n	8003720 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	2000076c 	.word	0x2000076c

08003760 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e016      	b.n	800379c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800376e:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <vQueueUnregisterQueue+0x50>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d10b      	bne.n	8003796 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800377e:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <vQueueUnregisterQueue+0x50>)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2100      	movs	r1, #0
 8003784:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003788:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <vQueueUnregisterQueue+0x50>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	2200      	movs	r2, #0
 8003792:	605a      	str	r2, [r3, #4]
				break;
 8003794:	e006      	b.n	80037a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3301      	adds	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b07      	cmp	r3, #7
 80037a0:	d9e5      	bls.n	800376e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2000076c 	.word	0x2000076c

080037b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037c4:	f001 fc2a 	bl	800501c <vPortEnterCritical>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d103      	bne.n	80037de <vQueueWaitForMessageRestricted+0x2a>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d103      	bne.n	80037f4 <vQueueWaitForMessageRestricted+0x40>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f4:	f001 fc42 	bl	800507c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3324      	adds	r3, #36	; 0x24
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68b9      	ldr	r1, [r7, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fc31 	bl	8004070 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff fefe 	bl	8003610 <prvUnlockQueue>
	}
 8003814:	bf00      	nop
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af04      	add	r7, sp, #16
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	623b      	str	r3, [r7, #32]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <xTaskCreateStatic+0x46>
	__asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61fb      	str	r3, [r7, #28]
}
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003862:	235c      	movs	r3, #92	; 0x5c
 8003864:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b5c      	cmp	r3, #92	; 0x5c
 800386a:	d00a      	beq.n	8003882 <xTaskCreateStatic+0x66>
	__asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	61bb      	str	r3, [r7, #24]
}
 800387e:	bf00      	nop
 8003880:	e7fe      	b.n	8003880 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01e      	beq.n	80038c6 <xTaskCreateStatic+0xaa>
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01b      	beq.n	80038c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003896:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038a0:	2300      	movs	r3, #0
 80038a2:	9303      	str	r3, [sp, #12]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	9302      	str	r3, [sp, #8]
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f850 	bl	800395e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038c0:	f000 f8d4 	bl	8003a6c <prvAddNewTaskToReadyList>
 80038c4:	e001      	b.n	80038ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038ca:	697b      	ldr	r3, [r7, #20]
	}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	; 0x30
 80038d8:	af04      	add	r7, sp, #16
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 fc97 	bl	800521c <pvPortMalloc>
 80038ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00e      	beq.n	8003914 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80038f6:	205c      	movs	r0, #92	; 0x5c
 80038f8:	f001 fc90 	bl	800521c <pvPortMalloc>
 80038fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
 800390a:	e005      	b.n	8003918 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800390c:	6978      	ldr	r0, [r7, #20]
 800390e:	f001 fd49 	bl	80053a4 <vPortFree>
 8003912:	e001      	b.n	8003918 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d017      	beq.n	800394e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	2300      	movs	r3, #0
 800392a:	9303      	str	r3, [sp, #12]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	9302      	str	r3, [sp, #8]
 8003930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f80e 	bl	800395e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003942:	69f8      	ldr	r0, [r7, #28]
 8003944:	f000 f892 	bl	8003a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003948:	2301      	movs	r3, #1
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	e002      	b.n	8003954 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
 8003952:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003954:	69bb      	ldr	r3, [r7, #24]
	}
 8003956:	4618      	mov	r0, r3
 8003958:	3720      	adds	r7, #32
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b088      	sub	sp, #32
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	461a      	mov	r2, r3
 8003976:	21a5      	movs	r1, #165	; 0xa5
 8003978:	f001 fe5a 	bl	8005630 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003986:	3b01      	subs	r3, #1
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f023 0307 	bic.w	r3, r3, #7
 8003994:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	617b      	str	r3, [r7, #20]
}
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e012      	b.n	80039e2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	7819      	ldrb	r1, [r3, #0]
 80039c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	3334      	adds	r3, #52	; 0x34
 80039cc:	460a      	mov	r2, r1
 80039ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b0f      	cmp	r3, #15
 80039e6:	d9e9      	bls.n	80039bc <prvInitialiseNewTask+0x5e>
 80039e8:	e000      	b.n	80039ec <prvInitialiseNewTask+0x8e>
		{
			break;
 80039ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	2b37      	cmp	r3, #55	; 0x37
 80039f8:	d901      	bls.n	80039fe <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039fa:	2337      	movs	r3, #55	; 0x37
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a12:	3304      	adds	r3, #4
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fe66 	bl	80026e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	3318      	adds	r3, #24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fe61 	bl	80026e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	69b8      	ldr	r0, [r7, #24]
 8003a4e:	f001 f9f7 	bl	8004e40 <pxPortInitialiseStack>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a64:	bf00      	nop
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a74:	f001 fad2 	bl	800501c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <prvAddNewTaskToReadyList+0xc4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <prvAddNewTaskToReadyList+0xc4>)
 8003a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a82:	4b2c      	ldr	r3, [pc, #176]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a90:	4b27      	ldr	r3, [pc, #156]	; (8003b30 <prvAddNewTaskToReadyList+0xc4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d110      	bne.n	8003aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a98:	f000 fc16 	bl	80042c8 <prvInitialiseTaskLists>
 8003a9c:	e00d      	b.n	8003aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a9e:	4b26      	ldr	r3, [pc, #152]	; (8003b38 <prvAddNewTaskToReadyList+0xcc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d802      	bhi.n	8003aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003aba:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <prvAddNewTaskToReadyList+0xd0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <prvAddNewTaskToReadyList+0xd0>)
 8003ac2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ac4:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <prvAddNewTaskToReadyList+0xd0>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <prvAddNewTaskToReadyList+0xd4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d903      	bls.n	8003ae0 <prvAddNewTaskToReadyList+0x74>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	4a18      	ldr	r2, [pc, #96]	; (8003b40 <prvAddNewTaskToReadyList+0xd4>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <prvAddNewTaskToReadyList+0xd8>)
 8003aee:	441a      	add	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe fe01 	bl	80026fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003afc:	f001 fabe 	bl	800507c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b00:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <prvAddNewTaskToReadyList+0xcc>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b08:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvAddNewTaskToReadyList+0xc8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d207      	bcs.n	8003b26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <prvAddNewTaskToReadyList+0xdc>)
 8003b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000c80 	.word	0x20000c80
 8003b34:	200007ac 	.word	0x200007ac
 8003b38:	20000c8c 	.word	0x20000c8c
 8003b3c:	20000c9c 	.word	0x20000c9c
 8003b40:	20000c88 	.word	0x20000c88
 8003b44:	200007b0 	.word	0x200007b0
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <vTaskDelay+0x60>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <vTaskDelay+0x30>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60bb      	str	r3, [r7, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b7c:	f000 f880 	bl	8003c80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b80:	2100      	movs	r1, #0
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fdf6 	bl	8004774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b88:	f000 f888 	bl	8003c9c <xTaskResumeAll>
 8003b8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b94:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <vTaskDelay+0x64>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000ca8 	.word	0x20000ca8
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bc2:	463a      	mov	r2, r7
 8003bc4:	1d39      	adds	r1, r7, #4
 8003bc6:	f107 0308 	add.w	r3, r7, #8
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fd3a 	bl	8002644 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bd0:	6839      	ldr	r1, [r7, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	9202      	str	r2, [sp, #8]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2300      	movs	r3, #0
 8003be0:	460a      	mov	r2, r1
 8003be2:	4921      	ldr	r1, [pc, #132]	; (8003c68 <vTaskStartScheduler+0xb4>)
 8003be4:	4821      	ldr	r0, [pc, #132]	; (8003c6c <vTaskStartScheduler+0xb8>)
 8003be6:	f7ff fe19 	bl	800381c <xTaskCreateStatic>
 8003bea:	4603      	mov	r3, r0
 8003bec:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <vTaskStartScheduler+0xbc>)
 8003bee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bf0:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <vTaskStartScheduler+0xbc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e001      	b.n	8003c02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c08:	f000 fe08 	bl	800481c <xTimerCreateTimerTask>
 8003c0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d116      	bne.n	8003c42 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	613b      	str	r3, [r7, #16]
}
 8003c26:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <vTaskStartScheduler+0xc0>)
 8003c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c30:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <vTaskStartScheduler+0xc4>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <vTaskStartScheduler+0xc8>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c3c:	f001 f97c 	bl	8004f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c40:	e00e      	b.n	8003c60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d10a      	bne.n	8003c60 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	60fb      	str	r3, [r7, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <vTaskStartScheduler+0xaa>
}
 8003c60:	bf00      	nop
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	080056d0 	.word	0x080056d0
 8003c6c:	08004299 	.word	0x08004299
 8003c70:	20000ca4 	.word	0x20000ca4
 8003c74:	20000ca0 	.word	0x20000ca0
 8003c78:	20000c8c 	.word	0x20000c8c
 8003c7c:	20000c84 	.word	0x20000c84

08003c80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <vTaskSuspendAll+0x18>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	4a03      	ldr	r2, [pc, #12]	; (8003c98 <vTaskSuspendAll+0x18>)
 8003c8c:	6013      	str	r3, [r2, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000ca8 	.word	0x20000ca8

08003c9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003caa:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <xTaskResumeAll+0x118>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	603b      	str	r3, [r7, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cc8:	f001 f9a8 	bl	800501c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <xTaskResumeAll+0x118>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	4a38      	ldr	r2, [pc, #224]	; (8003db4 <xTaskResumeAll+0x118>)
 8003cd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd6:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <xTaskResumeAll+0x118>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d162      	bne.n	8003da4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <xTaskResumeAll+0x11c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d05e      	beq.n	8003da4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ce6:	e02f      	b.n	8003d48 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <xTaskResumeAll+0x120>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fd5d 	bl	80027b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fd58 	bl	80027b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4b2d      	ldr	r3, [pc, #180]	; (8003dc0 <xTaskResumeAll+0x124>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d903      	bls.n	8003d18 <xTaskResumeAll+0x7c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4a2a      	ldr	r2, [pc, #168]	; (8003dc0 <xTaskResumeAll+0x124>)
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <xTaskResumeAll+0x128>)
 8003d26:	441a      	add	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f7fe fce5 	bl	80026fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <xTaskResumeAll+0x12c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <xTaskResumeAll+0x130>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d48:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <xTaskResumeAll+0x120>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1cb      	bne.n	8003ce8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d56:	f000 fb55 	bl	8004404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <xTaskResumeAll+0x134>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d66:	f000 f845 	bl	8003df4 <xTaskIncrementTick>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <xTaskResumeAll+0x130>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f1      	bne.n	8003d66 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <xTaskResumeAll+0x134>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <xTaskResumeAll+0x130>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d90:	2301      	movs	r3, #1
 8003d92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <xTaskResumeAll+0x138>)
 8003d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003da4:	f001 f96a 	bl	800507c <vPortExitCritical>

	return xAlreadyYielded;
 8003da8:	68bb      	ldr	r3, [r7, #8]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000ca8 	.word	0x20000ca8
 8003db8:	20000c80 	.word	0x20000c80
 8003dbc:	20000c40 	.word	0x20000c40
 8003dc0:	20000c88 	.word	0x20000c88
 8003dc4:	200007b0 	.word	0x200007b0
 8003dc8:	200007ac 	.word	0x200007ac
 8003dcc:	20000c94 	.word	0x20000c94
 8003dd0:	20000c90 	.word	0x20000c90
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <xTaskGetTickCount+0x18>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003de4:	687b      	ldr	r3, [r7, #4]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	20000c84 	.word	0x20000c84

08003df4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dfe:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <xTaskIncrementTick+0x150>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 808e 	bne.w	8003f24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e08:	4b4f      	ldr	r3, [pc, #316]	; (8003f48 <xTaskIncrementTick+0x154>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e10:	4a4d      	ldr	r2, [pc, #308]	; (8003f48 <xTaskIncrementTick+0x154>)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d120      	bne.n	8003e5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e1c:	4b4b      	ldr	r3, [pc, #300]	; (8003f4c <xTaskIncrementTick+0x158>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <xTaskIncrementTick+0x48>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	603b      	str	r3, [r7, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	e7fe      	b.n	8003e3a <xTaskIncrementTick+0x46>
 8003e3c:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <xTaskIncrementTick+0x158>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <xTaskIncrementTick+0x15c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a41      	ldr	r2, [pc, #260]	; (8003f4c <xTaskIncrementTick+0x158>)
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4a41      	ldr	r2, [pc, #260]	; (8003f50 <xTaskIncrementTick+0x15c>)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4b40      	ldr	r3, [pc, #256]	; (8003f54 <xTaskIncrementTick+0x160>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	4a3f      	ldr	r2, [pc, #252]	; (8003f54 <xTaskIncrementTick+0x160>)
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	f000 fad3 	bl	8004404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e5e:	4b3e      	ldr	r3, [pc, #248]	; (8003f58 <xTaskIncrementTick+0x164>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d34e      	bcc.n	8003f06 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e68:	4b38      	ldr	r3, [pc, #224]	; (8003f4c <xTaskIncrementTick+0x158>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <xTaskIncrementTick+0x82>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <xTaskIncrementTick+0x84>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <xTaskIncrementTick+0x164>)
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e82:	601a      	str	r2, [r3, #0]
					break;
 8003e84:	e03f      	b.n	8003f06 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e86:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <xTaskIncrementTick+0x158>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d203      	bcs.n	8003ea6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e9e:	4a2e      	ldr	r2, [pc, #184]	; (8003f58 <xTaskIncrementTick+0x164>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6013      	str	r3, [r2, #0]
						break;
 8003ea4:	e02f      	b.n	8003f06 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe fc82 	bl	80027b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	3318      	adds	r3, #24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fc79 	bl	80027b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <xTaskIncrementTick+0x168>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d903      	bls.n	8003ed6 <xTaskIncrementTick+0xe2>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed2:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <xTaskIncrementTick+0x168>)
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <xTaskIncrementTick+0x16c>)
 8003ee4:	441a      	add	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	4619      	mov	r1, r3
 8003eec:	4610      	mov	r0, r2
 8003eee:	f7fe fc06 	bl	80026fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <xTaskIncrementTick+0x170>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3b3      	bcc.n	8003e68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f04:	e7b0      	b.n	8003e68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f06:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <xTaskIncrementTick+0x170>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	4914      	ldr	r1, [pc, #80]	; (8003f60 <xTaskIncrementTick+0x16c>)
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d907      	bls.n	8003f2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e004      	b.n	8003f2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f24:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <xTaskIncrementTick+0x174>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a0f      	ldr	r2, [pc, #60]	; (8003f68 <xTaskIncrementTick+0x174>)
 8003f2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <xTaskIncrementTick+0x178>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f3a:	697b      	ldr	r3, [r7, #20]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000ca8 	.word	0x20000ca8
 8003f48:	20000c84 	.word	0x20000c84
 8003f4c:	20000c38 	.word	0x20000c38
 8003f50:	20000c3c 	.word	0x20000c3c
 8003f54:	20000c98 	.word	0x20000c98
 8003f58:	20000ca0 	.word	0x20000ca0
 8003f5c:	20000c88 	.word	0x20000c88
 8003f60:	200007b0 	.word	0x200007b0
 8003f64:	200007ac 	.word	0x200007ac
 8003f68:	20000c90 	.word	0x20000c90
 8003f6c:	20000c94 	.word	0x20000c94

08003f70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <vTaskSwitchContext+0xa4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <vTaskSwitchContext+0xa8>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f84:	e041      	b.n	800400a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <vTaskSwitchContext+0xa8>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f8c:	4b23      	ldr	r3, [pc, #140]	; (800401c <vTaskSwitchContext+0xac>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e010      	b.n	8003fb6 <vTaskSwitchContext+0x46>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	607b      	str	r3, [r7, #4]
}
 8003fac:	bf00      	nop
 8003fae:	e7fe      	b.n	8003fae <vTaskSwitchContext+0x3e>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	491a      	ldr	r1, [pc, #104]	; (8004020 <vTaskSwitchContext+0xb0>)
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0e4      	beq.n	8003f94 <vTaskSwitchContext+0x24>
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4a12      	ldr	r2, [pc, #72]	; (8004020 <vTaskSwitchContext+0xb0>)
 8003fd6:	4413      	add	r3, r2
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	3308      	adds	r3, #8
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d104      	bne.n	8003ffa <vTaskSwitchContext+0x8a>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a08      	ldr	r2, [pc, #32]	; (8004024 <vTaskSwitchContext+0xb4>)
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4a05      	ldr	r2, [pc, #20]	; (800401c <vTaskSwitchContext+0xac>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6013      	str	r3, [r2, #0]
}
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	20000ca8 	.word	0x20000ca8
 8004018:	20000c94 	.word	0x20000c94
 800401c:	20000c88 	.word	0x20000c88
 8004020:	200007b0 	.word	0x200007b0
 8004024:	200007ac 	.word	0x200007ac

08004028 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	60fb      	str	r3, [r7, #12]
}
 800404a:	bf00      	nop
 800404c:	e7fe      	b.n	800404c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800404e:	4b07      	ldr	r3, [pc, #28]	; (800406c <vTaskPlaceOnEventList+0x44>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3318      	adds	r3, #24
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fe fb74 	bl	8002744 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800405c:	2101      	movs	r1, #1
 800405e:	6838      	ldr	r0, [r7, #0]
 8004060:	f000 fb88 	bl	8004774 <prvAddCurrentTaskToDelayedList>
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	200007ac 	.word	0x200007ac

08004070 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	617b      	str	r3, [r7, #20]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3318      	adds	r3, #24
 800409e:	4619      	mov	r1, r3
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7fe fb2c 	bl	80026fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295
 80040b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	68b8      	ldr	r0, [r7, #8]
 80040b6:	f000 fb5d 	bl	8004774 <prvAddCurrentTaskToDelayedList>
	}
 80040ba:	bf00      	nop
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200007ac 	.word	0x200007ac

080040c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	60fb      	str	r3, [r7, #12]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3318      	adds	r3, #24
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fb5b 	bl	80027b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040fe:	4b1e      	ldr	r3, [pc, #120]	; (8004178 <xTaskRemoveFromEventList+0xb0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d11d      	bne.n	8004142 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	3304      	adds	r3, #4
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fb52 	bl	80027b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <xTaskRemoveFromEventList+0xb4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d903      	bls.n	8004124 <xTaskRemoveFromEventList+0x5c>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	4a16      	ldr	r2, [pc, #88]	; (800417c <xTaskRemoveFromEventList+0xb4>)
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4a13      	ldr	r2, [pc, #76]	; (8004180 <xTaskRemoveFromEventList+0xb8>)
 8004132:	441a      	add	r2, r3
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7fe fadf 	bl	80026fe <vListInsertEnd>
 8004140:	e005      	b.n	800414e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	3318      	adds	r3, #24
 8004146:	4619      	mov	r1, r3
 8004148:	480e      	ldr	r0, [pc, #56]	; (8004184 <xTaskRemoveFromEventList+0xbc>)
 800414a:	f7fe fad8 	bl	80026fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <xTaskRemoveFromEventList+0xc0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	429a      	cmp	r2, r3
 800415a:	d905      	bls.n	8004168 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <xTaskRemoveFromEventList+0xc4>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e001      	b.n	800416c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800416c:	697b      	ldr	r3, [r7, #20]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000ca8 	.word	0x20000ca8
 800417c:	20000c88 	.word	0x20000c88
 8004180:	200007b0 	.word	0x200007b0
 8004184:	20000c40 	.word	0x20000c40
 8004188:	200007ac 	.word	0x200007ac
 800418c:	20000c94 	.word	0x20000c94

08004190 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <vTaskInternalSetTimeOutState+0x24>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <vTaskInternalSetTimeOutState+0x28>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	605a      	str	r2, [r3, #4]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000c98 	.word	0x20000c98
 80041b8:	20000c84 	.word	0x20000c84

080041bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	613b      	str	r3, [r7, #16]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	60fb      	str	r3, [r7, #12]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041fe:	f000 ff0d 	bl	800501c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <xTaskCheckForTimeOut+0xbc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d102      	bne.n	8004222 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800421c:	2300      	movs	r3, #0
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e023      	b.n	800426a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <xTaskCheckForTimeOut+0xc0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d007      	beq.n	800423e <xTaskCheckForTimeOut+0x82>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004238:	2301      	movs	r3, #1
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e015      	b.n	800426a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	429a      	cmp	r2, r3
 8004246:	d20b      	bcs.n	8004260 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	1ad2      	subs	r2, r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff9b 	bl	8004190 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e004      	b.n	800426a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004266:	2301      	movs	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800426a:	f000 ff07 	bl	800507c <vPortExitCritical>

	return xReturn;
 800426e:	69fb      	ldr	r3, [r7, #28]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000c84 	.word	0x20000c84
 800427c:	20000c98 	.word	0x20000c98

08004280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <vTaskMissedYield+0x14>)
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000c94 	.word	0x20000c94

08004298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042a0:	f000 f852 	bl	8004348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042a4:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <prvIdleTask+0x28>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d9f9      	bls.n	80042a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <prvIdleTask+0x2c>)
 80042ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042bc:	e7f0      	b.n	80042a0 <prvIdleTask+0x8>
 80042be:	bf00      	nop
 80042c0:	200007b0 	.word	0x200007b0
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	e00c      	b.n	80042ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <prvInitialiseTaskLists+0x60>)
 80042e0:	4413      	add	r3, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe f9e0 	bl	80026a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3301      	adds	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b37      	cmp	r3, #55	; 0x37
 80042f2:	d9ef      	bls.n	80042d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042f4:	480d      	ldr	r0, [pc, #52]	; (800432c <prvInitialiseTaskLists+0x64>)
 80042f6:	f7fe f9d7 	bl	80026a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042fa:	480d      	ldr	r0, [pc, #52]	; (8004330 <prvInitialiseTaskLists+0x68>)
 80042fc:	f7fe f9d4 	bl	80026a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004300:	480c      	ldr	r0, [pc, #48]	; (8004334 <prvInitialiseTaskLists+0x6c>)
 8004302:	f7fe f9d1 	bl	80026a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004306:	480c      	ldr	r0, [pc, #48]	; (8004338 <prvInitialiseTaskLists+0x70>)
 8004308:	f7fe f9ce 	bl	80026a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800430c:	480b      	ldr	r0, [pc, #44]	; (800433c <prvInitialiseTaskLists+0x74>)
 800430e:	f7fe f9cb 	bl	80026a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <prvInitialiseTaskLists+0x78>)
 8004314:	4a05      	ldr	r2, [pc, #20]	; (800432c <prvInitialiseTaskLists+0x64>)
 8004316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <prvInitialiseTaskLists+0x7c>)
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <prvInitialiseTaskLists+0x68>)
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	200007b0 	.word	0x200007b0
 800432c:	20000c10 	.word	0x20000c10
 8004330:	20000c24 	.word	0x20000c24
 8004334:	20000c40 	.word	0x20000c40
 8004338:	20000c54 	.word	0x20000c54
 800433c:	20000c6c 	.word	0x20000c6c
 8004340:	20000c38 	.word	0x20000c38
 8004344:	20000c3c 	.word	0x20000c3c

08004348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800434e:	e019      	b.n	8004384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004350:	f000 fe64 	bl	800501c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <prvCheckTasksWaitingTermination+0x50>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fa27 	bl	80027b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <prvCheckTasksWaitingTermination+0x54>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3b01      	subs	r3, #1
 800436c:	4a0b      	ldr	r2, [pc, #44]	; (800439c <prvCheckTasksWaitingTermination+0x54>)
 800436e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <prvCheckTasksWaitingTermination+0x58>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3b01      	subs	r3, #1
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <prvCheckTasksWaitingTermination+0x58>)
 8004378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800437a:	f000 fe7f 	bl	800507c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f810 	bl	80043a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <prvCheckTasksWaitingTermination+0x58>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e1      	bne.n	8004350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000c54 	.word	0x20000c54
 800439c:	20000c80 	.word	0x20000c80
 80043a0:	20000c68 	.word	0x20000c68

080043a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d108      	bne.n	80043c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fff2 	bl	80053a4 <vPortFree>
				vPortFree( pxTCB );
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 ffef 	bl	80053a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043c6:	e018      	b.n	80043fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d103      	bne.n	80043da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 ffe6 	bl	80053a4 <vPortFree>
	}
 80043d8:	e00f      	b.n	80043fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d00a      	beq.n	80043fa <prvDeleteTCB+0x56>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	60fb      	str	r3, [r7, #12]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <prvDeleteTCB+0x54>
	}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <prvResetNextTaskUnblockTime+0x40>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <prvResetNextTaskUnblockTime+0x14>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <prvResetNextTaskUnblockTime+0x16>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800441e:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <prvResetNextTaskUnblockTime+0x44>)
 8004420:	f04f 32ff 	mov.w	r2, #4294967295
 8004424:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004426:	e008      	b.n	800443a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <prvResetNextTaskUnblockTime+0x40>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <prvResetNextTaskUnblockTime+0x44>)
 8004438:	6013      	str	r3, [r2, #0]
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	20000c38 	.word	0x20000c38
 8004448:	20000ca0 	.word	0x20000ca0

0800444c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <xTaskGetSchedulerState+0x34>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800445a:	2301      	movs	r3, #1
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	e008      	b.n	8004472 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004460:	4b08      	ldr	r3, [pc, #32]	; (8004484 <xTaskGetSchedulerState+0x38>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d102      	bne.n	800446e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004468:	2302      	movs	r3, #2
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	e001      	b.n	8004472 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004472:	687b      	ldr	r3, [r7, #4]
	}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000c8c 	.word	0x20000c8c
 8004484:	20000ca8 	.word	0x20000ca8

08004488 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d056      	beq.n	800454c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	4b2d      	ldr	r3, [pc, #180]	; (8004558 <xTaskPriorityInherit+0xd0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d246      	bcs.n	800453a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db06      	blt.n	80044c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <xTaskPriorityInherit+0xd0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6959      	ldr	r1, [r3, #20]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4a22      	ldr	r2, [pc, #136]	; (800455c <xTaskPriorityInherit+0xd4>)
 80044d4:	4413      	add	r3, r2
 80044d6:	4299      	cmp	r1, r3
 80044d8:	d101      	bne.n	80044de <xTaskPriorityInherit+0x56>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <xTaskPriorityInherit+0x58>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d022      	beq.n	800452a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe f963 	bl	80027b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044ee:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <xTaskPriorityInherit+0xd0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	4b18      	ldr	r3, [pc, #96]	; (8004560 <xTaskPriorityInherit+0xd8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d903      	bls.n	800450c <xTaskPriorityInherit+0x84>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	4a15      	ldr	r2, [pc, #84]	; (8004560 <xTaskPriorityInherit+0xd8>)
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4a10      	ldr	r2, [pc, #64]	; (800455c <xTaskPriorityInherit+0xd4>)
 800451a:	441a      	add	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f7fe f8eb 	bl	80026fe <vListInsertEnd>
 8004528:	e004      	b.n	8004534 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800452a:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <xTaskPriorityInherit+0xd0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004534:	2301      	movs	r3, #1
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e008      	b.n	800454c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <xTaskPriorityInherit+0xd0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	429a      	cmp	r2, r3
 8004546:	d201      	bcs.n	800454c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800454c:	68fb      	ldr	r3, [r7, #12]
	}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200007ac 	.word	0x200007ac
 800455c:	200007b0 	.word	0x200007b0
 8004560:	20000c88 	.word	0x20000c88

08004564 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d056      	beq.n	8004628 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800457a:	4b2e      	ldr	r3, [pc, #184]	; (8004634 <xTaskPriorityDisinherit+0xd0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	429a      	cmp	r2, r3
 8004582:	d00a      	beq.n	800459a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60bb      	str	r3, [r7, #8]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	1e5a      	subs	r2, r3, #1
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d02c      	beq.n	8004628 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d128      	bne.n	8004628 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	3304      	adds	r3, #4
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe f8ea 	bl	80027b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <xTaskPriorityDisinherit+0xd4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d903      	bls.n	8004608 <xTaskPriorityDisinherit+0xa4>
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	4a0c      	ldr	r2, [pc, #48]	; (8004638 <xTaskPriorityDisinherit+0xd4>)
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4a09      	ldr	r2, [pc, #36]	; (800463c <xTaskPriorityDisinherit+0xd8>)
 8004616:	441a      	add	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7fe f86d 	bl	80026fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004628:	697b      	ldr	r3, [r7, #20]
	}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	200007ac 	.word	0x200007ac
 8004638:	20000c88 	.word	0x20000c88
 800463c:	200007b0 	.word	0x200007b0

08004640 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800464e:	2301      	movs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d06f      	beq.n	8004738 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	60fb      	str	r3, [r7, #12]
}
 8004672:	bf00      	nop
 8004674:	e7fe      	b.n	8004674 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d902      	bls.n	8004686 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e002      	b.n	800468c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	429a      	cmp	r2, r3
 8004694:	d050      	beq.n	8004738 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	d14b      	bne.n	8004738 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d10a      	bne.n	80046c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	60bb      	str	r3, [r7, #8]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db04      	blt.n	80046de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	6959      	ldr	r1, [r3, #20]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4a15      	ldr	r2, [pc, #84]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80046ee:	4413      	add	r3, r2
 80046f0:	4299      	cmp	r1, r3
 80046f2:	d101      	bne.n	80046f8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <vTaskPriorityDisinheritAfterTimeout+0xba>
 80046f8:	2300      	movs	r3, #0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01c      	beq.n	8004738 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3304      	adds	r3, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe f856 	bl	80027b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d903      	bls.n	800471c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4a06      	ldr	r2, [pc, #24]	; (8004744 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800472a:	441a      	add	r2, r3
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f7fd ffe3 	bl	80026fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004738:	bf00      	nop
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	200007ac 	.word	0x200007ac
 8004744:	200007b0 	.word	0x200007b0
 8004748:	20000c88 	.word	0x20000c88

0800474c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <pvTaskIncrementMutexHeldCount+0x24>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <pvTaskIncrementMutexHeldCount+0x24>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800475e:	3201      	adds	r2, #1
 8004760:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004762:	4b03      	ldr	r3, [pc, #12]	; (8004770 <pvTaskIncrementMutexHeldCount+0x24>)
 8004764:	681b      	ldr	r3, [r3, #0]
	}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	200007ac 	.word	0x200007ac

08004774 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <prvAddCurrentTaskToDelayedList+0x90>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004784:	4b20      	ldr	r3, [pc, #128]	; (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3304      	adds	r3, #4
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe f812 	bl	80027b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d10a      	bne.n	80047ae <prvAddCurrentTaskToDelayedList+0x3a>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800479e:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4819      	ldr	r0, [pc, #100]	; (800480c <prvAddCurrentTaskToDelayedList+0x98>)
 80047a8:	f7fd ffa9 	bl	80026fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ac:	e026      	b.n	80047fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047b6:	4b14      	ldr	r3, [pc, #80]	; (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d209      	bcs.n	80047da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7fd ffb6 	bl	8002744 <vListInsert>
}
 80047d8:	e010      	b.n	80047fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047da:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <prvAddCurrentTaskToDelayedList+0xa0>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7fd ffac 	bl	8002744 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d202      	bcs.n	80047fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000c84 	.word	0x20000c84
 8004808:	200007ac 	.word	0x200007ac
 800480c:	20000c6c 	.word	0x20000c6c
 8004810:	20000c3c 	.word	0x20000c3c
 8004814:	20000c38 	.word	0x20000c38
 8004818:	20000ca0 	.word	0x20000ca0

0800481c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004826:	f000 facb 	bl	8004dc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800482a:	4b1c      	ldr	r3, [pc, #112]	; (800489c <xTimerCreateTimerTask+0x80>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d021      	beq.n	8004876 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800483a:	1d3a      	adds	r2, r7, #4
 800483c:	f107 0108 	add.w	r1, r7, #8
 8004840:	f107 030c 	add.w	r3, r7, #12
 8004844:	4618      	mov	r0, r3
 8004846:	f7fd ff15 	bl	8002674 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	9202      	str	r2, [sp, #8]
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	2302      	movs	r3, #2
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2300      	movs	r3, #0
 800485a:	460a      	mov	r2, r1
 800485c:	4910      	ldr	r1, [pc, #64]	; (80048a0 <xTimerCreateTimerTask+0x84>)
 800485e:	4811      	ldr	r0, [pc, #68]	; (80048a4 <xTimerCreateTimerTask+0x88>)
 8004860:	f7fe ffdc 	bl	800381c <xTaskCreateStatic>
 8004864:	4603      	mov	r3, r0
 8004866:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <xTimerCreateTimerTask+0x8c>)
 8004868:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <xTimerCreateTimerTask+0x8c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004872:	2301      	movs	r3, #1
 8004874:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	613b      	str	r3, [r7, #16]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004892:	697b      	ldr	r3, [r7, #20]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000cdc 	.word	0x20000cdc
 80048a0:	080056d8 	.word	0x080056d8
 80048a4:	080049c9 	.word	0x080049c9
 80048a8:	20000ce0 	.word	0x20000ce0

080048ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xTimerGenericCommand+0x2e>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	623b      	str	r3, [r7, #32]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048da:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <xTimerGenericCommand+0x98>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d02a      	beq.n	8004938 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	dc18      	bgt.n	8004926 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048f4:	f7ff fdaa 	bl	800444c <xTaskGetSchedulerState>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d109      	bne.n	8004912 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <xTimerGenericCommand+0x98>)
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	f107 0110 	add.w	r1, r7, #16
 8004906:	2300      	movs	r3, #0
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	f7fe f927 	bl	8002b5c <xQueueGenericSend>
 800490e:	6278      	str	r0, [r7, #36]	; 0x24
 8004910:	e012      	b.n	8004938 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <xTimerGenericCommand+0x98>)
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	f107 0110 	add.w	r1, r7, #16
 800491a:	2300      	movs	r3, #0
 800491c:	2200      	movs	r2, #0
 800491e:	f7fe f91d 	bl	8002b5c <xQueueGenericSend>
 8004922:	6278      	str	r0, [r7, #36]	; 0x24
 8004924:	e008      	b.n	8004938 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <xTimerGenericCommand+0x98>)
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	f107 0110 	add.w	r1, r7, #16
 800492e:	2300      	movs	r3, #0
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	f7fe fa11 	bl	8002d58 <xQueueGenericSendFromISR>
 8004936:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000cdc 	.word	0x20000cdc

08004948 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004952:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <prvProcessExpiredTimer+0x7c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3304      	adds	r3, #4
 8004960:	4618      	mov	r0, r3
 8004962:	f7fd ff27 	bl	80027b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d122      	bne.n	80049b4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	18d1      	adds	r1, r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	6978      	ldr	r0, [r7, #20]
 800497c:	f000 f8c8 	bl	8004b10 <prvInsertTimerInActiveList>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d016      	beq.n	80049b4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004986:	2300      	movs	r3, #0
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	2300      	movs	r3, #0
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	2100      	movs	r1, #0
 8004990:	6978      	ldr	r0, [r7, #20]
 8004992:	f7ff ff8b 	bl	80048ac <xTimerGenericCommand>
 8004996:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	60fb      	str	r3, [r7, #12]
}
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	6978      	ldr	r0, [r7, #20]
 80049ba:	4798      	blx	r3
}
 80049bc:	bf00      	nop
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20000cd4 	.word	0x20000cd4

080049c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049d0:	f107 0308 	add.w	r3, r7, #8
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 f857 	bl	8004a88 <prvGetNextExpireTime>
 80049da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4619      	mov	r1, r3
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f803 	bl	80049ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049e6:	f000 f8d5 	bl	8004b94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049ea:	e7f1      	b.n	80049d0 <prvTimerTask+0x8>

080049ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049f6:	f7ff f943 	bl	8003c80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049fa:	f107 0308 	add.w	r3, r7, #8
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f866 	bl	8004ad0 <prvSampleTimeNow>
 8004a04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d130      	bne.n	8004a6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <prvProcessTimerOrBlockTask+0x3c>
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d806      	bhi.n	8004a28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a1a:	f7ff f93f 	bl	8003c9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a1e:	68f9      	ldr	r1, [r7, #12]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff ff91 	bl	8004948 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a26:	e024      	b.n	8004a72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <prvProcessTimerOrBlockTask+0x90>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bf0c      	ite	eq
 8004a38:	2301      	moveq	r3, #1
 8004a3a:	2300      	movne	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a40:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <prvProcessTimerOrBlockTask+0x94>)
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f7fe feb1 	bl	80037b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a52:	f7ff f923 	bl	8003c9c <xTaskResumeAll>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <prvProcessTimerOrBlockTask+0x98>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
}
 8004a6c:	e001      	b.n	8004a72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a6e:	f7ff f915 	bl	8003c9c <xTaskResumeAll>
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000cd8 	.word	0x20000cd8
 8004a80:	20000cdc 	.word	0x20000cdc
 8004a84:	e000ed04 	.word	0xe000ed04

08004a88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a90:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <prvGetNextExpireTime+0x44>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bf0c      	ite	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d105      	bne.n	8004aba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <prvGetNextExpireTime+0x44>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e001      	b.n	8004abe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004abe:	68fb      	ldr	r3, [r7, #12]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20000cd4 	.word	0x20000cd4

08004ad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ad8:	f7ff f97e 	bl	8003dd8 <xTaskGetTickCount>
 8004adc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <prvSampleTimeNow+0x3c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d205      	bcs.n	8004af4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ae8:	f000 f908 	bl	8004cfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e002      	b.n	8004afa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004afa:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <prvSampleTimeNow+0x3c>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b00:	68fb      	ldr	r3, [r7, #12]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000ce4 	.word	0x20000ce4

08004b10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d812      	bhi.n	8004b5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	1ad2      	subs	r2, r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d302      	bcc.n	8004b4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b44:	2301      	movs	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e01b      	b.n	8004b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b4a:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <prvInsertTimerInActiveList+0x7c>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3304      	adds	r3, #4
 8004b52:	4619      	mov	r1, r3
 8004b54:	4610      	mov	r0, r2
 8004b56:	f7fd fdf5 	bl	8002744 <vListInsert>
 8004b5a:	e012      	b.n	8004b82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d206      	bcs.n	8004b72 <prvInsertTimerInActiveList+0x62>
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d302      	bcc.n	8004b72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e007      	b.n	8004b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <prvInsertTimerInActiveList+0x80>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7fd fde1 	bl	8002744 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b82:	697b      	ldr	r3, [r7, #20]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000cd8 	.word	0x20000cd8
 8004b90:	20000cd4 	.word	0x20000cd4

08004b94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08e      	sub	sp, #56	; 0x38
 8004b98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b9a:	e09d      	b.n	8004cd8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da18      	bge.n	8004bd4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	61fb      	str	r3, [r7, #28]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bca:	6850      	ldr	r0, [r2, #4]
 8004bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	db7d      	blt.n	8004cd6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d004      	beq.n	8004bf0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	3304      	adds	r3, #4
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fd fde2 	bl	80027b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff6c 	bl	8004ad0 <prvSampleTimeNow>
 8004bf8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d86b      	bhi.n	8004cd8 <prvProcessReceivedCommands+0x144>
 8004c00:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <prvProcessReceivedCommands+0x74>)
 8004c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c06:	bf00      	nop
 8004c08:	08004c31 	.word	0x08004c31
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c31 	.word	0x08004c31
 8004c14:	08004cd9 	.word	0x08004cd9
 8004c18:	08004c8d 	.word	0x08004c8d
 8004c1c:	08004cc5 	.word	0x08004cc5
 8004c20:	08004c31 	.word	0x08004c31
 8004c24:	08004c31 	.word	0x08004c31
 8004c28:	08004cd9 	.word	0x08004cd9
 8004c2c:	08004c8d 	.word	0x08004c8d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	18d1      	adds	r1, r2, r3
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3e:	f7ff ff67 	bl	8004b10 <prvInsertTimerInActiveList>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d047      	beq.n	8004cd8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c4e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d13f      	bne.n	8004cd8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	441a      	add	r2, r3
 8004c60:	2300      	movs	r3, #0
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	2100      	movs	r1, #0
 8004c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c6a:	f7ff fe1f 	bl	80048ac <xTimerGenericCommand>
 8004c6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d130      	bne.n	8004cd8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	61bb      	str	r3, [r7, #24]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	617b      	str	r3, [r7, #20]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	18d1      	adds	r1, r2, r3
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cbe:	f7ff ff27 	bl	8004b10 <prvInsertTimerInActiveList>
					break;
 8004cc2:	e009      	b.n	8004cd8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd0:	f000 fb68 	bl	80053a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cd4:	e000      	b.n	8004cd8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004cd6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <prvProcessReceivedCommands+0x164>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	1d39      	adds	r1, r7, #4
 8004cde:	2200      	movs	r2, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe f95f 	bl	8002fa4 <xQueueReceive>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f47f af57 	bne.w	8004b9c <prvProcessReceivedCommands+0x8>
	}
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	3730      	adds	r7, #48	; 0x30
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000cdc 	.word	0x20000cdc

08004cfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d02:	e045      	b.n	8004d90 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d04:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <prvSwitchTimerLists+0xbc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d0e:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <prvSwitchTimerLists+0xbc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fd fd49 	bl	80027b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d12e      	bne.n	8004d90 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d90e      	bls.n	8004d62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d50:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <prvSwitchTimerLists+0xbc>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	f7fd fcf2 	bl	8002744 <vListInsert>
 8004d60:	e016      	b.n	8004d90 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d62:	2300      	movs	r3, #0
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	2300      	movs	r3, #0
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff fd9d 	bl	80048ac <xTimerGenericCommand>
 8004d72:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	603b      	str	r3, [r7, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d90:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <prvSwitchTimerLists+0xbc>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1b4      	bne.n	8004d04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <prvSwitchTimerLists+0xbc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <prvSwitchTimerLists+0xc0>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <prvSwitchTimerLists+0xbc>)
 8004da6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004da8:	4a04      	ldr	r2, [pc, #16]	; (8004dbc <prvSwitchTimerLists+0xc0>)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	6013      	str	r3, [r2, #0]
}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000cd4 	.word	0x20000cd4
 8004dbc:	20000cd8 	.word	0x20000cd8

08004dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dc6:	f000 f929 	bl	800501c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dca:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <prvCheckForValidListAndQueue+0x60>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d120      	bne.n	8004e14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dd2:	4814      	ldr	r0, [pc, #80]	; (8004e24 <prvCheckForValidListAndQueue+0x64>)
 8004dd4:	f7fd fc68 	bl	80026a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dd8:	4813      	ldr	r0, [pc, #76]	; (8004e28 <prvCheckForValidListAndQueue+0x68>)
 8004dda:	f7fd fc65 	bl	80026a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <prvCheckForValidListAndQueue+0x6c>)
 8004de0:	4a10      	ldr	r2, [pc, #64]	; (8004e24 <prvCheckForValidListAndQueue+0x64>)
 8004de2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004de4:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <prvCheckForValidListAndQueue+0x70>)
 8004de6:	4a10      	ldr	r2, [pc, #64]	; (8004e28 <prvCheckForValidListAndQueue+0x68>)
 8004de8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dea:	2300      	movs	r3, #0
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <prvCheckForValidListAndQueue+0x74>)
 8004df0:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <prvCheckForValidListAndQueue+0x78>)
 8004df2:	2110      	movs	r1, #16
 8004df4:	200a      	movs	r0, #10
 8004df6:	f7fd fd6f 	bl	80028d8 <xQueueGenericCreateStatic>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <prvCheckForValidListAndQueue+0x60>)
 8004dfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <prvCheckForValidListAndQueue+0x60>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d005      	beq.n	8004e14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <prvCheckForValidListAndQueue+0x60>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	490b      	ldr	r1, [pc, #44]	; (8004e3c <prvCheckForValidListAndQueue+0x7c>)
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fc7e 	bl	8003710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e14:	f000 f932 	bl	800507c <vPortExitCritical>
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000cdc 	.word	0x20000cdc
 8004e24:	20000cac 	.word	0x20000cac
 8004e28:	20000cc0 	.word	0x20000cc0
 8004e2c:	20000cd4 	.word	0x20000cd4
 8004e30:	20000cd8 	.word	0x20000cd8
 8004e34:	20000d88 	.word	0x20000d88
 8004e38:	20000ce8 	.word	0x20000ce8
 8004e3c:	080056e0 	.word	0x080056e0

08004e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3b04      	subs	r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b04      	subs	r3, #4
 8004e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b04      	subs	r3, #4
 8004e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <pxPortInitialiseStack+0x54>)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3b14      	subs	r3, #20
 8004e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3b20      	subs	r3, #32
 8004e86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e88:	68fb      	ldr	r3, [r7, #12]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	08004e99 	.word	0x08004e99

08004e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ea2:	4b12      	ldr	r3, [pc, #72]	; (8004eec <prvTaskExitError+0x54>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d00a      	beq.n	8004ec2 <prvTaskExitError+0x2a>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	60fb      	str	r3, [r7, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <prvTaskExitError+0x28>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60bb      	str	r3, [r7, #8]
}
 8004ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ed6:	bf00      	nop
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0fc      	beq.n	8004ed8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ede:	bf00      	nop
 8004ee0:	bf00      	nop
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	2000001c 	.word	0x2000001c

08004ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <pxCurrentTCBConst2>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004efa:	f380 8809 	msr	PSP, r0
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004f0e:	4770      	bx	lr

08004f10 <pxCurrentTCBConst2>:
 8004f10:	200007ac 	.word	0x200007ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004f18:	4806      	ldr	r0, [pc, #24]	; (8004f34 <prvPortStartFirstTask+0x1c>)
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f380 8808 	msr	MSP, r0
 8004f22:	b662      	cpsie	i
 8004f24:	b661      	cpsie	f
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	df00      	svc	0
 8004f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f32:	bf00      	nop
 8004f34:	e000ed08 	.word	0xe000ed08

08004f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f3e:	4b32      	ldr	r3, [pc, #200]	; (8005008 <xPortStartScheduler+0xd0>)
 8004f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	22ff      	movs	r2, #255	; 0xff
 8004f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	4b2a      	ldr	r3, [pc, #168]	; (800500c <xPortStartScheduler+0xd4>)
 8004f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f66:	4b2a      	ldr	r3, [pc, #168]	; (8005010 <xPortStartScheduler+0xd8>)
 8004f68:	2207      	movs	r2, #7
 8004f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f6c:	e009      	b.n	8004f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f6e:	4b28      	ldr	r3, [pc, #160]	; (8005010 <xPortStartScheduler+0xd8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <xPortStartScheduler+0xd8>)
 8004f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	2b80      	cmp	r3, #128	; 0x80
 8004f8c:	d0ef      	beq.n	8004f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <xPortStartScheduler+0xd8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1c3 0307 	rsb	r3, r3, #7
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d00a      	beq.n	8004fb0 <xPortStartScheduler+0x78>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	60bb      	str	r3, [r7, #8]
}
 8004fac:	bf00      	nop
 8004fae:	e7fe      	b.n	8004fae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <xPortStartScheduler+0xd8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	4a16      	ldr	r2, [pc, #88]	; (8005010 <xPortStartScheduler+0xd8>)
 8004fb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <xPortStartScheduler+0xd8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fc2:	4a13      	ldr	r2, [pc, #76]	; (8005010 <xPortStartScheduler+0xd8>)
 8004fc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fce:	4b11      	ldr	r3, [pc, #68]	; (8005014 <xPortStartScheduler+0xdc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a10      	ldr	r2, [pc, #64]	; (8005014 <xPortStartScheduler+0xdc>)
 8004fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fda:	4b0e      	ldr	r3, [pc, #56]	; (8005014 <xPortStartScheduler+0xdc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <xPortStartScheduler+0xdc>)
 8004fe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fe4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fe6:	f000 f8b9 	bl	800515c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <xPortStartScheduler+0xe0>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ff0:	f7ff ff92 	bl	8004f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ff4:	f7fe ffbc 	bl	8003f70 <vTaskSwitchContext>
	prvTaskExitError();
 8004ff8:	f7ff ff4e 	bl	8004e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	e000e400 	.word	0xe000e400
 800500c:	20000dd8 	.word	0x20000dd8
 8005010:	20000ddc 	.word	0x20000ddc
 8005014:	e000ed20 	.word	0xe000ed20
 8005018:	2000001c 	.word	0x2000001c

0800501c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	607b      	str	r3, [r7, #4]
}
 8005034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <vPortEnterCritical+0x58>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <vPortEnterCritical+0x58>)
 800503e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <vPortEnterCritical+0x58>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d10f      	bne.n	8005068 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005048:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <vPortEnterCritical+0x5c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <vPortEnterCritical+0x4c>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	603b      	str	r3, [r7, #0]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <vPortEnterCritical+0x4a>
	}
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	2000001c 	.word	0x2000001c
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <vPortExitCritical+0x4c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <vPortExitCritical+0x24>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	607b      	str	r3, [r7, #4]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <vPortExitCritical+0x4c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <vPortExitCritical+0x4c>)
 80050a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <vPortExitCritical+0x4c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <vPortExitCritical+0x42>
 80050b2:	2300      	movs	r3, #0
 80050b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f383 8811 	msr	BASEPRI, r3
}
 80050bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr
 80050c8:	2000001c 	.word	0x2000001c
 80050cc:	00000000 	.word	0x00000000

080050d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050d0:	f3ef 8009 	mrs	r0, PSP
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <pxCurrentTCBConst>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050e0:	6010      	str	r0, [r2, #0]
 80050e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80050e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80050ea:	f380 8811 	msr	BASEPRI, r0
 80050ee:	f7fe ff3f 	bl	8003f70 <vTaskSwitchContext>
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050fe:	6819      	ldr	r1, [r3, #0]
 8005100:	6808      	ldr	r0, [r1, #0]
 8005102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005106:	f380 8809 	msr	PSP, r0
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	4770      	bx	lr

08005110 <pxCurrentTCBConst>:
 8005110:	200007ac 	.word	0x200007ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop

08005118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	607b      	str	r3, [r7, #4]
}
 8005130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005132:	f7fe fe5f 	bl	8003df4 <xTaskIncrementTick>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <xPortSysTickHandler+0x40>)
 800513e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f383 8811 	msr	BASEPRI, r3
}
 800514e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <vPortSetupTimerInterrupt+0x30>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <vPortSetupTimerInterrupt+0x34>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <vPortSetupTimerInterrupt+0x38>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a09      	ldr	r2, [pc, #36]	; (8005198 <vPortSetupTimerInterrupt+0x3c>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	099b      	lsrs	r3, r3, #6
 8005178:	4a08      	ldr	r2, [pc, #32]	; (800519c <vPortSetupTimerInterrupt+0x40>)
 800517a:	3b01      	subs	r3, #1
 800517c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800517e:	4b03      	ldr	r3, [pc, #12]	; (800518c <vPortSetupTimerInterrupt+0x30>)
 8005180:	2207      	movs	r2, #7
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr
 800518c:	e000e010 	.word	0xe000e010
 8005190:	e000e018 	.word	0xe000e018
 8005194:	20000010 	.word	0x20000010
 8005198:	10624dd3 	.word	0x10624dd3
 800519c:	e000e014 	.word	0xe000e014

080051a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051a6:	f3ef 8305 	mrs	r3, IPSR
 80051aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	d914      	bls.n	80051dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051b2:	4a16      	ldr	r2, [pc, #88]	; (800520c <vPortValidateInterruptPriority+0x6c>)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051bc:	4b14      	ldr	r3, [pc, #80]	; (8005210 <vPortValidateInterruptPriority+0x70>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	7afa      	ldrb	r2, [r7, #11]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d20a      	bcs.n	80051dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	607b      	str	r3, [r7, #4]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <vPortValidateInterruptPriority+0x74>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <vPortValidateInterruptPriority+0x78>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d90a      	bls.n	8005202 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	603b      	str	r3, [r7, #0]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <vPortValidateInterruptPriority+0x60>
	}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	e000e3f0 	.word	0xe000e3f0
 8005210:	20000dd8 	.word	0x20000dd8
 8005214:	e000ed0c 	.word	0xe000ed0c
 8005218:	20000ddc 	.word	0x20000ddc

0800521c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005228:	f7fe fd2a 	bl	8003c80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800522c:	4b58      	ldr	r3, [pc, #352]	; (8005390 <pvPortMalloc+0x174>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005234:	f000 f910 	bl	8005458 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005238:	4b56      	ldr	r3, [pc, #344]	; (8005394 <pvPortMalloc+0x178>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 808e 	bne.w	8005362 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01d      	beq.n	8005288 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800524c:	2208      	movs	r2, #8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4413      	add	r3, r2
 8005252:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d014      	beq.n	8005288 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	3308      	adds	r3, #8
 8005266:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <pvPortMalloc+0x6c>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	617b      	str	r3, [r7, #20]
}
 8005284:	bf00      	nop
 8005286:	e7fe      	b.n	8005286 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d069      	beq.n	8005362 <pvPortMalloc+0x146>
 800528e:	4b42      	ldr	r3, [pc, #264]	; (8005398 <pvPortMalloc+0x17c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	d864      	bhi.n	8005362 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005298:	4b40      	ldr	r3, [pc, #256]	; (800539c <pvPortMalloc+0x180>)
 800529a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800529c:	4b3f      	ldr	r3, [pc, #252]	; (800539c <pvPortMalloc+0x180>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052a2:	e004      	b.n	80052ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d903      	bls.n	80052c0 <pvPortMalloc+0xa4>
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1f1      	bne.n	80052a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052c0:	4b33      	ldr	r3, [pc, #204]	; (8005390 <pvPortMalloc+0x174>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d04b      	beq.n	8005362 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2208      	movs	r2, #8
 80052d0:	4413      	add	r3, r2
 80052d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	2308      	movs	r3, #8
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d91f      	bls.n	800532c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4413      	add	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <pvPortMalloc+0xf8>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	613b      	str	r3, [r7, #16]
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	1ad2      	subs	r2, r2, r3
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005326:	69b8      	ldr	r0, [r7, #24]
 8005328:	f000 f8f8 	bl	800551c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800532c:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <pvPortMalloc+0x17c>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	4a18      	ldr	r2, [pc, #96]	; (8005398 <pvPortMalloc+0x17c>)
 8005338:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800533a:	4b17      	ldr	r3, [pc, #92]	; (8005398 <pvPortMalloc+0x17c>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <pvPortMalloc+0x184>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d203      	bcs.n	800534e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <pvPortMalloc+0x17c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <pvPortMalloc+0x184>)
 800534c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <pvPortMalloc+0x178>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	431a      	orrs	r2, r3
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005362:	f7fe fc9b 	bl	8003c9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <pvPortMalloc+0x16a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	60fb      	str	r3, [r7, #12]
}
 8005382:	bf00      	nop
 8005384:	e7fe      	b.n	8005384 <pvPortMalloc+0x168>
	return pvReturn;
 8005386:	69fb      	ldr	r3, [r7, #28]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3728      	adds	r7, #40	; 0x28
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	200019e8 	.word	0x200019e8
 8005394:	200019f4 	.word	0x200019f4
 8005398:	200019ec 	.word	0x200019ec
 800539c:	200019e0 	.word	0x200019e0
 80053a0:	200019f0 	.word	0x200019f0

080053a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d048      	beq.n	8005448 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053b6:	2308      	movs	r3, #8
 80053b8:	425b      	negs	r3, r3
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4413      	add	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4b21      	ldr	r3, [pc, #132]	; (8005450 <vPortFree+0xac>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <vPortFree+0x44>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60fb      	str	r3, [r7, #12]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <vPortFree+0x62>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60bb      	str	r3, [r7, #8]
}
 8005402:	bf00      	nop
 8005404:	e7fe      	b.n	8005404 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	4b11      	ldr	r3, [pc, #68]	; (8005450 <vPortFree+0xac>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d019      	beq.n	8005448 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d115      	bne.n	8005448 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <vPortFree+0xac>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	43db      	mvns	r3, r3
 8005426:	401a      	ands	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800542c:	f7fe fc28 	bl	8003c80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <vPortFree+0xb0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4413      	add	r3, r2
 800543a:	4a06      	ldr	r2, [pc, #24]	; (8005454 <vPortFree+0xb0>)
 800543c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800543e:	6938      	ldr	r0, [r7, #16]
 8005440:	f000 f86c 	bl	800551c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005444:	f7fe fc2a 	bl	8003c9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005448:	bf00      	nop
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200019f4 	.word	0x200019f4
 8005454:	200019ec 	.word	0x200019ec

08005458 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800545e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005462:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <prvHeapInit+0xac>)
 8005466:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00c      	beq.n	800548c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3307      	adds	r3, #7
 8005476:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	4a1f      	ldr	r2, [pc, #124]	; (8005504 <prvHeapInit+0xac>)
 8005488:	4413      	add	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005490:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <prvHeapInit+0xb0>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <prvHeapInit+0xb0>)
 8005498:	2200      	movs	r2, #0
 800549a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	4413      	add	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054a4:	2208      	movs	r2, #8
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1a9b      	subs	r3, r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0307 	bic.w	r3, r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a15      	ldr	r2, [pc, #84]	; (800550c <prvHeapInit+0xb4>)
 80054b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <prvHeapInit+0xb4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2200      	movs	r2, #0
 80054c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054c2:	4b12      	ldr	r3, [pc, #72]	; (800550c <prvHeapInit+0xb4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <prvHeapInit+0xb4>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <prvHeapInit+0xb8>)
 80054e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a09      	ldr	r2, [pc, #36]	; (8005514 <prvHeapInit+0xbc>)
 80054ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054f0:	4b09      	ldr	r3, [pc, #36]	; (8005518 <prvHeapInit+0xc0>)
 80054f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054f6:	601a      	str	r2, [r3, #0]
}
 80054f8:	bf00      	nop
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000de0 	.word	0x20000de0
 8005508:	200019e0 	.word	0x200019e0
 800550c:	200019e8 	.word	0x200019e8
 8005510:	200019f0 	.word	0x200019f0
 8005514:	200019ec 	.word	0x200019ec
 8005518:	200019f4 	.word	0x200019f4

0800551c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005524:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	e002      	b.n	8005530 <prvInsertBlockIntoFreeList+0x14>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	429a      	cmp	r2, r3
 8005538:	d8f7      	bhi.n	800552a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4413      	add	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	429a      	cmp	r2, r3
 800554a:	d108      	bne.n	800555e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	441a      	add	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	441a      	add	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d118      	bne.n	80055a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b14      	ldr	r3, [pc, #80]	; (80055c8 <prvInsertBlockIntoFreeList+0xac>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d00d      	beq.n	800559a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e008      	b.n	80055ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <prvInsertBlockIntoFreeList+0xac>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e003      	b.n	80055ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d002      	beq.n	80055ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	bc80      	pop	{r7}
 80055c2:	4770      	bx	lr
 80055c4:	200019e0 	.word	0x200019e0
 80055c8:	200019e8 	.word	0x200019e8

080055cc <__libc_init_array>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	2600      	movs	r6, #0
 80055d0:	4d0c      	ldr	r5, [pc, #48]	; (8005604 <__libc_init_array+0x38>)
 80055d2:	4c0d      	ldr	r4, [pc, #52]	; (8005608 <__libc_init_array+0x3c>)
 80055d4:	1b64      	subs	r4, r4, r5
 80055d6:	10a4      	asrs	r4, r4, #2
 80055d8:	42a6      	cmp	r6, r4
 80055da:	d109      	bne.n	80055f0 <__libc_init_array+0x24>
 80055dc:	f000 f830 	bl	8005640 <_init>
 80055e0:	2600      	movs	r6, #0
 80055e2:	4d0a      	ldr	r5, [pc, #40]	; (800560c <__libc_init_array+0x40>)
 80055e4:	4c0a      	ldr	r4, [pc, #40]	; (8005610 <__libc_init_array+0x44>)
 80055e6:	1b64      	subs	r4, r4, r5
 80055e8:	10a4      	asrs	r4, r4, #2
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	d105      	bne.n	80055fa <__libc_init_array+0x2e>
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f4:	4798      	blx	r3
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7ee      	b.n	80055d8 <__libc_init_array+0xc>
 80055fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fe:	4798      	blx	r3
 8005600:	3601      	adds	r6, #1
 8005602:	e7f2      	b.n	80055ea <__libc_init_array+0x1e>
 8005604:	080057a0 	.word	0x080057a0
 8005608:	080057a0 	.word	0x080057a0
 800560c:	080057a0 	.word	0x080057a0
 8005610:	080057a4 	.word	0x080057a4

08005614 <memcpy>:
 8005614:	440a      	add	r2, r1
 8005616:	4291      	cmp	r1, r2
 8005618:	f100 33ff 	add.w	r3, r0, #4294967295
 800561c:	d100      	bne.n	8005620 <memcpy+0xc>
 800561e:	4770      	bx	lr
 8005620:	b510      	push	{r4, lr}
 8005622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005626:	4291      	cmp	r1, r2
 8005628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800562c:	d1f9      	bne.n	8005622 <memcpy+0xe>
 800562e:	bd10      	pop	{r4, pc}

08005630 <memset>:
 8005630:	4603      	mov	r3, r0
 8005632:	4402      	add	r2, r0
 8005634:	4293      	cmp	r3, r2
 8005636:	d100      	bne.n	800563a <memset+0xa>
 8005638:	4770      	bx	lr
 800563a:	f803 1b01 	strb.w	r1, [r3], #1
 800563e:	e7f9      	b.n	8005634 <memset+0x4>

08005640 <_init>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr

0800564c <_fini>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr
