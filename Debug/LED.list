
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004938  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae8  08004ae8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004ae8  08004ae8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ae8  08004ae8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c8  20000020  08004b10  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e8  08004b10  000219e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010af5  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e7  00000000  00000000  00030b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00033428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00034328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000326b  00000000  00000000  00035138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c1b  00000000  00000000  000383a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c461  00000000  00000000  00048fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d541f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d70  00000000  00000000  000d5470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000020 	.word	0x20000020
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a30 	.word	0x08004a30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000024 	.word	0x20000024
 800014c:	08004a30 	.word	0x08004a30

08000150 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800015a:	4a38      	ldr	r2, [pc, #224]	; (800023c <HD44780_Init+0xec>)
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000160:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf0>)
 8000162:	2208      	movs	r2, #8
 8000164:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000166:	4b37      	ldr	r3, [pc, #220]	; (8000244 <HD44780_Init+0xf4>)
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800016c:	4b33      	ldr	r3, [pc, #204]	; (800023c <HD44780_Init+0xec>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b01      	cmp	r3, #1
 8000172:	d907      	bls.n	8000184 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000174:	4b33      	ldr	r3, [pc, #204]	; (8000244 <HD44780_Init+0xf4>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	f043 0308 	orr.w	r3, r3, #8
 800017c:	b2da      	uxtb	r2, r3
 800017e:	4b31      	ldr	r3, [pc, #196]	; (8000244 <HD44780_Init+0xf4>)
 8000180:	701a      	strb	r2, [r3, #0]
 8000182:	e006      	b.n	8000192 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000184:	4b2f      	ldr	r3, [pc, #188]	; (8000244 <HD44780_Init+0xf4>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <HD44780_Init+0xf4>)
 8000190:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000192:	f000 f985 	bl	80004a0 <DelayInit>
  HAL_Delay(50);
 8000196:	2032      	movs	r0, #50	; 0x32
 8000198:	f000 fc2c 	bl	80009f4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800019c:	4b28      	ldr	r3, [pc, #160]	; (8000240 <HD44780_Init+0xf0>)
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 f943 	bl	800042c <ExpanderWrite>
  HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fc23 	bl	80009f4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001ae:	2030      	movs	r0, #48	; 0x30
 80001b0:	f000 f92b 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001b4:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b8:	f000 f99a 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001bc:	2030      	movs	r0, #48	; 0x30
 80001be:	f000 f924 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001c2:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c6:	f000 f993 	bl	80004f0 <DelayUS>

  Write4Bits(0x03 << 4);
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f91d 	bl	800040a <Write4Bits>
  DelayUS(4500);
 80001d0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d4:	f000 f98c 	bl	80004f0 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d8:	2020      	movs	r0, #32
 80001da:	f000 f916 	bl	800040a <Write4Bits>
  DelayUS(100);
 80001de:	2064      	movs	r0, #100	; 0x64
 80001e0:	f000 f986 	bl	80004f0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e4:	4b17      	ldr	r3, [pc, #92]	; (8000244 <HD44780_Init+0xf4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	f043 0320 	orr.w	r3, r3, #32
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f8ce 	bl	8000390 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <HD44780_Init+0xf8>)
 80001f6:	2204      	movs	r2, #4
 80001f8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001fa:	f000 f875 	bl	80002e8 <HD44780_Display>
  HD44780_Clear();
 80001fe:	f000 f82b 	bl	8000258 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <HD44780_Init+0xfc>)
 8000204:	2202      	movs	r2, #2
 8000206:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000208:	4b10      	ldr	r3, [pc, #64]	; (800024c <HD44780_Init+0xfc>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f8bc 	bl	8000390 <SendCommand>
  DelayUS(4500);
 8000218:	f241 1094 	movw	r0, #4500	; 0x1194
 800021c:	f000 f968 	bl	80004f0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000220:	490b      	ldr	r1, [pc, #44]	; (8000250 <HD44780_Init+0x100>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f876 	bl	8000314 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <HD44780_Init+0x104>)
 800022a:	2001      	movs	r0, #1
 800022c:	f000 f872 	bl	8000314 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000230:	f000 f81d 	bl	800026e <HD44780_Home>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000003f 	.word	0x2000003f
 8000240:	20000040 	.word	0x20000040
 8000244:	2000003c 	.word	0x2000003c
 8000248:	2000003d 	.word	0x2000003d
 800024c:	2000003e 	.word	0x2000003e
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <HD44780_Clear>:

void HD44780_Clear()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800025c:	2001      	movs	r0, #1
 800025e:	f000 f897 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000266:	f000 f943 	bl	80004f0 <DelayUS>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}

0800026e <HD44780_Home>:

void HD44780_Home()
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f88c 	bl	8000390 <SendCommand>
  DelayUS(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 f938 	bl	80004f0 <DelayUS>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b087      	sub	sp, #28
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HD44780_SetCursor+0x5c>)
 8000296:	f107 0408 	add.w	r4, r7, #8
 800029a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800029c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	79ba      	ldrb	r2, [r7, #6]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d303      	bcc.n	80002b2 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HD44780_SetCursor+0x60>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	3318      	adds	r3, #24
 80002b8:	443b      	add	r3, r7
 80002ba:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f85d 	bl	8000390 <SendCommand>
}
 80002d6:	bf00      	nop
 80002d8:	371c      	adds	r7, #28
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd90      	pop	{r4, r7, pc}
 80002de:	bf00      	nop
 80002e0:	08004a48 	.word	0x08004a48
 80002e4:	2000003f 	.word	0x2000003f

080002e8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <HD44780_Display+0x28>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <HD44780_Display+0x28>)
 80002f8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HD44780_Display+0x28>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f843 	bl	8000390 <SendCommand>
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000003d 	.word	0x2000003d

08000314 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	b25b      	sxtb	r3, r3
 800032e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000332:	b25b      	sxtb	r3, r3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f82a 	bl	8000390 <SendCommand>
  for (int i=0; i<8; i++)
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	e009      	b.n	8000356 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	683a      	ldr	r2, [r7, #0]
 8000346:	4413      	add	r3, r2
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	4618      	mov	r0, r3
 800034c:	f000 f82e 	bl	80003ac <SendChar>
  for (int i=0; i<8; i++)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b07      	cmp	r3, #7
 800035a:	ddf2      	ble.n	8000342 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800036e:	e006      	b.n	800037e <HD44780_PrintStr+0x18>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1c5a      	adds	r2, r3, #1
 8000374:	607a      	str	r2, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f817 	bl	80003ac <SendChar>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f4      	bne.n	8000370 <HD44780_PrintStr+0xa>
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f812 	bl	80003c8 <Send>
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <SendChar>:

static void SendChar(uint8_t ch)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f804 	bl	80003c8 <Send>
}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}

080003c8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	f023 030f 	bic.w	r3, r3, #15
 80003de:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80003e6:	7bfa      	ldrb	r2, [r7, #15]
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f80b 	bl	800040a <Write4Bits>
  Write4Bits((lownib)|mode);
 80003f4:	7bba      	ldrb	r2, [r7, #14]
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4618      	mov	r0, r3
 80003fe:	f000 f804 	bl	800040a <Write4Bits>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f808 	bl	800042c <ExpanderWrite>
  PulseEnable(value);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f820 	bl	8000464 <PulseEnable>
}
 8000424:	bf00      	nop
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000436:	4b09      	ldr	r3, [pc, #36]	; (800045c <ExpanderWrite+0x30>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4313      	orrs	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000442:	f107 020f 	add.w	r2, r7, #15
 8000446:	230a      	movs	r3, #10
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	2170      	movs	r1, #112	; 0x70
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <ExpanderWrite+0x34>)
 8000450:	f000 fed0 	bl	80011f4 <HAL_I2C_Master_Transmit>
}
 8000454:	bf00      	nop
 8000456:	3710      	adds	r7, #16
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000040 	.word	0x20000040
 8000460:	20000044 	.word	0x20000044

08000464 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	b2db      	uxtb	r3, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffd8 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 800047c:	2014      	movs	r0, #20
 800047e:	f000 f837 	bl	80004f0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f023 0304 	bic.w	r3, r3, #4
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffce 	bl	800042c <ExpanderWrite>
  DelayUS(20);
 8000490:	2014      	movs	r0, #20
 8000492:	f000 f82d 	bl	80004f0 <DelayUS>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <DelayInit>:

static void DelayInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <DelayInit+0x48>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <DelayInit+0x48>)
 80004aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004ae:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <DelayInit+0x48>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <DelayInit+0x48>)
 80004b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ba:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <DelayInit+0x4c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <DelayInit+0x4c>)
 80004c2:	f023 0301 	bic.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <DelayInit+0x4c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <DelayInit+0x4c>)
 80004ce:	f043 0301 	orr.w	r3, r3, #1
 80004d2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <DelayInit+0x4c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80004da:	bf00      	nop
  __ASM volatile ("NOP");
 80004dc:	bf00      	nop
  __ASM volatile ("NOP");
 80004de:	bf00      	nop
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	e000edf0 	.word	0xe000edf0
 80004ec:	e0001000 	.word	0xe0001000

080004f0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <DelayUS+0x40>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <DelayUS+0x44>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9a      	lsrs	r2, r3, #18
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DelayUS+0x48>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <DelayUS+0x48>)
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d8f6      	bhi.n	8000512 <DelayUS+0x22>
}
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000010 	.word	0x20000010
 8000534:	431bde83 	.word	0x431bde83
 8000538:	e0001000 	.word	0xe0001000

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 f9f6 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f826 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f88e 	bl	8000668 <MX_GPIO_Init>
  MX_I2C1_Init();
 800054c:	f000 f85e 	bl	800060c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HD44780_Init(2);
 8000550:	2002      	movs	r0, #2
 8000552:	f7ff fdfd 	bl	8000150 <HD44780_Init>
    HD44780_Clear();
 8000556:	f7ff fe7f 	bl	8000258 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fe91 	bl	8000284 <HD44780_SetCursor>
    HD44780_PrintStr("BTN don't push");
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x48>)
 8000564:	f7ff feff 	bl	8000366 <HD44780_PrintStr>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f001 fd50 	bl	800200c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <main+0x4c>)
 800056e:	2100      	movs	r1, #0
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <main+0x50>)
 8000572:	f001 fdb1 	bl	80020d8 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <main+0x54>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f001 fd78 	bl	8002070 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x44>
 8000582:	bf00      	nop
 8000584:	08004a64 	.word	0x08004a64
 8000588:	08004aac 	.word	0x08004aac
 800058c:	08000705 	.word	0x08000705
 8000590:	20000098 	.word	0x20000098

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b090      	sub	sp, #64	; 0x40
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	2228      	movs	r2, #40	; 0x28
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 fa3c 	bl	8004a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2310      	movs	r3, #16
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f918 	bl	8001800 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005d6:	f000 f8df 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fb86 	bl	8001d04 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005fe:	f000 f8cb 	bl	8000798 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3740      	adds	r7, #64	; 0x40
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_I2C1_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <MX_I2C1_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_I2C1_Init+0x50>)
 8000618:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_I2C1_Init+0x58>)
 800061a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_I2C1_Init+0x50>)
 800062a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_I2C1_Init+0x50>)
 800064a:	f000 fc8f 	bl	8000f6c <HAL_I2C_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000654:	f000 f8a0 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000044 	.word	0x20000044
 8000660:	40005400 	.word	0x40005400
 8000664:	000186a0 	.word	0x000186a0

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_GPIO_Init+0x90>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <MX_GPIO_Init+0x90>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_GPIO_Init+0x90>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0310 	and.w	r3, r3, #16
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_GPIO_Init+0x90>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_GPIO_Init+0x90>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_GPIO_Init+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b2:	4812      	ldr	r0, [pc, #72]	; (80006fc <MX_GPIO_Init+0x94>)
 80006b4:	f000 fc41 	bl	8000f3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2302      	movs	r3, #2
 80006c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	4619      	mov	r1, r3
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <MX_GPIO_Init+0x94>)
 80006d2:	f000 fa97 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_GPIO_Init+0x98>)
 80006ec:	f000 fa8a 	bl	8000c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40011000 	.word	0x40011000
 8000700:	40010c00 	.word	0x40010c00

08000704 <StartDefaultTask>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void StartDefaultTask(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    uint8_t previous_button_state = GPIO_PIN_SET;
 800070c:	2301      	movs	r3, #1
 800070e:	73bb      	strb	r3, [r7, #14]
    uint8_t inte = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	73fb      	strb	r3, [r7, #15]

    for(;;)
    {
        uint8_t current_button_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000718:	481b      	ldr	r0, [pc, #108]	; (8000788 <StartDefaultTask+0x84>)
 800071a:	f000 fbf7 	bl	8000f0c <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	737b      	strb	r3, [r7, #13]

        if(current_button_state == GPIO_PIN_RESET) // кнопка нажата
 8000722:	7b7b      	ldrb	r3, [r7, #13]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d114      	bne.n	8000752 <StartDefaultTask+0x4e>
        {
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // Включить светодиод
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	4817      	ldr	r0, [pc, #92]	; (800078c <StartDefaultTask+0x88>)
 8000730:	f000 fc03 	bl	8000f3a <HAL_GPIO_WritePin>
            if(inte == 0) // если состояние изменилось
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d11f      	bne.n	800077a <StartDefaultTask+0x76>
            {
                HD44780_Clear();
 800073a:	f7ff fd8d 	bl	8000258 <HD44780_Clear>
                HD44780_SetCursor(0,0);
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff fd9f 	bl	8000284 <HD44780_SetCursor>
                HD44780_PrintStr("BTN has push");
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <StartDefaultTask+0x8c>)
 8000748:	f7ff fe0d 	bl	8000366 <HD44780_PrintStr>
                inte = 1;
 800074c:	2301      	movs	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]
 8000750:	e013      	b.n	800077a <StartDefaultTask+0x76>
            }
        }
        else // кнопка отпущена
        {
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Выключить светодиод
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <StartDefaultTask+0x88>)
 800075a:	f000 fbee 	bl	8000f3a <HAL_GPIO_WritePin>
            if(inte == 1) // если состояние изменилось
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d10a      	bne.n	800077a <StartDefaultTask+0x76>
            {
                HD44780_Clear();
 8000764:	f7ff fd78 	bl	8000258 <HD44780_Clear>
                HD44780_SetCursor(0,0);
 8000768:	2100      	movs	r1, #0
 800076a:	2000      	movs	r0, #0
 800076c:	f7ff fd8a 	bl	8000284 <HD44780_SetCursor>
                HD44780_PrintStr("BTN don't push");
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <StartDefaultTask+0x90>)
 8000772:	f7ff fdf8 	bl	8000366 <HD44780_PrintStr>
                inte = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	73fb      	strb	r3, [r7, #15]
            }
        }

        previous_button_state = current_button_state;
 800077a:	7b7b      	ldrb	r3, [r7, #13]
 800077c:	73bb      	strb	r3, [r7, #14]
        osDelay(10); // опрос каждые 10 мс
 800077e:	200a      	movs	r0, #10
 8000780:	f001 fd54 	bl	800222c <osDelay>
    {
 8000784:	e7c6      	b.n	8000714 <StartDefaultTask+0x10>
 8000786:	bf00      	nop
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40011000 	.word	0x40011000
 8000790:	08004a74 	.word	0x08004a74
 8000794:	08004a64 	.word	0x08004a64

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_MspInit+0x4c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6193      	str	r3, [r2, #24]
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <HAL_MspInit+0x4c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <HAL_MspInit+0x4c>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	210f      	movs	r1, #15
 80007de:	f06f 0001 	mvn.w	r0, #1
 80007e2:	f000 f9e6 	bl	8000bb2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <HAL_I2C_MspInit+0x90>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d132      	bne.n	800087a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <HAL_I2C_MspInit+0x94>)
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800082c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000832:	2312      	movs	r3, #18
 8000834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4812      	ldr	r0, [pc, #72]	; (800088c <HAL_I2C_MspInit+0x98>)
 8000842:	f000 f9df 	bl	8000c04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_I2C_MspInit+0x9c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <HAL_I2C_MspInit+0x9c>)
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086c:	61d3      	str	r3, [r2, #28]
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_I2C_MspInit+0x94>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40005400 	.word	0x40005400
 8000888:	40021000 	.word	0x40021000
 800088c:	40010c00 	.word	0x40010c00
 8000890:	40010000 	.word	0x40010000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f87b 	bl	80009bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008c6:	f003 f8bd 	bl	8003a44 <xTaskGetSchedulerState>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d001      	beq.n	80008d4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008d0:	f003 fe1a 	bl	8004508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800090a:	f7ff ffe5 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090e:	f004 f855 	bl	80049bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fe13 	bl	800053c <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000920:	08004af0 	.word	0x08004af0
  ldr r2, =_sbss
 8000924:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000928:	200019e8 	.word	0x200019e8

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 f92b 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f000 f808 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff ff2a 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f935 	bl	8000bea <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f000 f90b 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000010 	.word	0x20000010
 80009b4:	20000018 	.word	0x20000018
 80009b8:	20000014 	.word	0x20000014

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a03      	ldr	r2, [pc, #12]	; (80009dc <HAL_IncTick+0x20>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000018 	.word	0x20000018
 80009dc:	2000009c 	.word	0x2000009c

080009e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	; (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	2000009c 	.word	0x2000009c

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff fff0 	bl	80009e0 <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_Delay+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ffe0 	bl	80009e0 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000018 	.word	0x20000018

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	; 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff90 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff49 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff5e 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff90 	bl	8000af4 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5f 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb0 	bl	8000b58 <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b08b      	sub	sp, #44	; 0x2c
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e169      	b.n	8000eec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 8158 	bne.w	8000ee6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a9a      	ldr	r2, [pc, #616]	; (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d05e      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c40:	4a98      	ldr	r2, [pc, #608]	; (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d875      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c46:	4a98      	ldr	r2, [pc, #608]	; (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d058      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c4c:	4a96      	ldr	r2, [pc, #600]	; (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d86f      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c52:	4a96      	ldr	r2, [pc, #600]	; (8000eac <HAL_GPIO_Init+0x2a8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d052      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c58:	4a94      	ldr	r2, [pc, #592]	; (8000eac <HAL_GPIO_Init+0x2a8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d869      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c5e:	4a94      	ldr	r2, [pc, #592]	; (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d04c      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c64:	4a92      	ldr	r2, [pc, #584]	; (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d863      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c6a:	4a92      	ldr	r2, [pc, #584]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d046      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c70:	4a90      	ldr	r2, [pc, #576]	; (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d85d      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d82a      	bhi.n	8000cd0 <HAL_GPIO_Init+0xcc>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d859      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c7e:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <HAL_GPIO_Init+0x80>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000cff 	.word	0x08000cff
 8000c88:	08000cd9 	.word	0x08000cd9
 8000c8c:	08000ceb 	.word	0x08000ceb
 8000c90:	08000d2d 	.word	0x08000d2d
 8000c94:	08000d33 	.word	0x08000d33
 8000c98:	08000d33 	.word	0x08000d33
 8000c9c:	08000d33 	.word	0x08000d33
 8000ca0:	08000d33 	.word	0x08000d33
 8000ca4:	08000d33 	.word	0x08000d33
 8000ca8:	08000d33 	.word	0x08000d33
 8000cac:	08000d33 	.word	0x08000d33
 8000cb0:	08000d33 	.word	0x08000d33
 8000cb4:	08000d33 	.word	0x08000d33
 8000cb8:	08000d33 	.word	0x08000d33
 8000cbc:	08000d33 	.word	0x08000d33
 8000cc0:	08000d33 	.word	0x08000d33
 8000cc4:	08000d33 	.word	0x08000d33
 8000cc8:	08000ce1 	.word	0x08000ce1
 8000ccc:	08000cf5 	.word	0x08000cf5
 8000cd0:	4a79      	ldr	r2, [pc, #484]	; (8000eb8 <HAL_GPIO_Init+0x2b4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cd6:	e02c      	b.n	8000d32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e029      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e024      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	3308      	adds	r3, #8
 8000cf0:	623b      	str	r3, [r7, #32]
          break;
 8000cf2:	e01f      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e01a      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d06:	2304      	movs	r3, #4
 8000d08:	623b      	str	r3, [r7, #32]
          break;
 8000d0a:	e013      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d105      	bne.n	8000d20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d14:	2308      	movs	r3, #8
 8000d16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	611a      	str	r2, [r3, #16]
          break;
 8000d1e:	e009      	b.n	8000d34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d20:	2308      	movs	r3, #8
 8000d22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	615a      	str	r2, [r3, #20]
          break;
 8000d2a:	e003      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          break;
 8000d32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d801      	bhi.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	e001      	b.n	8000d42 <HAL_GPIO_Init+0x13e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3304      	adds	r3, #4
 8000d42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2bff      	cmp	r3, #255	; 0xff
 8000d48:	d802      	bhi.n	8000d50 <HAL_GPIO_Init+0x14c>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x152>
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	3b08      	subs	r3, #8
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	401a      	ands	r2, r3
 8000d68:	6a39      	ldr	r1, [r7, #32]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	431a      	orrs	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 80b1 	beq.w	8000ee6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d84:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b4a      	ldr	r3, [pc, #296]	; (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d9c:	4a48      	ldr	r2, [pc, #288]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x1ec>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3f      	ldr	r2, [pc, #252]	; (8000ec8 <HAL_GPIO_Init+0x2c4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x1e8>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ecc <HAL_GPIO_Init+0x2c8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x1e4>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a3d      	ldr	r2, [pc, #244]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x1e0>
 8000de0:	2303      	movs	r3, #3
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000de4:	2304      	movs	r3, #4
 8000de6:	e004      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000df0:	2300      	movs	r3, #0
 8000df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df4:	f002 0203 	and.w	r2, r2, #3
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	4093      	lsls	r3, r2
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e02:	492f      	ldr	r1, [pc, #188]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	492c      	ldr	r1, [pc, #176]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	600b      	str	r3, [r1, #0]
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4928      	ldr	r1, [pc, #160]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4922      	ldr	r1, [pc, #136]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	604b      	str	r3, [r1, #4]
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	491e      	ldr	r1, [pc, #120]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	4918      	ldr	r1, [pc, #96]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	608b      	str	r3, [r1, #8]
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d021      	beq.n	8000ed8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	60cb      	str	r3, [r1, #12]
 8000ea0:	e021      	b.n	8000ee6 <HAL_GPIO_Init+0x2e2>
 8000ea2:	bf00      	nop
 8000ea4:	10320000 	.word	0x10320000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	10220000 	.word	0x10220000
 8000eb0:	10210000 	.word	0x10210000
 8000eb4:	10120000 	.word	0x10120000
 8000eb8:	10110000 	.word	0x10110000
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	40011400 	.word	0x40011400
 8000ed4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4909      	ldr	r1, [pc, #36]	; (8000f08 <HAL_GPIO_Init+0x304>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f47f ae8e 	bne.w	8000c18 <HAL_GPIO_Init+0x14>
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	372c      	adds	r7, #44	; 0x2c
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d002      	beq.n	8000f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e001      	b.n	8000f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	460b      	mov	r3, r1
 8000f44:	807b      	strh	r3, [r7, #2]
 8000f46:	4613      	mov	r3, r2
 8000f48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4a:	787b      	ldrb	r3, [r7, #1]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f50:	887a      	ldrh	r2, [r7, #2]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f56:	e003      	b.n	8000f60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	041a      	lsls	r2, r3, #16
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	611a      	str	r2, [r3, #16]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
	...

08000f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e12b      	b.n	80011d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fc2e 	bl	80007f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2224      	movs	r2, #36	; 0x24
 8000f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 0201 	bic.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fd0:	f000 ffea 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8000fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a81      	ldr	r2, [pc, #516]	; (80011e0 <HAL_I2C_Init+0x274>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d807      	bhi.n	8000ff0 <HAL_I2C_Init+0x84>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4a80      	ldr	r2, [pc, #512]	; (80011e4 <HAL_I2C_Init+0x278>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	bf94      	ite	ls
 8000fe8:	2301      	movls	r3, #1
 8000fea:	2300      	movhi	r3, #0
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	e006      	b.n	8000ffe <HAL_I2C_Init+0x92>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a7d      	ldr	r2, [pc, #500]	; (80011e8 <HAL_I2C_Init+0x27c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	bf94      	ite	ls
 8000ff8:	2301      	movls	r3, #1
 8000ffa:	2300      	movhi	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e0e7      	b.n	80011d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4a78      	ldr	r2, [pc, #480]	; (80011ec <HAL_I2C_Init+0x280>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	0c9b      	lsrs	r3, r3, #18
 8001010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	430a      	orrs	r2, r1
 8001024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a6a      	ldr	r2, [pc, #424]	; (80011e0 <HAL_I2C_Init+0x274>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d802      	bhi.n	8001040 <HAL_I2C_Init+0xd4>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3301      	adds	r3, #1
 800103e:	e009      	b.n	8001054 <HAL_I2C_Init+0xe8>
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	4a69      	ldr	r2, [pc, #420]	; (80011f0 <HAL_I2C_Init+0x284>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	099b      	lsrs	r3, r3, #6
 8001052:	3301      	adds	r3, #1
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	430b      	orrs	r3, r1
 800105a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	495c      	ldr	r1, [pc, #368]	; (80011e0 <HAL_I2C_Init+0x274>)
 8001070:	428b      	cmp	r3, r1
 8001072:	d819      	bhi.n	80010a8 <HAL_I2C_Init+0x13c>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1e59      	subs	r1, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001082:	1c59      	adds	r1, r3, #1
 8001084:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001088:	400b      	ands	r3, r1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00a      	beq.n	80010a4 <HAL_I2C_Init+0x138>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1e59      	subs	r1, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fbb1 f3f3 	udiv	r3, r1, r3
 800109c:	3301      	adds	r3, #1
 800109e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a2:	e051      	b.n	8001148 <HAL_I2C_Init+0x1dc>
 80010a4:	2304      	movs	r3, #4
 80010a6:	e04f      	b.n	8001148 <HAL_I2C_Init+0x1dc>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d111      	bne.n	80010d4 <HAL_I2C_Init+0x168>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	1e58      	subs	r0, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6859      	ldr	r1, [r3, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	440b      	add	r3, r1
 80010be:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	bf0c      	ite	eq
 80010cc:	2301      	moveq	r3, #1
 80010ce:	2300      	movne	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	e012      	b.n	80010fa <HAL_I2C_Init+0x18e>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	1e58      	subs	r0, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	0099      	lsls	r1, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80010ea:	3301      	adds	r3, #1
 80010ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf0c      	ite	eq
 80010f4:	2301      	moveq	r3, #1
 80010f6:	2300      	movne	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_I2C_Init+0x196>
 80010fe:	2301      	movs	r3, #1
 8001100:	e022      	b.n	8001148 <HAL_I2C_Init+0x1dc>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10e      	bne.n	8001128 <HAL_I2C_Init+0x1bc>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1e58      	subs	r0, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6859      	ldr	r1, [r3, #4]
 8001112:	460b      	mov	r3, r1
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	440b      	add	r3, r1
 8001118:	fbb0 f3f3 	udiv	r3, r0, r3
 800111c:	3301      	adds	r3, #1
 800111e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001126:	e00f      	b.n	8001148 <HAL_I2C_Init+0x1dc>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1e58      	subs	r0, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6859      	ldr	r1, [r3, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	0099      	lsls	r1, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	fbb0 f3f3 	udiv	r3, r0, r3
 800113e:	3301      	adds	r3, #1
 8001140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	6809      	ldr	r1, [r1, #0]
 800114c:	4313      	orrs	r3, r2
 800114e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69da      	ldr	r2, [r3, #28]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6911      	ldr	r1, [r2, #16]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68d2      	ldr	r2, [r2, #12]
 8001182:	4311      	orrs	r1, r2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	430b      	orrs	r3, r1
 800118a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0201 	orr.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2220      	movs	r2, #32
 80011c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	000186a0 	.word	0x000186a0
 80011e4:	001e847f 	.word	0x001e847f
 80011e8:	003d08ff 	.word	0x003d08ff
 80011ec:	431bde83 	.word	0x431bde83
 80011f0:	10624dd3 	.word	0x10624dd3

080011f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	461a      	mov	r2, r3
 8001200:	460b      	mov	r3, r1
 8001202:	817b      	strh	r3, [r7, #10]
 8001204:	4613      	mov	r3, r2
 8001206:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff fbea 	bl	80009e0 <HAL_GetTick>
 800120c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b20      	cmp	r3, #32
 8001218:	f040 80e0 	bne.w	80013dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2319      	movs	r3, #25
 8001222:	2201      	movs	r2, #1
 8001224:	4970      	ldr	r1, [pc, #448]	; (80013e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 f964 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001232:	2302      	movs	r3, #2
 8001234:	e0d3      	b.n	80013de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123c:	2b01      	cmp	r3, #1
 800123e:	d101      	bne.n	8001244 <HAL_I2C_Master_Transmit+0x50>
 8001240:	2302      	movs	r3, #2
 8001242:	e0cc      	b.n	80013de <HAL_I2C_Master_Transmit+0x1ea>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b01      	cmp	r3, #1
 8001258:	d007      	beq.n	800126a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0201 	orr.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001278:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2221      	movs	r2, #33	; 0x21
 800127e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2210      	movs	r2, #16
 8001286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	893a      	ldrh	r2, [r7, #8]
 800129a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4a50      	ldr	r2, [pc, #320]	; (80013ec <HAL_I2C_Master_Transmit+0x1f8>)
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80012ac:	8979      	ldrh	r1, [r7, #10]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	6a3a      	ldr	r2, [r7, #32]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f89c 	bl	80013f0 <I2C_MasterRequestWrite>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e08d      	b.n	80013de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80012d8:	e066      	b.n	80013a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	6a39      	ldr	r1, [r7, #32]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f9de 	bl	80016a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00d      	beq.n	8001306 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d107      	bne.n	8001302 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e06b      	b.n	80013de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	781a      	ldrb	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001320:	b29b      	uxth	r3, r3
 8001322:	3b01      	subs	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132e:	3b01      	subs	r3, #1
 8001330:	b29a      	uxth	r2, r3
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b04      	cmp	r3, #4
 8001342:	d11b      	bne.n	800137c <HAL_I2C_Master_Transmit+0x188>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001348:	2b00      	cmp	r3, #0
 800134a:	d017      	beq.n	800137c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001366:	b29b      	uxth	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001374:	3b01      	subs	r3, #1
 8001376:	b29a      	uxth	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	6a39      	ldr	r1, [r7, #32]
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 f9ce 	bl	8001722 <I2C_WaitOnBTFFlagUntilTimeout>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00d      	beq.n	80013a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2b04      	cmp	r3, #4
 8001392:	d107      	bne.n	80013a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e01a      	b.n	80013de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d194      	bne.n	80012da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	e000      	b.n	80013de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80013dc:	2302      	movs	r3, #2
  }
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	00100002 	.word	0x00100002
 80013ec:	ffff0000 	.word	0xffff0000

080013f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	460b      	mov	r3, r1
 80013fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d006      	beq.n	800141a <I2C_MasterRequestWrite+0x2a>
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d003      	beq.n	800141a <I2C_MasterRequestWrite+0x2a>
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001418:	d108      	bne.n	800142c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e00b      	b.n	8001444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	2b12      	cmp	r3, #18
 8001432:	d107      	bne.n	8001444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 f84f 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00d      	beq.n	8001478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800146a:	d103      	bne.n	8001474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e035      	b.n	80014e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001480:	d108      	bne.n	8001494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001482:	897b      	ldrh	r3, [r7, #10]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001490:	611a      	str	r2, [r3, #16]
 8001492:	e01b      	b.n	80014cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	11db      	asrs	r3, r3, #7
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f003 0306 	and.w	r3, r3, #6
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f063 030f 	orn	r3, r3, #15
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	490e      	ldr	r1, [pc, #56]	; (80014ec <I2C_MasterRequestWrite+0xfc>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 f875 	bl	80015a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e010      	b.n	80014e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014c2:	897b      	ldrh	r3, [r7, #10]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4907      	ldr	r1, [pc, #28]	; (80014f0 <I2C_MasterRequestWrite+0x100>)
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f865 	bl	80015a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	00010008 	.word	0x00010008
 80014f0:	00010002 	.word	0x00010002

080014f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001504:	e025      	b.n	8001552 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d021      	beq.n	8001552 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800150e:	f7ff fa67 	bl	80009e0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d302      	bcc.n	8001524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d116      	bne.n	8001552 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2220      	movs	r2, #32
 800152e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f043 0220 	orr.w	r2, r3, #32
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e023      	b.n	800159a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	0c1b      	lsrs	r3, r3, #16
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d10d      	bne.n	8001578 <I2C_WaitOnFlagUntilTimeout+0x84>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4013      	ands	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	e00c      	b.n	8001592 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4013      	ands	r3, r2
 8001584:	b29b      	uxth	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	429a      	cmp	r2, r3
 8001596:	d0b6      	beq.n	8001506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015b0:	e051      	b.n	8001656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c0:	d123      	bne.n	800160a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f043 0204 	orr.w	r2, r3, #4
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e046      	b.n	8001698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	d021      	beq.n	8001656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001612:	f7ff f9e5 	bl	80009e0 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	d302      	bcc.n	8001628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d116      	bne.n	8001656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2220      	movs	r2, #32
 8001632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f043 0220 	orr.w	r2, r3, #32
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e020      	b.n	8001698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	0c1b      	lsrs	r3, r3, #16
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10c      	bne.n	800167a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4013      	ands	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	e00b      	b.n	8001692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	43da      	mvns	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4013      	ands	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d18d      	bne.n	80015b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016ac:	e02d      	b.n	800170a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f000 f878 	bl	80017a4 <I2C_IsAcknowledgeFailed>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e02d      	b.n	800171a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c4:	d021      	beq.n	800170a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c6:	f7ff f98b 	bl	80009e0 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d302      	bcc.n	80016dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d116      	bne.n	800170a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f043 0220 	orr.w	r2, r3, #32
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e007      	b.n	800171a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001714:	2b80      	cmp	r3, #128	; 0x80
 8001716:	d1ca      	bne.n	80016ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800172e:	e02d      	b.n	800178c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f837 	bl	80017a4 <I2C_IsAcknowledgeFailed>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e02d      	b.n	800179c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d021      	beq.n	800178c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001748:	f7ff f94a 	bl	80009e0 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	429a      	cmp	r2, r3
 8001756:	d302      	bcc.n	800175e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2220      	movs	r2, #32
 8001768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f043 0220 	orr.w	r2, r3, #32
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e007      	b.n	800179c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d1ca      	bne.n	8001730 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ba:	d11b      	bne.n	80017f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f043 0204 	orr.w	r2, r3, #4
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e272      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8087 	beq.w	800192e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001820:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d00c      	beq.n	8001846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800182c:	4b8f      	ldr	r3, [pc, #572]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d112      	bne.n	800185e <HAL_RCC_OscConfig+0x5e>
 8001838:	4b8c      	ldr	r3, [pc, #560]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d10b      	bne.n	800185e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d06c      	beq.n	800192c <HAL_RCC_OscConfig+0x12c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d168      	bne.n	800192c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e24c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x76>
 8001868:	4b80      	ldr	r3, [pc, #512]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a7f      	ldr	r2, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e02e      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x98>
 800187e:	4b7b      	ldr	r3, [pc, #492]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7a      	ldr	r2, [pc, #488]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b78      	ldr	r3, [pc, #480]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a77      	ldr	r2, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0xbc>
 80018a2:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a71      	ldr	r2, [pc, #452]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b6f      	ldr	r3, [pc, #444]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6e      	ldr	r2, [pc, #440]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 80018bc:	4b6b      	ldr	r3, [pc, #428]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6a      	ldr	r2, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b68      	ldr	r3, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a67      	ldr	r2, [pc, #412]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff f880 	bl	80009e0 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff f87c 	bl	80009e0 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e200      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0xe4>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff f86c 	bl	80009e0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f868 	bl	80009e0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1ec      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	4b53      	ldr	r3, [pc, #332]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x10c>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001946:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x18c>
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d116      	bne.n	800198c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e1c0      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4939      	ldr	r1, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	e03a      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f821 	bl	80009e0 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff f81d 	bl	80009e0 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1a1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4927      	ldr	r1, [pc, #156]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff f800 	bl	80009e0 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7fe fffc 	bl	80009e0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e180      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d03a      	beq.n	8001a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d019      	beq.n	8001a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7fe ffe0 	bl	80009e0 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7fe ffdc 	bl	80009e0 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e160      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f000 fac4 	bl	8001fd0 <RCC_Delay>
 8001a48:	e01c      	b.n	8001a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7fe ffc6 	bl	80009e0 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a56:	e00f      	b.n	8001a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7fe ffc2 	bl	80009e0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d908      	bls.n	8001a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e146      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	42420000 	.word	0x42420000
 8001a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b92      	ldr	r3, [pc, #584]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e9      	bne.n	8001a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a6 	beq.w	8001bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10d      	bne.n	8001abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a87      	ldr	r2, [pc, #540]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7e      	ldr	r2, [pc, #504]	; (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7fe ff83 	bl	80009e0 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7fe ff7f 	bl	80009e0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	; 0x64
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e103      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b75      	ldr	r3, [pc, #468]	; (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x312>
 8001b04:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	e02d      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x334>
 8001b1a:	4b6a      	ldr	r3, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a69      	ldr	r2, [pc, #420]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a66      	ldr	r2, [pc, #408]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	6213      	str	r3, [r2, #32]
 8001b32:	e01c      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x356>
 8001b3c:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a5a      	ldr	r2, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a57      	ldr	r2, [pc, #348]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7fe ff33 	bl	80009e0 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7fe ff2f 	bl	80009e0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0b1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ee      	beq.n	8001b7e <HAL_RCC_OscConfig+0x37e>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7fe ff1d 	bl	80009e0 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe ff19 	bl	80009e0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e09b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a3b      	ldr	r2, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8087 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d061      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d146      	bne.n	8001c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7fe feed 	bl	80009e0 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7fe fee9 	bl	80009e0 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e06d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4921      	ldr	r1, [pc, #132]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a19      	ldr	r1, [r3, #32]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	430b      	orrs	r3, r1
 8001c56:	491b      	ldr	r1, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe febd 	bl	80009e0 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7fe feb9 	bl	80009e0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e03d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x46a>
 8001c88:	e035      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe fea6 	bl	80009e0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe fea2 	bl	80009e0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e026      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x498>
 8001cb6:	e01e      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e019      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x500>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d0      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4965      	ldr	r1, [pc, #404]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b63      	ldr	r3, [pc, #396]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b8      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494d      	ldr	r1, [pc, #308]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d040      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e073      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06b      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4936      	ldr	r1, [pc, #216]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df4:	f7fe fdf4 	bl	80009e0 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7fe fdf0 	bl	80009e0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e053      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d210      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4922      	ldr	r1, [pc, #136]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4916      	ldr	r1, [pc, #88]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f821 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490a      	ldr	r1, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fd52 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08004ad0 	.word	0x08004ad0
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	20000014 	.word	0x20000014

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b490      	push	{r4, r7}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ee0:	1d3c      	adds	r4, r7, #4
 8001ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ee8:	f240 2301 	movw	r3, #513	; 0x201
 8001eec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f02:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d002      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x40>
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x46>
 8001f16:	e02b      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f1a:	623b      	str	r3, [r7, #32]
      break;
 8001f1c:	e02b      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3328      	adds	r3, #40	; 0x28
 8001f28:	443b      	add	r3, r7
 8001f2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d012      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	0c5b      	lsrs	r3, r3, #17
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	3328      	adds	r3, #40	; 0x28
 8001f46:	443b      	add	r3, r7
 8001f48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f52:	fb03 f202 	mul.w	r2, r3, r2
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	e004      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	623b      	str	r3, [r7, #32]
      break;
 8001f6e:	e002      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f72:	623b      	str	r3, [r7, #32]
      break;
 8001f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f76:	6a3b      	ldr	r3, [r7, #32]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc90      	pop	{r4, r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	08004a84 	.word	0x08004a84
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	007a1200 	.word	0x007a1200
 8001f90:	003d0900 	.word	0x003d0900

08001f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000010 	.word	0x20000010

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fac:	f7ff fff2 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4903      	ldr	r1, [pc, #12]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08004ae0 	.word	0x08004ae0

08001fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <RCC_Delay+0x34>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <RCC_Delay+0x38>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a5b      	lsrs	r3, r3, #9
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fec:	bf00      	nop
  }
  while (Delay --);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	60fa      	str	r2, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f9      	bne.n	8001fec <RCC_Delay+0x1c>
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000010 	.word	0x20000010
 8002008:	10624dd3 	.word	0x10624dd3

0800200c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002012:	f3ef 8305 	mrs	r3, IPSR
 8002016:	60bb      	str	r3, [r7, #8]
  return(result);
 8002018:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10f      	bne.n	800203e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800201e:	f3ef 8310 	mrs	r3, PRIMASK
 8002022:	607b      	str	r3, [r7, #4]
  return(result);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <osKernelInitialize+0x32>
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <osKernelInitialize+0x60>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d109      	bne.n	8002046 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002032:	f3ef 8311 	mrs	r3, BASEPRI
 8002036:	603b      	str	r3, [r7, #0]
  return(result);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800203e:	f06f 0305 	mvn.w	r3, #5
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e00c      	b.n	8002060 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <osKernelInitialize+0x60>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <osKernelInitialize+0x60>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e002      	b.n	8002060 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002060:	68fb      	ldr	r3, [r7, #12]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	200000a0 	.word	0x200000a0

08002070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002076:	f3ef 8305 	mrs	r3, IPSR
 800207a:	60bb      	str	r3, [r7, #8]
  return(result);
 800207c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002082:	f3ef 8310 	mrs	r3, PRIMASK
 8002086:	607b      	str	r3, [r7, #4]
  return(result);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <osKernelStart+0x32>
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <osKernelStart+0x64>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d109      	bne.n	80020aa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002096:	f3ef 8311 	mrs	r3, BASEPRI
 800209a:	603b      	str	r3, [r7, #0]
  return(result);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80020a2:	f06f 0305 	mvn.w	r3, #5
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e00e      	b.n	80020c8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <osKernelStart+0x64>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <osKernelStart+0x64>)
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80020b8:	f001 f878 	bl	80031ac <vTaskStartScheduler>
      stat = osOK;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e002      	b.n	80020c8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
 80020c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200000a0 	.word	0x200000a0

080020d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b092      	sub	sp, #72	; 0x48
 80020dc:	af04      	add	r7, sp, #16
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020e8:	f3ef 8305 	mrs	r3, IPSR
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 8094 	bne.w	800221e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f6:	f3ef 8310 	mrs	r3, PRIMASK
 80020fa:	623b      	str	r3, [r7, #32]
  return(result);
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 808d 	bne.w	800221e <osThreadNew+0x146>
 8002104:	4b48      	ldr	r3, [pc, #288]	; (8002228 <osThreadNew+0x150>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d106      	bne.n	800211a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800210c:	f3ef 8311 	mrs	r3, BASEPRI
 8002110:	61fb      	str	r3, [r7, #28]
  return(result);
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 8082 	bne.w	800221e <osThreadNew+0x146>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d07e      	beq.n	800221e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002124:	2318      	movs	r3, #24
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002128:	2300      	movs	r3, #0
 800212a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800212c:	f107 031b 	add.w	r3, r7, #27
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d045      	beq.n	80021ca <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <osThreadNew+0x74>
        name = attr->name;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <osThreadNew+0x9a>
 8002160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002162:	2b38      	cmp	r3, #56	; 0x38
 8002164:	d805      	bhi.n	8002172 <osThreadNew+0x9a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <osThreadNew+0x9e>
        return (NULL);
 8002172:	2300      	movs	r3, #0
 8002174:	e054      	b.n	8002220 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00e      	beq.n	80021ac <osThreadNew+0xd4>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b5b      	cmp	r3, #91	; 0x5b
 8002194:	d90a      	bls.n	80021ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <osThreadNew+0xd4>
        mem = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021aa:	e010      	b.n	80021ce <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10c      	bne.n	80021ce <osThreadNew+0xf6>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d108      	bne.n	80021ce <osThreadNew+0xf6>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d104      	bne.n	80021ce <osThreadNew+0xf6>
          mem = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c8:	e001      	b.n	80021ce <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80021ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d110      	bne.n	80021f6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80021dc:	9202      	str	r2, [sp, #8]
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fe12 	bl	8002e14 <xTaskCreateStatic>
 80021f0:	4603      	mov	r3, r0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e013      	b.n	800221e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d110      	bne.n	800221e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	b29a      	uxth	r2, r3
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fe5c 	bl	8002ecc <xTaskCreate>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <osThreadNew+0x146>
          hTask = NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800221e:	697b      	ldr	r3, [r7, #20]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3738      	adds	r7, #56	; 0x38
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200000a0 	.word	0x200000a0

0800222c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002234:	f3ef 8305 	mrs	r3, IPSR
 8002238:	613b      	str	r3, [r7, #16]
  return(result);
 800223a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002240:	f3ef 8310 	mrs	r3, PRIMASK
 8002244:	60fb      	str	r3, [r7, #12]
  return(result);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <osDelay+0x34>
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <osDelay+0x58>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d109      	bne.n	8002268 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002254:	f3ef 8311 	mrs	r3, BASEPRI
 8002258:	60bb      	str	r3, [r7, #8]
  return(result);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <osDelay+0x3c>
    stat = osErrorISR;
 8002260:	f06f 0305 	mvn.w	r3, #5
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e007      	b.n	8002278 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 ff66 	bl	8003144 <vTaskDelay>
    }
  }

  return (stat);
 8002278:	697b      	ldr	r3, [r7, #20]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200000a0 	.word	0x200000a0

08002288 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4a06      	ldr	r2, [pc, #24]	; (80022b0 <vApplicationGetIdleTaskMemory+0x28>)
 8002298:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800229e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	601a      	str	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	200000a4 	.word	0x200000a4
 80022b4:	20000100 	.word	0x20000100

080022b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80022c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <vApplicationGetTimerTaskMemory+0x30>)
 80022ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000300 	.word	0x20000300
 80022e8:	2000035c 	.word	0x2000035c

080022ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0208 	add.w	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f103 0208 	add.w	r2, r3, #8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f103 0208 	add.w	r2, r3, #8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d103      	bne.n	80023a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	e00c      	b.n	80023c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3308      	adds	r3, #8
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e002      	b.n	80023b6 <vListInsert+0x2e>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d2f6      	bcs.n	80023b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6892      	ldr	r2, [r2, #8]
 800240e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6852      	ldr	r2, [r2, #4]
 8002418:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	d103      	bne.n	800242c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1e5a      	subs	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002476:	f001 ffc9 	bl	800440c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	441a      	add	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	3b01      	subs	r3, #1
 80024a8:	68f9      	ldr	r1, [r7, #12]
 80024aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	441a      	add	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	22ff      	movs	r2, #255	; 0xff
 80024ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	22ff      	movs	r2, #255	; 0xff
 80024c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d114      	bne.n	80024f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01a      	beq.n	800250a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3310      	adds	r3, #16
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 f8f1 	bl	80036c0 <xTaskRemoveFromEventList>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d012      	beq.n	800250a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <xQueueGenericReset+0xcc>)
 80024e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	e009      	b.n	800250a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3310      	adds	r3, #16
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fef6 	bl	80022ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	3324      	adds	r3, #36	; 0x24
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fef1 	bl	80022ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800250a:	f001 ffaf 	bl	800446c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	e000ed04 	.word	0xe000ed04

0800251c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08e      	sub	sp, #56	; 0x38
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002542:	bf00      	nop
 8002544:	e7fe      	b.n	8002544 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <xQueueGenericCreateStatic+0x52>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <xQueueGenericCreateStatic+0x56>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <xQueueGenericCreateStatic+0x58>
 8002572:	2300      	movs	r3, #0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	623b      	str	r3, [r7, #32]
}
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <xQueueGenericCreateStatic+0x7e>
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <xQueueGenericCreateStatic+0x82>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <xQueueGenericCreateStatic+0x84>
 800259e:	2300      	movs	r3, #0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	61fb      	str	r3, [r7, #28]
}
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80025ba:	2350      	movs	r3, #80	; 0x50
 80025bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b50      	cmp	r3, #80	; 0x50
 80025c2:	d00a      	beq.n	80025da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80025c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c8:	f383 8811 	msr	BASEPRI, r3
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	61bb      	str	r3, [r7, #24]
}
 80025d6:	bf00      	nop
 80025d8:	e7fe      	b.n	80025d8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f805 	bl	800260a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002602:	4618      	mov	r0, r3
 8002604:	3730      	adds	r7, #48	; 0x30
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e002      	b.n	800262c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002638:	2101      	movs	r1, #1
 800263a:	69b8      	ldr	r0, [r7, #24]
 800263c:	f7ff ff06 	bl	800244c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08e      	sub	sp, #56	; 0x38
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <xQueueGenericSend+0x32>
	__asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <xQueueGenericSend+0x40>
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <xQueueGenericSend+0x44>
 8002690:	2301      	movs	r3, #1
 8002692:	e000      	b.n	8002696 <xQueueGenericSend+0x46>
 8002694:	2300      	movs	r3, #0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10a      	bne.n	80026b0 <xQueueGenericSend+0x60>
	__asm volatile
 800269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269e:	f383 8811 	msr	BASEPRI, r3
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026ac:	bf00      	nop
 80026ae:	e7fe      	b.n	80026ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d103      	bne.n	80026be <xQueueGenericSend+0x6e>
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <xQueueGenericSend+0x72>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <xQueueGenericSend+0x74>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10a      	bne.n	80026de <xQueueGenericSend+0x8e>
	__asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	623b      	str	r3, [r7, #32]
}
 80026da:	bf00      	nop
 80026dc:	e7fe      	b.n	80026dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026de:	f001 f9b1 	bl	8003a44 <xTaskGetSchedulerState>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d102      	bne.n	80026ee <xQueueGenericSend+0x9e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <xQueueGenericSend+0xa2>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <xQueueGenericSend+0xa4>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <xQueueGenericSend+0xbe>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	61fb      	str	r3, [r7, #28]
}
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800270e:	f001 fe7d 	bl	800440c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <xQueueGenericSend+0xd4>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d129      	bne.n	8002778 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800272a:	f000 fa07 	bl	8002b3c <prvCopyDataToQueue>
 800272e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	2b00      	cmp	r3, #0
 8002736:	d010      	beq.n	800275a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	3324      	adds	r3, #36	; 0x24
 800273c:	4618      	mov	r0, r3
 800273e:	f000 ffbf 	bl	80036c0 <xTaskRemoveFromEventList>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d013      	beq.n	8002770 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <xQueueGenericSend+0x1f8>)
 800274a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	e00a      	b.n	8002770 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800275a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <xQueueGenericSend+0x1f8>)
 8002762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002770:	f001 fe7c 	bl	800446c <vPortExitCritical>
				return pdPASS;
 8002774:	2301      	movs	r3, #1
 8002776:	e063      	b.n	8002840 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800277e:	f001 fe75 	bl	800446c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002782:	2300      	movs	r3, #0
 8002784:	e05c      	b.n	8002840 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	2b00      	cmp	r3, #0
 800278a:	d106      	bne.n	800279a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fff9 	bl	8003788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002796:	2301      	movs	r3, #1
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800279a:	f001 fe67 	bl	800446c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800279e:	f000 fd6b 	bl	8003278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027a2:	f001 fe33 	bl	800440c <vPortEnterCritical>
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ac:	b25b      	sxtb	r3, r3
 80027ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b2:	d103      	bne.n	80027bc <xQueueGenericSend+0x16c>
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d103      	bne.n	80027d2 <xQueueGenericSend+0x182>
 80027ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d2:	f001 fe4b 	bl	800446c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d6:	1d3a      	adds	r2, r7, #4
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 ffe8 	bl	80037b4 <xTaskCheckForTimeOut>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d124      	bne.n	8002834 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ec:	f000 fa9e 	bl	8002d2c <prvIsQueueFull>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d018      	beq.n	8002828 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	3310      	adds	r3, #16
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 ff0e 	bl	8003620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002806:	f000 fa29 	bl	8002c5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800280a:	f000 fd43 	bl	8003294 <xTaskResumeAll>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f47f af7c 	bne.w	800270e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <xQueueGenericSend+0x1f8>)
 8002818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	e772      	b.n	800270e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800282a:	f000 fa17 	bl	8002c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800282e:	f000 fd31 	bl	8003294 <xTaskResumeAll>
 8002832:	e76c      	b.n	800270e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002836:	f000 fa11 	bl	8002c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800283a:	f000 fd2b 	bl	8003294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800283e:	2300      	movs	r3, #0
		}
	}
}
 8002840:	4618      	mov	r0, r3
 8002842:	3738      	adds	r7, #56	; 0x38
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08e      	sub	sp, #56	; 0x38
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002876:	bf00      	nop
 8002878:	e7fe      	b.n	8002878 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d103      	bne.n	8002888 <xQueueGenericSendFromISR+0x3c>
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <xQueueGenericSendFromISR+0x40>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <xQueueGenericSendFromISR+0x42>
 800288c:	2300      	movs	r3, #0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	623b      	str	r3, [r7, #32]
}
 80028a4:	bf00      	nop
 80028a6:	e7fe      	b.n	80028a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d103      	bne.n	80028b6 <xQueueGenericSendFromISR+0x6a>
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <xQueueGenericSendFromISR+0x6e>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <xQueueGenericSendFromISR+0x70>
 80028ba:	2300      	movs	r3, #0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	61fb      	str	r3, [r7, #28]
}
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028d6:	f001 fe5b 	bl	8004590 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80028da:	f3ef 8211 	mrs	r2, BASEPRI
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	61ba      	str	r2, [r7, #24]
 80028f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <xQueueGenericSendFromISR+0xbc>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d12c      	bne.n	8002962 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800290e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002918:	f000 f910 	bl	8002b3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800291c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d112      	bne.n	800294c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b00      	cmp	r3, #0
 800292c:	d016      	beq.n	800295c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	3324      	adds	r3, #36	; 0x24
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fec4 	bl	80036c0 <xTaskRemoveFromEventList>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00e      	beq.n	800295c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00b      	beq.n	800295c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e007      	b.n	800295c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800294c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002950:	3301      	adds	r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	b25a      	sxtb	r2, r3
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800295c:	2301      	movs	r3, #1
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002960:	e001      	b.n	8002966 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002962:	2300      	movs	r3, #0
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002970:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002974:	4618      	mov	r0, r3
 8002976:	3738      	adds	r7, #56	; 0x38
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10a      	bne.n	80029ac <xQueueReceive+0x30>
	__asm volatile
 8002996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299a:	f383 8811 	msr	BASEPRI, r3
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f3bf 8f4f 	dsb	sy
 80029a6:	623b      	str	r3, [r7, #32]
}
 80029a8:	bf00      	nop
 80029aa:	e7fe      	b.n	80029aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <xQueueReceive+0x3e>
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <xQueueReceive+0x42>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <xQueueReceive+0x44>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <xQueueReceive+0x5e>
	__asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	61fb      	str	r3, [r7, #28]
}
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029da:	f001 f833 	bl	8003a44 <xTaskGetSchedulerState>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <xQueueReceive+0x6e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <xQueueReceive+0x72>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <xQueueReceive+0x74>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueReceive+0x8e>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	61bb      	str	r3, [r7, #24]
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a0a:	f001 fcff 	bl	800440c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01f      	beq.n	8002a5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a1e:	f000 f8f7 	bl	8002c10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1e5a      	subs	r2, r3, #1
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00f      	beq.n	8002a52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	3310      	adds	r3, #16
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fe42 	bl	80036c0 <xTaskRemoveFromEventList>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <xQueueReceive+0x1bc>)
 8002a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a52:	f001 fd0b 	bl	800446c <vPortExitCritical>
				return pdPASS;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e069      	b.n	8002b2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a60:	f001 fd04 	bl	800446c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e062      	b.n	8002b2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fe88 	bl	8003788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a7c:	f001 fcf6 	bl	800446c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a80:	f000 fbfa 	bl	8003278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a84:	f001 fcc2 	bl	800440c <vPortEnterCritical>
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d103      	bne.n	8002a9e <xQueueReceive+0x122>
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d103      	bne.n	8002ab4 <xQueueReceive+0x138>
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab4:	f001 fcda 	bl	800446c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ab8:	1d3a      	adds	r2, r7, #4
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fe77 	bl	80037b4 <xTaskCheckForTimeOut>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d123      	bne.n	8002b14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ace:	f000 f917 	bl	8002d00 <prvIsQueueEmpty>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	3324      	adds	r3, #36	; 0x24
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fd9d 	bl	8003620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ae8:	f000 f8b8 	bl	8002c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002aec:	f000 fbd2 	bl	8003294 <xTaskResumeAll>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d189      	bne.n	8002a0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <xQueueReceive+0x1bc>)
 8002af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	e780      	b.n	8002a0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b0a:	f000 f8a7 	bl	8002c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b0e:	f000 fbc1 	bl	8003294 <xTaskResumeAll>
 8002b12:	e77a      	b.n	8002a0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b16:	f000 f8a1 	bl	8002c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b1a:	f000 fbbb 	bl	8003294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b20:	f000 f8ee 	bl	8002d00 <prvIsQueueEmpty>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f43f af6f 	beq.w	8002a0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3730      	adds	r7, #48	; 0x30
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000ed04 	.word	0xe000ed04

08002b3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10d      	bne.n	8002b76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d14d      	bne.n	8002bfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 ff8a 	bl	8003a80 <xTaskPriorityDisinherit>
 8002b6c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	e043      	b.n	8002bfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d119      	bne.n	8002bb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6898      	ldr	r0, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	461a      	mov	r2, r3
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	f001 ff3c 	bl	8004a04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	441a      	add	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d32b      	bcc.n	8002bfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	e026      	b.n	8002bfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68d8      	ldr	r0, [r3, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	f001 ff22 	bl	8004a04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	425b      	negs	r3, r3
 8002bca:	441a      	add	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d207      	bcs.n	8002bec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	425b      	negs	r3, r3
 8002be6:	441a      	add	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d105      	bne.n	8002bfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c06:	697b      	ldr	r3, [r7, #20]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d018      	beq.n	8002c54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	441a      	add	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d303      	bcc.n	8002c44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	f001 fed8 	bl	8004a04 <memcpy>
	}
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c64:	f001 fbd2 	bl	800440c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c70:	e011      	b.n	8002c96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d012      	beq.n	8002ca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3324      	adds	r3, #36	; 0x24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fd1e 	bl	80036c0 <xTaskRemoveFromEventList>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c8a:	f000 fdf5 	bl	8003878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	dce9      	bgt.n	8002c72 <prvUnlockQueue+0x16>
 8002c9e:	e000      	b.n	8002ca2 <prvUnlockQueue+0x46>
					break;
 8002ca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002caa:	f001 fbdf 	bl	800446c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cae:	f001 fbad 	bl	800440c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cba:	e011      	b.n	8002ce0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fcf9 	bl	80036c0 <xTaskRemoveFromEventList>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002cd4:	f000 fdd0 	bl	8003878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002cd8:	7bbb      	ldrb	r3, [r7, #14]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	dce9      	bgt.n	8002cbc <prvUnlockQueue+0x60>
 8002ce8:	e000      	b.n	8002cec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	22ff      	movs	r2, #255	; 0xff
 8002cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002cf4:	f001 fbba 	bl	800446c <vPortExitCritical>
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d08:	f001 fb80 	bl	800440c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d14:	2301      	movs	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e001      	b.n	8002d1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d1e:	f001 fba5 	bl	800446c <vPortExitCritical>

	return xReturn;
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d34:	f001 fb6a 	bl	800440c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d102      	bne.n	8002d4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d44:	2301      	movs	r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	e001      	b.n	8002d4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d4e:	f001 fb8d 	bl	800446c <vPortExitCritical>

	return xReturn;
 8002d52:	68fb      	ldr	r3, [r7, #12]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e014      	b.n	8002d96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d6c:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <vQueueAddToRegistry+0x4c>)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10b      	bne.n	8002d90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d78:	490b      	ldr	r1, [pc, #44]	; (8002da8 <vQueueAddToRegistry+0x4c>)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <vQueueAddToRegistry+0x4c>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d8e:	e006      	b.n	8002d9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3301      	adds	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	d9e7      	bls.n	8002d6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	2000075c 	.word	0x2000075c

08002dac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002dbc:	f001 fb26 	bl	800440c <vPortEnterCritical>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc6:	b25b      	sxtb	r3, r3
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d103      	bne.n	8002dd6 <vQueueWaitForMessageRestricted+0x2a>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ddc:	b25b      	sxtb	r3, r3
 8002dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de2:	d103      	bne.n	8002dec <vQueueWaitForMessageRestricted+0x40>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dec:	f001 fb3e 	bl	800446c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	3324      	adds	r3, #36	; 0x24
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fc31 	bl	8003668 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ff28 	bl	8002c5c <prvUnlockQueue>
	}
 8002e0c:	bf00      	nop
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08e      	sub	sp, #56	; 0x38
 8002e18:	af04      	add	r7, sp, #16
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	623b      	str	r3, [r7, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <xTaskCreateStatic+0x46>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	61fb      	str	r3, [r7, #28]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e5a:	235c      	movs	r3, #92	; 0x5c
 8002e5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b5c      	cmp	r3, #92	; 0x5c
 8002e62:	d00a      	beq.n	8002e7a <xTaskCreateStatic+0x66>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	61bb      	str	r3, [r7, #24]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01e      	beq.n	8002ebe <xTaskCreateStatic+0xaa>
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01b      	beq.n	8002ebe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9303      	str	r3, [sp, #12]
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	9302      	str	r3, [sp, #8]
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f850 	bl	8002f56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eb8:	f000 f8d4 	bl	8003064 <prvAddNewTaskToReadyList>
 8002ebc:	e001      	b.n	8002ec2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ec2:	697b      	ldr	r3, [r7, #20]
	}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3728      	adds	r7, #40	; 0x28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08c      	sub	sp, #48	; 0x30
 8002ed0:	af04      	add	r7, sp, #16
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 fb93 	bl	800460c <pvPortMalloc>
 8002ee6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00e      	beq.n	8002f0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002eee:	205c      	movs	r0, #92	; 0x5c
 8002ef0:	f001 fb8c 	bl	800460c <pvPortMalloc>
 8002ef4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
 8002f02:	e005      	b.n	8002f10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f04:	6978      	ldr	r0, [r7, #20]
 8002f06:	f001 fc45 	bl	8004794 <vPortFree>
 8002f0a:	e001      	b.n	8002f10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d017      	beq.n	8002f46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	2300      	movs	r3, #0
 8002f22:	9303      	str	r3, [sp, #12]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f80e 	bl	8002f56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f3a:	69f8      	ldr	r0, [r7, #28]
 8002f3c:	f000 f892 	bl	8003064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f40:	2301      	movs	r3, #1
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	e002      	b.n	8002f4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
	}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b088      	sub	sp, #32
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	21a5      	movs	r1, #165	; 0xa5
 8002f70:	f001 fd56 	bl	8004a20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f023 0307 	bic.w	r3, r3, #7
 8002f8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	617b      	str	r3, [r7, #20]
}
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	e012      	b.n	8002fda <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	7819      	ldrb	r1, [r3, #0]
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3334      	adds	r3, #52	; 0x34
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b0f      	cmp	r3, #15
 8002fde:	d9e9      	bls.n	8002fb4 <prvInitialiseNewTask+0x5e>
 8002fe0:	e000      	b.n	8002fe4 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002fe2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	2b37      	cmp	r3, #55	; 0x37
 8002ff0:	d901      	bls.n	8002ff6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ff2:	2337      	movs	r3, #55	; 0x37
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ffa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003000:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	2200      	movs	r2, #0
 8003006:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	3304      	adds	r3, #4
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff f98c 	bl	800232a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	3318      	adds	r3, #24
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f987 	bl	800232a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003020:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800302c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003030:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	2200      	movs	r2, #0
 8003036:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	69b8      	ldr	r0, [r7, #24]
 8003046:	f001 f8ef 	bl	8004228 <pxPortInitialiseStack>
 800304a:	4602      	mov	r2, r0
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800305c:	bf00      	nop
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800306c:	f001 f9ce 	bl	800440c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003070:	4b2d      	ldr	r3, [pc, #180]	; (8003128 <prvAddNewTaskToReadyList+0xc4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <prvAddNewTaskToReadyList+0xc4>)
 8003078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800307a:	4b2c      	ldr	r3, [pc, #176]	; (800312c <prvAddNewTaskToReadyList+0xc8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003082:	4a2a      	ldr	r2, [pc, #168]	; (800312c <prvAddNewTaskToReadyList+0xc8>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <prvAddNewTaskToReadyList+0xc4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d110      	bne.n	80030b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003090:	f000 fc16 	bl	80038c0 <prvInitialiseTaskLists>
 8003094:	e00d      	b.n	80030b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003096:	4b26      	ldr	r3, [pc, #152]	; (8003130 <prvAddNewTaskToReadyList+0xcc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800309e:	4b23      	ldr	r3, [pc, #140]	; (800312c <prvAddNewTaskToReadyList+0xc8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d802      	bhi.n	80030b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030ac:	4a1f      	ldr	r2, [pc, #124]	; (800312c <prvAddNewTaskToReadyList+0xc8>)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <prvAddNewTaskToReadyList+0xd0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <prvAddNewTaskToReadyList+0xd0>)
 80030ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <prvAddNewTaskToReadyList+0xd0>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <prvAddNewTaskToReadyList+0xd4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d903      	bls.n	80030d8 <prvAddNewTaskToReadyList+0x74>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4a18      	ldr	r2, [pc, #96]	; (8003138 <prvAddNewTaskToReadyList+0xd4>)
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4a15      	ldr	r2, [pc, #84]	; (800313c <prvAddNewTaskToReadyList+0xd8>)
 80030e6:	441a      	add	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7ff f927 	bl	8002342 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030f4:	f001 f9ba 	bl	800446c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030f8:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <prvAddNewTaskToReadyList+0xcc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <prvAddNewTaskToReadyList+0xc8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	429a      	cmp	r2, r3
 800310c:	d207      	bcs.n	800311e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <prvAddNewTaskToReadyList+0xdc>)
 8003110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000c70 	.word	0x20000c70
 800312c:	2000079c 	.word	0x2000079c
 8003130:	20000c7c 	.word	0x20000c7c
 8003134:	20000c8c 	.word	0x20000c8c
 8003138:	20000c78 	.word	0x20000c78
 800313c:	200007a0 	.word	0x200007a0
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d017      	beq.n	8003186 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <vTaskDelay+0x60>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <vTaskDelay+0x30>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	60bb      	str	r3, [r7, #8]
}
 8003170:	bf00      	nop
 8003172:	e7fe      	b.n	8003172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003174:	f000 f880 	bl	8003278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003178:	2100      	movs	r1, #0
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fcee 	bl	8003b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003180:	f000 f888 	bl	8003294 <xTaskResumeAll>
 8003184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <vTaskDelay+0x64>)
 800318e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000c98 	.word	0x20000c98
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031ba:	463a      	mov	r2, r7
 80031bc:	1d39      	adds	r1, r7, #4
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f860 	bl	8002288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031c8:	6839      	ldr	r1, [r7, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	9202      	str	r2, [sp, #8]
 80031d0:	9301      	str	r3, [sp, #4]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2300      	movs	r3, #0
 80031d8:	460a      	mov	r2, r1
 80031da:	4921      	ldr	r1, [pc, #132]	; (8003260 <vTaskStartScheduler+0xb4>)
 80031dc:	4821      	ldr	r0, [pc, #132]	; (8003264 <vTaskStartScheduler+0xb8>)
 80031de:	f7ff fe19 	bl	8002e14 <xTaskCreateStatic>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a20      	ldr	r2, [pc, #128]	; (8003268 <vTaskStartScheduler+0xbc>)
 80031e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031e8:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <vTaskStartScheduler+0xbc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031f0:	2301      	movs	r3, #1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e001      	b.n	80031fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d102      	bne.n	8003206 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003200:	f000 fd00 	bl	8003c04 <xTimerCreateTimerTask>
 8003204:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d116      	bne.n	800323a <vTaskStartScheduler+0x8e>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	613b      	str	r3, [r7, #16]
}
 800321e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003220:	4b12      	ldr	r3, [pc, #72]	; (800326c <vTaskStartScheduler+0xc0>)
 8003222:	f04f 32ff 	mov.w	r2, #4294967295
 8003226:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <vTaskStartScheduler+0xc4>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <vTaskStartScheduler+0xc8>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003234:	f001 f878 	bl	8004328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003238:	e00e      	b.n	8003258 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d10a      	bne.n	8003258 <vTaskStartScheduler+0xac>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	60fb      	str	r3, [r7, #12]
}
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <vTaskStartScheduler+0xaa>
}
 8003258:	bf00      	nop
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	08004a94 	.word	0x08004a94
 8003264:	08003891 	.word	0x08003891
 8003268:	20000c94 	.word	0x20000c94
 800326c:	20000c90 	.word	0x20000c90
 8003270:	20000c7c 	.word	0x20000c7c
 8003274:	20000c74 	.word	0x20000c74

08003278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800327c:	4b04      	ldr	r3, [pc, #16]	; (8003290 <vTaskSuspendAll+0x18>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3301      	adds	r3, #1
 8003282:	4a03      	ldr	r2, [pc, #12]	; (8003290 <vTaskSuspendAll+0x18>)
 8003284:	6013      	str	r3, [r2, #0]
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20000c98 	.word	0x20000c98

08003294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032a2:	4b42      	ldr	r3, [pc, #264]	; (80033ac <xTaskResumeAll+0x118>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80032aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ae:	f383 8811 	msr	BASEPRI, r3
 80032b2:	f3bf 8f6f 	isb	sy
 80032b6:	f3bf 8f4f 	dsb	sy
 80032ba:	603b      	str	r3, [r7, #0]
}
 80032bc:	bf00      	nop
 80032be:	e7fe      	b.n	80032be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032c0:	f001 f8a4 	bl	800440c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032c4:	4b39      	ldr	r3, [pc, #228]	; (80033ac <xTaskResumeAll+0x118>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	4a38      	ldr	r2, [pc, #224]	; (80033ac <xTaskResumeAll+0x118>)
 80032cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <xTaskResumeAll+0x118>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d162      	bne.n	800339c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <xTaskResumeAll+0x11c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d05e      	beq.n	800339c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032de:	e02f      	b.n	8003340 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <xTaskResumeAll+0x120>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3318      	adds	r3, #24
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff f883 	bl	80023f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff f87e 	bl	80023f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <xTaskResumeAll+0x124>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d903      	bls.n	8003310 <xTaskResumeAll+0x7c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	4a2a      	ldr	r2, [pc, #168]	; (80033b8 <xTaskResumeAll+0x124>)
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4a27      	ldr	r2, [pc, #156]	; (80033bc <xTaskResumeAll+0x128>)
 800331e:	441a      	add	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7ff f80b 	bl	8002342 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <xTaskResumeAll+0x12c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <xTaskResumeAll+0x130>)
 800333c:	2201      	movs	r2, #1
 800333e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003340:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <xTaskResumeAll+0x120>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1cb      	bne.n	80032e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800334e:	f000 fb55 	bl	80039fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <xTaskResumeAll+0x134>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800335e:	f000 f845 	bl	80033ec <xTaskIncrementTick>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <xTaskResumeAll+0x130>)
 800336a:	2201      	movs	r2, #1
 800336c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3b01      	subs	r3, #1
 8003372:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f1      	bne.n	800335e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <xTaskResumeAll+0x134>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <xTaskResumeAll+0x130>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003388:	2301      	movs	r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800338c:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <xTaskResumeAll+0x138>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800339c:	f001 f866 	bl	800446c <vPortExitCritical>

	return xAlreadyYielded;
 80033a0:	68bb      	ldr	r3, [r7, #8]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000c98 	.word	0x20000c98
 80033b0:	20000c70 	.word	0x20000c70
 80033b4:	20000c30 	.word	0x20000c30
 80033b8:	20000c78 	.word	0x20000c78
 80033bc:	200007a0 	.word	0x200007a0
 80033c0:	2000079c 	.word	0x2000079c
 80033c4:	20000c84 	.word	0x20000c84
 80033c8:	20000c80 	.word	0x20000c80
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80033d6:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <xTaskGetTickCount+0x18>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80033dc:	687b      	ldr	r3, [r7, #4]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	20000c74 	.word	0x20000c74

080033ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033f6:	4b51      	ldr	r3, [pc, #324]	; (800353c <xTaskIncrementTick+0x150>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 808e 	bne.w	800351c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003400:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <xTaskIncrementTick+0x154>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003408:	4a4d      	ldr	r2, [pc, #308]	; (8003540 <xTaskIncrementTick+0x154>)
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d120      	bne.n	8003456 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003414:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <xTaskIncrementTick+0x158>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <xTaskIncrementTick+0x48>
	__asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	603b      	str	r3, [r7, #0]
}
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <xTaskIncrementTick+0x46>
 8003434:	4b43      	ldr	r3, [pc, #268]	; (8003544 <xTaskIncrementTick+0x158>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	4b43      	ldr	r3, [pc, #268]	; (8003548 <xTaskIncrementTick+0x15c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a41      	ldr	r2, [pc, #260]	; (8003544 <xTaskIncrementTick+0x158>)
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4a41      	ldr	r2, [pc, #260]	; (8003548 <xTaskIncrementTick+0x15c>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b40      	ldr	r3, [pc, #256]	; (800354c <xTaskIncrementTick+0x160>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	4a3f      	ldr	r2, [pc, #252]	; (800354c <xTaskIncrementTick+0x160>)
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	f000 fad3 	bl	80039fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003456:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <xTaskIncrementTick+0x164>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	429a      	cmp	r2, r3
 800345e:	d34e      	bcc.n	80034fe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003460:	4b38      	ldr	r3, [pc, #224]	; (8003544 <xTaskIncrementTick+0x158>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <xTaskIncrementTick+0x82>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <xTaskIncrementTick+0x84>
 800346e:	2300      	movs	r3, #0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003474:	4b36      	ldr	r3, [pc, #216]	; (8003550 <xTaskIncrementTick+0x164>)
 8003476:	f04f 32ff 	mov.w	r2, #4294967295
 800347a:	601a      	str	r2, [r3, #0]
					break;
 800347c:	e03f      	b.n	80034fe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <xTaskIncrementTick+0x158>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	429a      	cmp	r2, r3
 8003494:	d203      	bcs.n	800349e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003496:	4a2e      	ldr	r2, [pc, #184]	; (8003550 <xTaskIncrementTick+0x164>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6013      	str	r3, [r2, #0]
						break;
 800349c:	e02f      	b.n	80034fe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe ffa8 	bl	80023f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	3318      	adds	r3, #24
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fe ff9f 	bl	80023f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <xTaskIncrementTick+0x168>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d903      	bls.n	80034ce <xTaskIncrementTick+0xe2>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	4a22      	ldr	r2, [pc, #136]	; (8003554 <xTaskIncrementTick+0x168>)
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4a1f      	ldr	r2, [pc, #124]	; (8003558 <xTaskIncrementTick+0x16c>)
 80034dc:	441a      	add	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f7fe ff2c 	bl	8002342 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <xTaskIncrementTick+0x170>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d3b3      	bcc.n	8003460 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034fc:	e7b0      	b.n	8003460 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <xTaskIncrementTick+0x170>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	4914      	ldr	r1, [pc, #80]	; (8003558 <xTaskIncrementTick+0x16c>)
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d907      	bls.n	8003526 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003516:	2301      	movs	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e004      	b.n	8003526 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <xTaskIncrementTick+0x174>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	4a0f      	ldr	r2, [pc, #60]	; (8003560 <xTaskIncrementTick+0x174>)
 8003524:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <xTaskIncrementTick+0x178>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800352e:	2301      	movs	r3, #1
 8003530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003532:	697b      	ldr	r3, [r7, #20]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000c98 	.word	0x20000c98
 8003540:	20000c74 	.word	0x20000c74
 8003544:	20000c28 	.word	0x20000c28
 8003548:	20000c2c 	.word	0x20000c2c
 800354c:	20000c88 	.word	0x20000c88
 8003550:	20000c90 	.word	0x20000c90
 8003554:	20000c78 	.word	0x20000c78
 8003558:	200007a0 	.word	0x200007a0
 800355c:	2000079c 	.word	0x2000079c
 8003560:	20000c80 	.word	0x20000c80
 8003564:	20000c84 	.word	0x20000c84

08003568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800356e:	4b27      	ldr	r3, [pc, #156]	; (800360c <vTaskSwitchContext+0xa4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <vTaskSwitchContext+0xa8>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800357c:	e041      	b.n	8003602 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <vTaskSwitchContext+0xa8>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <vTaskSwitchContext+0xac>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	e010      	b.n	80035ae <vTaskSwitchContext+0x46>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	607b      	str	r3, [r7, #4]
}
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <vTaskSwitchContext+0x3e>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	491a      	ldr	r1, [pc, #104]	; (8003618 <vTaskSwitchContext+0xb0>)
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0e4      	beq.n	800358c <vTaskSwitchContext+0x24>
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4a12      	ldr	r2, [pc, #72]	; (8003618 <vTaskSwitchContext+0xb0>)
 80035ce:	4413      	add	r3, r2
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	3308      	adds	r3, #8
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d104      	bne.n	80035f2 <vTaskSwitchContext+0x8a>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a08      	ldr	r2, [pc, #32]	; (800361c <vTaskSwitchContext+0xb4>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4a05      	ldr	r2, [pc, #20]	; (8003614 <vTaskSwitchContext+0xac>)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6013      	str	r3, [r2, #0]
}
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	20000c98 	.word	0x20000c98
 8003610:	20000c84 	.word	0x20000c84
 8003614:	20000c78 	.word	0x20000c78
 8003618:	200007a0 	.word	0x200007a0
 800361c:	2000079c 	.word	0x2000079c

08003620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	60fb      	str	r3, [r7, #12]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <vTaskPlaceOnEventList+0x44>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3318      	adds	r3, #24
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fe fe9a 	bl	8002388 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003654:	2101      	movs	r1, #1
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f000 fa80 	bl	8003b5c <prvAddCurrentTaskToDelayedList>
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	2000079c 	.word	0x2000079c

08003668 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	617b      	str	r3, [r7, #20]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <vTaskPlaceOnEventListRestricted+0x54>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3318      	adds	r3, #24
 8003696:	4619      	mov	r1, r3
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7fe fe52 	bl	8002342 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
 80036a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	68b8      	ldr	r0, [r7, #8]
 80036ae:	f000 fa55 	bl	8003b5c <prvAddCurrentTaskToDelayedList>
	}
 80036b2:	bf00      	nop
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2000079c 	.word	0x2000079c

080036c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60fb      	str	r3, [r7, #12]
}
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3318      	adds	r3, #24
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fe81 	bl	80023f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <xTaskRemoveFromEventList+0xb0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11d      	bne.n	800373a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	3304      	adds	r3, #4
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fe78 	bl	80023f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <xTaskRemoveFromEventList+0xb4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d903      	bls.n	800371c <xTaskRemoveFromEventList+0x5c>
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4a16      	ldr	r2, [pc, #88]	; (8003774 <xTaskRemoveFromEventList+0xb4>)
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <xTaskRemoveFromEventList+0xb8>)
 800372a:	441a      	add	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	3304      	adds	r3, #4
 8003730:	4619      	mov	r1, r3
 8003732:	4610      	mov	r0, r2
 8003734:	f7fe fe05 	bl	8002342 <vListInsertEnd>
 8003738:	e005      	b.n	8003746 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	3318      	adds	r3, #24
 800373e:	4619      	mov	r1, r3
 8003740:	480e      	ldr	r0, [pc, #56]	; (800377c <xTaskRemoveFromEventList+0xbc>)
 8003742:	f7fe fdfe 	bl	8002342 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <xTaskRemoveFromEventList+0xc0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	429a      	cmp	r2, r3
 8003752:	d905      	bls.n	8003760 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003754:	2301      	movs	r3, #1
 8003756:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <xTaskRemoveFromEventList+0xc4>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e001      	b.n	8003764 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003764:	697b      	ldr	r3, [r7, #20]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000c98 	.word	0x20000c98
 8003774:	20000c78 	.word	0x20000c78
 8003778:	200007a0 	.word	0x200007a0
 800377c:	20000c30 	.word	0x20000c30
 8003780:	2000079c 	.word	0x2000079c
 8003784:	20000c84 	.word	0x20000c84

08003788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <vTaskInternalSetTimeOutState+0x24>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <vTaskInternalSetTimeOutState+0x28>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	605a      	str	r2, [r3, #4]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000c88 	.word	0x20000c88
 80037b0:	20000c74 	.word	0x20000c74

080037b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	613b      	str	r3, [r7, #16]
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	60fb      	str	r3, [r7, #12]
}
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80037f6:	f000 fe09 	bl	800440c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037fa:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <xTaskCheckForTimeOut+0xbc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003812:	d102      	bne.n	800381a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	e023      	b.n	8003862 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <xTaskCheckForTimeOut+0xc0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d007      	beq.n	8003836 <xTaskCheckForTimeOut+0x82>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003830:	2301      	movs	r3, #1
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	e015      	b.n	8003862 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	d20b      	bcs.n	8003858 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	1ad2      	subs	r2, r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff9b 	bl	8003788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	e004      	b.n	8003862 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003862:	f000 fe03 	bl	800446c <vPortExitCritical>

	return xReturn;
 8003866:	69fb      	ldr	r3, [r7, #28]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000c74 	.word	0x20000c74
 8003874:	20000c88 	.word	0x20000c88

08003878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <vTaskMissedYield+0x14>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]
}
 8003882:	bf00      	nop
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000c84 	.word	0x20000c84

08003890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003898:	f000 f852 	bl	8003940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <prvIdleTask+0x28>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d9f9      	bls.n	8003898 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <prvIdleTask+0x2c>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038b4:	e7f0      	b.n	8003898 <prvIdleTask+0x8>
 80038b6:	bf00      	nop
 80038b8:	200007a0 	.word	0x200007a0
 80038bc:	e000ed04 	.word	0xe000ed04

080038c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	e00c      	b.n	80038e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <prvInitialiseTaskLists+0x60>)
 80038d8:	4413      	add	r3, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fd06 	bl	80022ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3301      	adds	r3, #1
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b37      	cmp	r3, #55	; 0x37
 80038ea:	d9ef      	bls.n	80038cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <prvInitialiseTaskLists+0x64>)
 80038ee:	f7fe fcfd 	bl	80022ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038f2:	480d      	ldr	r0, [pc, #52]	; (8003928 <prvInitialiseTaskLists+0x68>)
 80038f4:	f7fe fcfa 	bl	80022ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038f8:	480c      	ldr	r0, [pc, #48]	; (800392c <prvInitialiseTaskLists+0x6c>)
 80038fa:	f7fe fcf7 	bl	80022ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038fe:	480c      	ldr	r0, [pc, #48]	; (8003930 <prvInitialiseTaskLists+0x70>)
 8003900:	f7fe fcf4 	bl	80022ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003904:	480b      	ldr	r0, [pc, #44]	; (8003934 <prvInitialiseTaskLists+0x74>)
 8003906:	f7fe fcf1 	bl	80022ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <prvInitialiseTaskLists+0x78>)
 800390c:	4a05      	ldr	r2, [pc, #20]	; (8003924 <prvInitialiseTaskLists+0x64>)
 800390e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <prvInitialiseTaskLists+0x7c>)
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <prvInitialiseTaskLists+0x68>)
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	200007a0 	.word	0x200007a0
 8003924:	20000c00 	.word	0x20000c00
 8003928:	20000c14 	.word	0x20000c14
 800392c:	20000c30 	.word	0x20000c30
 8003930:	20000c44 	.word	0x20000c44
 8003934:	20000c5c 	.word	0x20000c5c
 8003938:	20000c28 	.word	0x20000c28
 800393c:	20000c2c 	.word	0x20000c2c

08003940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003946:	e019      	b.n	800397c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003948:	f000 fd60 	bl	800440c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <prvCheckTasksWaitingTermination+0x50>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fd4d 	bl	80023f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800395e:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <prvCheckTasksWaitingTermination+0x54>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3b01      	subs	r3, #1
 8003964:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <prvCheckTasksWaitingTermination+0x54>)
 8003966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <prvCheckTasksWaitingTermination+0x58>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3b01      	subs	r3, #1
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <prvCheckTasksWaitingTermination+0x58>)
 8003970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003972:	f000 fd7b 	bl	800446c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f810 	bl	800399c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <prvCheckTasksWaitingTermination+0x58>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e1      	bne.n	8003948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000c44 	.word	0x20000c44
 8003994:	20000c70 	.word	0x20000c70
 8003998:	20000c58 	.word	0x20000c58

0800399c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 feee 	bl	8004794 <vPortFree>
				vPortFree( pxTCB );
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 feeb 	bl	8004794 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039be:	e018      	b.n	80039f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d103      	bne.n	80039d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fee2 	bl	8004794 <vPortFree>
	}
 80039d0:	e00f      	b.n	80039f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d00a      	beq.n	80039f2 <prvDeleteTCB+0x56>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	60fb      	str	r3, [r7, #12]
}
 80039ee:	bf00      	nop
 80039f0:	e7fe      	b.n	80039f0 <prvDeleteTCB+0x54>
	}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <prvResetNextTaskUnblockTime+0x40>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <prvResetNextTaskUnblockTime+0x14>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <prvResetNextTaskUnblockTime+0x16>
 8003a10:	2300      	movs	r3, #0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d004      	beq.n	8003a20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <prvResetNextTaskUnblockTime+0x44>)
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a1e:	e008      	b.n	8003a32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <prvResetNextTaskUnblockTime+0x40>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <prvResetNextTaskUnblockTime+0x44>)
 8003a30:	6013      	str	r3, [r2, #0]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	20000c28 	.word	0x20000c28
 8003a40:	20000c90 	.word	0x20000c90

08003a44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <xTaskGetSchedulerState+0x34>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a52:	2301      	movs	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	e008      	b.n	8003a6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <xTaskGetSchedulerState+0x38>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d102      	bne.n	8003a66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a60:	2302      	movs	r3, #2
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	e001      	b.n	8003a6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a6a:	687b      	ldr	r3, [r7, #4]
	}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000c7c 	.word	0x20000c7c
 8003a7c:	20000c98 	.word	0x20000c98

08003a80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d056      	beq.n	8003b44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a96:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <xTaskPriorityDisinherit+0xd0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d00a      	beq.n	8003ab6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	60fb      	str	r3, [r7, #12]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	60bb      	str	r3, [r7, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad8:	1e5a      	subs	r2, r3, #1
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d02c      	beq.n	8003b44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d128      	bne.n	8003b44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	3304      	adds	r3, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe fc7e 	bl	80023f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <xTaskPriorityDisinherit+0xd4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d903      	bls.n	8003b24 <xTaskPriorityDisinherit+0xa4>
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	4a0c      	ldr	r2, [pc, #48]	; (8003b54 <xTaskPriorityDisinherit+0xd4>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <xTaskPriorityDisinherit+0xd8>)
 8003b32:	441a      	add	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7fe fc01 	bl	8002342 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b44:	697b      	ldr	r3, [r7, #20]
	}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	2000079c 	.word	0x2000079c
 8003b54:	20000c78 	.word	0x20000c78
 8003b58:	200007a0 	.word	0x200007a0

08003b5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <prvAddCurrentTaskToDelayedList+0x90>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b6c:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe fc40 	bl	80023f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7e:	d10a      	bne.n	8003b96 <prvAddCurrentTaskToDelayedList+0x3a>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4819      	ldr	r0, [pc, #100]	; (8003bf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003b90:	f7fe fbd7 	bl	8002342 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b94:	e026      	b.n	8003be4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b9e:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d209      	bcs.n	8003bc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f7fe fbe4 	bl	8002388 <vListInsert>
}
 8003bc0:	e010      	b.n	8003be4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bc2:	4b0e      	ldr	r3, [pc, #56]	; (8003bfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f7fe fbda 	bl	8002388 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d202      	bcs.n	8003be4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003bde:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6013      	str	r3, [r2, #0]
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000c74 	.word	0x20000c74
 8003bf0:	2000079c 	.word	0x2000079c
 8003bf4:	20000c5c 	.word	0x20000c5c
 8003bf8:	20000c2c 	.word	0x20000c2c
 8003bfc:	20000c28 	.word	0x20000c28
 8003c00:	20000c90 	.word	0x20000c90

08003c04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c0e:	f000 facb 	bl	80041a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <xTimerCreateTimerTask+0x80>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d021      	beq.n	8003c5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c22:	1d3a      	adds	r2, r7, #4
 8003c24:	f107 0108 	add.w	r1, r7, #8
 8003c28:	f107 030c 	add.w	r3, r7, #12
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fb43 	bl	80022b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	9202      	str	r2, [sp, #8]
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	460a      	mov	r2, r1
 8003c44:	4910      	ldr	r1, [pc, #64]	; (8003c88 <xTimerCreateTimerTask+0x84>)
 8003c46:	4811      	ldr	r0, [pc, #68]	; (8003c8c <xTimerCreateTimerTask+0x88>)
 8003c48:	f7ff f8e4 	bl	8002e14 <xTaskCreateStatic>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <xTimerCreateTimerTask+0x8c>)
 8003c50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <xTimerCreateTimerTask+0x8c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	613b      	str	r3, [r7, #16]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c7a:	697b      	ldr	r3, [r7, #20]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000ccc 	.word	0x20000ccc
 8003c88:	08004a9c 	.word	0x08004a9c
 8003c8c:	08003db1 	.word	0x08003db1
 8003c90:	20000cd0 	.word	0x20000cd0

08003c94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	623b      	str	r3, [r7, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <xTimerGenericCommand+0x98>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02a      	beq.n	8003d20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	dc18      	bgt.n	8003d0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cdc:	f7ff feb2 	bl	8003a44 <xTaskGetSchedulerState>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d109      	bne.n	8003cfa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <xTimerGenericCommand+0x98>)
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	f107 0110 	add.w	r1, r7, #16
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf2:	f7fe fcad 	bl	8002650 <xQueueGenericSend>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24
 8003cf8:	e012      	b.n	8003d20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <xTimerGenericCommand+0x98>)
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f107 0110 	add.w	r1, r7, #16
 8003d02:	2300      	movs	r3, #0
 8003d04:	2200      	movs	r2, #0
 8003d06:	f7fe fca3 	bl	8002650 <xQueueGenericSend>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d0c:	e008      	b.n	8003d20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <xTimerGenericCommand+0x98>)
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f107 0110 	add.w	r1, r7, #16
 8003d16:	2300      	movs	r3, #0
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	f7fe fd97 	bl	800284c <xQueueGenericSendFromISR>
 8003d1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3728      	adds	r7, #40	; 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000ccc 	.word	0x20000ccc

08003d30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <prvProcessExpiredTimer+0x7c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe fb55 	bl	80023f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d122      	bne.n	8003d9c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	18d1      	adds	r1, r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	6978      	ldr	r0, [r7, #20]
 8003d64:	f000 f8c8 	bl	8003ef8 <prvInsertTimerInActiveList>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	2300      	movs	r3, #0
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	2100      	movs	r1, #0
 8003d78:	6978      	ldr	r0, [r7, #20]
 8003d7a:	f7ff ff8b 	bl	8003c94 <xTimerGenericCommand>
 8003d7e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	60fb      	str	r3, [r7, #12]
}
 8003d98:	bf00      	nop
 8003d9a:	e7fe      	b.n	8003d9a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	6978      	ldr	r0, [r7, #20]
 8003da2:	4798      	blx	r3
}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000cc4 	.word	0x20000cc4

08003db0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003db8:	f107 0308 	add.w	r3, r7, #8
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f857 	bl	8003e70 <prvGetNextExpireTime>
 8003dc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f803 	bl	8003dd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003dce:	f000 f8d5 	bl	8003f7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dd2:	e7f1      	b.n	8003db8 <prvTimerTask+0x8>

08003dd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003dde:	f7ff fa4b 	bl	8003278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f866 	bl	8003eb8 <prvSampleTimeNow>
 8003dec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d130      	bne.n	8003e56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <prvProcessTimerOrBlockTask+0x3c>
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d806      	bhi.n	8003e10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e02:	f7ff fa47 	bl	8003294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e06:	68f9      	ldr	r1, [r7, #12]
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff91 	bl	8003d30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e0e:	e024      	b.n	8003e5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e16:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <prvProcessTimerOrBlockTask+0x90>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <prvProcessTimerOrBlockTask+0x94>)
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	4619      	mov	r1, r3
 8003e36:	f7fe ffb9 	bl	8002dac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e3a:	f7ff fa2b 	bl	8003294 <xTaskResumeAll>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <prvProcessTimerOrBlockTask+0x98>)
 8003e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	f3bf 8f6f 	isb	sy
}
 8003e54:	e001      	b.n	8003e5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003e56:	f7ff fa1d 	bl	8003294 <xTaskResumeAll>
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000cc8 	.word	0x20000cc8
 8003e68:	20000ccc 	.word	0x20000ccc
 8003e6c:	e000ed04 	.word	0xe000ed04

08003e70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <prvGetNextExpireTime+0x44>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d105      	bne.n	8003ea2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e96:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <prvGetNextExpireTime+0x44>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e001      	b.n	8003ea6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000cc4 	.word	0x20000cc4

08003eb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ec0:	f7ff fa86 	bl	80033d0 <xTaskGetTickCount>
 8003ec4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <prvSampleTimeNow+0x3c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d205      	bcs.n	8003edc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003ed0:	f000 f908 	bl	80040e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e002      	b.n	8003ee2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003ee2:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <prvSampleTimeNow+0x3c>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000cd4 	.word	0x20000cd4

08003ef8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d812      	bhi.n	8003f44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e01b      	b.n	8003f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <prvInsertTimerInActiveList+0x7c>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7fe fa23 	bl	8002388 <vListInsert>
 8003f42:	e012      	b.n	8003f6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d206      	bcs.n	8003f5a <prvInsertTimerInActiveList+0x62>
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003f54:	2301      	movs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e007      	b.n	8003f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f5a:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <prvInsertTimerInActiveList+0x80>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f7fe fa0f 	bl	8002388 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003f6a:	697b      	ldr	r3, [r7, #20]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000cc8 	.word	0x20000cc8
 8003f78:	20000cc4 	.word	0x20000cc4

08003f7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08e      	sub	sp, #56	; 0x38
 8003f80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f82:	e09d      	b.n	80040c0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	da18      	bge.n	8003fbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f8a:	1d3b      	adds	r3, r7, #4
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	61fb      	str	r3, [r7, #28]
}
 8003fa8:	bf00      	nop
 8003faa:	e7fe      	b.n	8003faa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb2:	6850      	ldr	r0, [r2, #4]
 8003fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb6:	6892      	ldr	r2, [r2, #8]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db7d      	blt.n	80040be <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fa10 	bl	80023f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fd8:	463b      	mov	r3, r7
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ff6c 	bl	8003eb8 <prvSampleTimeNow>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b09      	cmp	r3, #9
 8003fe6:	d86b      	bhi.n	80040c0 <prvProcessReceivedCommands+0x144>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <prvProcessReceivedCommands+0x74>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004019 	.word	0x08004019
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004019 	.word	0x08004019
 8003ffc:	080040c1 	.word	0x080040c1
 8004000:	08004075 	.word	0x08004075
 8004004:	080040ad 	.word	0x080040ad
 8004008:	08004019 	.word	0x08004019
 800400c:	08004019 	.word	0x08004019
 8004010:	080040c1 	.word	0x080040c1
 8004014:	08004075 	.word	0x08004075
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	18d1      	adds	r1, r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004026:	f7ff ff67 	bl	8003ef8 <prvInsertTimerInActiveList>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d047      	beq.n	80040c0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004036:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d13f      	bne.n	80040c0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	441a      	add	r2, r3
 8004048:	2300      	movs	r3, #0
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2300      	movs	r3, #0
 800404e:	2100      	movs	r1, #0
 8004050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004052:	f7ff fe1f 	bl	8003c94 <xTimerGenericCommand>
 8004056:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d130      	bne.n	80040c0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	61bb      	str	r3, [r7, #24]
}
 8004070:	bf00      	nop
 8004072:	e7fe      	b.n	8004072 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	617b      	str	r3, [r7, #20]
}
 8004094:	bf00      	nop
 8004096:	e7fe      	b.n	8004096 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	18d1      	adds	r1, r2, r3
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a6:	f7ff ff27 	bl	8003ef8 <prvInsertTimerInActiveList>
					break;
 80040aa:	e009      	b.n	80040c0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80040b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040b8:	f000 fb6c 	bl	8004794 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80040bc:	e000      	b.n	80040c0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80040be:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <prvProcessReceivedCommands+0x164>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	1d39      	adds	r1, r7, #4
 80040c6:	2200      	movs	r2, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fc57 	bl	800297c <xQueueReceive>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f47f af57 	bne.w	8003f84 <prvProcessReceivedCommands+0x8>
	}
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	3730      	adds	r7, #48	; 0x30
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000ccc 	.word	0x20000ccc

080040e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ea:	e045      	b.n	8004178 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040ec:	4b2c      	ldr	r3, [pc, #176]	; (80041a0 <prvSwitchTimerLists+0xbc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040f6:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <prvSwitchTimerLists+0xbc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f7fe f977 	bl	80023f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d12e      	bne.n	8004178 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	429a      	cmp	r2, r3
 800412a:	d90e      	bls.n	800414a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <prvSwitchTimerLists+0xbc>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f7fe f920 	bl	8002388 <vListInsert>
 8004148:	e016      	b.n	8004178 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800414a:	2300      	movs	r3, #0
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	2300      	movs	r3, #0
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	2100      	movs	r1, #0
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7ff fd9d 	bl	8003c94 <xTimerGenericCommand>
 800415a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	603b      	str	r3, [r7, #0]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <prvSwitchTimerLists+0xbc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1b4      	bne.n	80040ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <prvSwitchTimerLists+0xbc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <prvSwitchTimerLists+0xc0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <prvSwitchTimerLists+0xbc>)
 800418e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <prvSwitchTimerLists+0xc0>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6013      	str	r3, [r2, #0]
}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000cc4 	.word	0x20000cc4
 80041a4:	20000cc8 	.word	0x20000cc8

080041a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041ae:	f000 f92d 	bl	800440c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <prvCheckForValidListAndQueue+0x60>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d120      	bne.n	80041fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041ba:	4814      	ldr	r0, [pc, #80]	; (800420c <prvCheckForValidListAndQueue+0x64>)
 80041bc:	f7fe f896 	bl	80022ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041c0:	4813      	ldr	r0, [pc, #76]	; (8004210 <prvCheckForValidListAndQueue+0x68>)
 80041c2:	f7fe f893 	bl	80022ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041c6:	4b13      	ldr	r3, [pc, #76]	; (8004214 <prvCheckForValidListAndQueue+0x6c>)
 80041c8:	4a10      	ldr	r2, [pc, #64]	; (800420c <prvCheckForValidListAndQueue+0x64>)
 80041ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041cc:	4b12      	ldr	r3, [pc, #72]	; (8004218 <prvCheckForValidListAndQueue+0x70>)
 80041ce:	4a10      	ldr	r2, [pc, #64]	; (8004210 <prvCheckForValidListAndQueue+0x68>)
 80041d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041d2:	2300      	movs	r3, #0
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <prvCheckForValidListAndQueue+0x74>)
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <prvCheckForValidListAndQueue+0x78>)
 80041da:	2110      	movs	r1, #16
 80041dc:	200a      	movs	r0, #10
 80041de:	f7fe f99d 	bl	800251c <xQueueGenericCreateStatic>
 80041e2:	4603      	mov	r3, r0
 80041e4:	4a08      	ldr	r2, [pc, #32]	; (8004208 <prvCheckForValidListAndQueue+0x60>)
 80041e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <prvCheckForValidListAndQueue+0x60>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <prvCheckForValidListAndQueue+0x60>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	490b      	ldr	r1, [pc, #44]	; (8004224 <prvCheckForValidListAndQueue+0x7c>)
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fdb0 	bl	8002d5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041fc:	f000 f936 	bl	800446c <vPortExitCritical>
}
 8004200:	bf00      	nop
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000ccc 	.word	0x20000ccc
 800420c:	20000c9c 	.word	0x20000c9c
 8004210:	20000cb0 	.word	0x20000cb0
 8004214:	20000cc4 	.word	0x20000cc4
 8004218:	20000cc8 	.word	0x20000cc8
 800421c:	20000d78 	.word	0x20000d78
 8004220:	20000cd8 	.word	0x20000cd8
 8004224:	08004aa4 	.word	0x08004aa4

08004228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3b04      	subs	r3, #4
 8004238:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b04      	subs	r3, #4
 8004246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f023 0201 	bic.w	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b04      	subs	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004258:	4a08      	ldr	r2, [pc, #32]	; (800427c <pxPortInitialiseStack+0x54>)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b14      	subs	r3, #20
 8004262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b20      	subs	r3, #32
 800426e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004270:	68fb      	ldr	r3, [r7, #12]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	08004281 	.word	0x08004281

08004280 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004286:	2300      	movs	r3, #0
 8004288:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800428a:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <prvTaskExitError+0x54>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d00a      	beq.n	80042aa <prvTaskExitError+0x2a>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <prvTaskExitError+0x28>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	60bb      	str	r3, [r7, #8]
}
 80042bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042be:	bf00      	nop
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0fc      	beq.n	80042c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000001c 	.word	0x2000001c
	...

080042e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <pxCurrentTCBConst2>)
 80042e2:	6819      	ldr	r1, [r3, #0]
 80042e4:	6808      	ldr	r0, [r1, #0]
 80042e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042ea:	f380 8809 	msr	PSP, r0
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f380 8811 	msr	BASEPRI, r0
 80042fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80042fe:	4770      	bx	lr

08004300 <pxCurrentTCBConst2>:
 8004300:	2000079c 	.word	0x2000079c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004304:	bf00      	nop
 8004306:	bf00      	nop

08004308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004308:	4806      	ldr	r0, [pc, #24]	; (8004324 <prvPortStartFirstTask+0x1c>)
 800430a:	6800      	ldr	r0, [r0, #0]
 800430c:	6800      	ldr	r0, [r0, #0]
 800430e:	f380 8808 	msr	MSP, r0
 8004312:	b662      	cpsie	i
 8004314:	b661      	cpsie	f
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	df00      	svc	0
 8004320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004322:	bf00      	nop
 8004324:	e000ed08 	.word	0xe000ed08

08004328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800432e:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <xPortStartScheduler+0xd0>)
 8004330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <xPortStartScheduler+0xd4>)
 8004354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004356:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <xPortStartScheduler+0xd8>)
 8004358:	2207      	movs	r2, #7
 800435a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800435c:	e009      	b.n	8004372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800435e:	4b28      	ldr	r3, [pc, #160]	; (8004400 <xPortStartScheduler+0xd8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3b01      	subs	r3, #1
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <xPortStartScheduler+0xd8>)
 8004366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d0ef      	beq.n	800435e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <xPortStartScheduler+0xd8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	d00a      	beq.n	80043a0 <xPortStartScheduler+0x78>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	60bb      	str	r3, [r7, #8]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043a0:	4b17      	ldr	r3, [pc, #92]	; (8004400 <xPortStartScheduler+0xd8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	4a16      	ldr	r2, [pc, #88]	; (8004400 <xPortStartScheduler+0xd8>)
 80043a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043aa:	4b15      	ldr	r3, [pc, #84]	; (8004400 <xPortStartScheduler+0xd8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <xPortStartScheduler+0xd8>)
 80043b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043be:	4b11      	ldr	r3, [pc, #68]	; (8004404 <xPortStartScheduler+0xdc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <xPortStartScheduler+0xdc>)
 80043c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <xPortStartScheduler+0xdc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <xPortStartScheduler+0xdc>)
 80043d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043d6:	f000 f8b9 	bl	800454c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <xPortStartScheduler+0xe0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043e0:	f7ff ff92 	bl	8004308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043e4:	f7ff f8c0 	bl	8003568 <vTaskSwitchContext>
	prvTaskExitError();
 80043e8:	f7ff ff4a 	bl	8004280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	e000e400 	.word	0xe000e400
 80043fc:	20000dc8 	.word	0x20000dc8
 8004400:	20000dcc 	.word	0x20000dcc
 8004404:	e000ed20 	.word	0xe000ed20
 8004408:	2000001c 	.word	0x2000001c

0800440c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
	__asm volatile
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	607b      	str	r3, [r7, #4]
}
 8004424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004426:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <vPortEnterCritical+0x58>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <vPortEnterCritical+0x58>)
 800442e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <vPortEnterCritical+0x58>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10f      	bne.n	8004458 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <vPortEnterCritical+0x5c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <vPortEnterCritical+0x4c>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	603b      	str	r3, [r7, #0]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <vPortEnterCritical+0x4a>
	}
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000001c 	.word	0x2000001c
 8004468:	e000ed04 	.word	0xe000ed04

0800446c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004472:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <vPortExitCritical+0x4c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <vPortExitCritical+0x24>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	607b      	str	r3, [r7, #4]
}
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <vPortExitCritical+0x4c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3b01      	subs	r3, #1
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <vPortExitCritical+0x4c>)
 8004498:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <vPortExitCritical+0x4c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d105      	bne.n	80044ae <vPortExitCritical+0x42>
 80044a2:	2300      	movs	r3, #0
 80044a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	f383 8811 	msr	BASEPRI, r3
}
 80044ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	2000001c 	.word	0x2000001c
 80044bc:	00000000 	.word	0x00000000

080044c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044c0:	f3ef 8009 	mrs	r0, PSP
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <pxCurrentTCBConst>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044d0:	6010      	str	r0, [r2, #0]
 80044d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80044d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044da:	f380 8811 	msr	BASEPRI, r0
 80044de:	f7ff f843 	bl	8003568 <vTaskSwitchContext>
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8811 	msr	BASEPRI, r0
 80044ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	6808      	ldr	r0, [r1, #0]
 80044f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044f6:	f380 8809 	msr	PSP, r0
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	4770      	bx	lr

08004500 <pxCurrentTCBConst>:
 8004500:	2000079c 	.word	0x2000079c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop

08004508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
}
 8004520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004522:	f7fe ff63 	bl	80033ec <xTaskIncrementTick>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <xPortSysTickHandler+0x40>)
 800452e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	f383 8811 	msr	BASEPRI, r3
}
 800453e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <vPortSetupTimerInterrupt+0x30>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <vPortSetupTimerInterrupt+0x34>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <vPortSetupTimerInterrupt+0x38>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a09      	ldr	r2, [pc, #36]	; (8004588 <vPortSetupTimerInterrupt+0x3c>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	4a08      	ldr	r2, [pc, #32]	; (800458c <vPortSetupTimerInterrupt+0x40>)
 800456a:	3b01      	subs	r3, #1
 800456c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800456e:	4b03      	ldr	r3, [pc, #12]	; (800457c <vPortSetupTimerInterrupt+0x30>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr
 800457c:	e000e010 	.word	0xe000e010
 8004580:	e000e018 	.word	0xe000e018
 8004584:	20000010 	.word	0x20000010
 8004588:	10624dd3 	.word	0x10624dd3
 800458c:	e000e014 	.word	0xe000e014

08004590 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004596:	f3ef 8305 	mrs	r3, IPSR
 800459a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b0f      	cmp	r3, #15
 80045a0:	d914      	bls.n	80045cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <vPortValidateInterruptPriority+0x6c>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <vPortValidateInterruptPriority+0x70>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	7afa      	ldrb	r2, [r7, #11]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d20a      	bcs.n	80045cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	607b      	str	r3, [r7, #4]
}
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <vPortValidateInterruptPriority+0x74>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <vPortValidateInterruptPriority+0x78>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d90a      	bls.n	80045f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	603b      	str	r3, [r7, #0]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <vPortValidateInterruptPriority+0x60>
	}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	e000e3f0 	.word	0xe000e3f0
 8004600:	20000dc8 	.word	0x20000dc8
 8004604:	e000ed0c 	.word	0xe000ed0c
 8004608:	20000dcc 	.word	0x20000dcc

0800460c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004618:	f7fe fe2e 	bl	8003278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800461c:	4b58      	ldr	r3, [pc, #352]	; (8004780 <pvPortMalloc+0x174>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004624:	f000 f910 	bl	8004848 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004628:	4b56      	ldr	r3, [pc, #344]	; (8004784 <pvPortMalloc+0x178>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 808e 	bne.w	8004752 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01d      	beq.n	8004678 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800463c:	2208      	movs	r2, #8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	2b00      	cmp	r3, #0
 800464c:	d014      	beq.n	8004678 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	3308      	adds	r3, #8
 8004656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <pvPortMalloc+0x6c>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	617b      	str	r3, [r7, #20]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d069      	beq.n	8004752 <pvPortMalloc+0x146>
 800467e:	4b42      	ldr	r3, [pc, #264]	; (8004788 <pvPortMalloc+0x17c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d864      	bhi.n	8004752 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004688:	4b40      	ldr	r3, [pc, #256]	; (800478c <pvPortMalloc+0x180>)
 800468a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <pvPortMalloc+0x180>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004692:	e004      	b.n	800469e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d903      	bls.n	80046b0 <pvPortMalloc+0xa4>
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f1      	bne.n	8004694 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046b0:	4b33      	ldr	r3, [pc, #204]	; (8004780 <pvPortMalloc+0x174>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d04b      	beq.n	8004752 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2208      	movs	r2, #8
 80046c0:	4413      	add	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	2308      	movs	r3, #8
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	429a      	cmp	r2, r3
 80046da:	d91f      	bls.n	800471c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <pvPortMalloc+0xf8>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	613b      	str	r3, [r7, #16]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004716:	69b8      	ldr	r0, [r7, #24]
 8004718:	f000 f8f8 	bl	800490c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <pvPortMalloc+0x17c>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	4a18      	ldr	r2, [pc, #96]	; (8004788 <pvPortMalloc+0x17c>)
 8004728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800472a:	4b17      	ldr	r3, [pc, #92]	; (8004788 <pvPortMalloc+0x17c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b18      	ldr	r3, [pc, #96]	; (8004790 <pvPortMalloc+0x184>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d203      	bcs.n	800473e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004736:	4b14      	ldr	r3, [pc, #80]	; (8004788 <pvPortMalloc+0x17c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a15      	ldr	r2, [pc, #84]	; (8004790 <pvPortMalloc+0x184>)
 800473c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <pvPortMalloc+0x178>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	431a      	orrs	r2, r3
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004752:	f7fe fd9f 	bl	8003294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <pvPortMalloc+0x16a>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	60fb      	str	r3, [r7, #12]
}
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <pvPortMalloc+0x168>
	return pvReturn;
 8004776:	69fb      	ldr	r3, [r7, #28]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3728      	adds	r7, #40	; 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200019d8 	.word	0x200019d8
 8004784:	200019e4 	.word	0x200019e4
 8004788:	200019dc 	.word	0x200019dc
 800478c:	200019d0 	.word	0x200019d0
 8004790:	200019e0 	.word	0x200019e0

08004794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d048      	beq.n	8004838 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047a6:	2308      	movs	r3, #8
 80047a8:	425b      	negs	r3, r3
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4413      	add	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4b21      	ldr	r3, [pc, #132]	; (8004840 <vPortFree+0xac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <vPortFree+0x44>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60fb      	str	r3, [r7, #12]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <vPortFree+0x62>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60bb      	str	r3, [r7, #8]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4b11      	ldr	r3, [pc, #68]	; (8004840 <vPortFree+0xac>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4013      	ands	r3, r2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d019      	beq.n	8004838 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d115      	bne.n	8004838 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <vPortFree+0xac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800481c:	f7fe fd2c 	bl	8003278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <vPortFree+0xb0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4413      	add	r3, r2
 800482a:	4a06      	ldr	r2, [pc, #24]	; (8004844 <vPortFree+0xb0>)
 800482c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800482e:	6938      	ldr	r0, [r7, #16]
 8004830:	f000 f86c 	bl	800490c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004834:	f7fe fd2e 	bl	8003294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004838:	bf00      	nop
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	200019e4 	.word	0x200019e4
 8004844:	200019dc 	.word	0x200019dc

08004848 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800484e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004852:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004854:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <prvHeapInit+0xac>)
 8004856:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3307      	adds	r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <prvHeapInit+0xac>)
 8004878:	4413      	add	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <prvHeapInit+0xb0>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <prvHeapInit+0xb0>)
 8004888:	2200      	movs	r2, #0
 800488a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4413      	add	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004894:	2208      	movs	r2, #8
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0307 	bic.w	r3, r3, #7
 80048a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a15      	ldr	r2, [pc, #84]	; (80048fc <prvHeapInit+0xb4>)
 80048a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048aa:	4b14      	ldr	r3, [pc, #80]	; (80048fc <prvHeapInit+0xb4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <prvHeapInit+0xb4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048c8:	4b0c      	ldr	r3, [pc, #48]	; (80048fc <prvHeapInit+0xb4>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <prvHeapInit+0xb8>)
 80048d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4a09      	ldr	r2, [pc, #36]	; (8004904 <prvHeapInit+0xbc>)
 80048de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <prvHeapInit+0xc0>)
 80048e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048e6:	601a      	str	r2, [r3, #0]
}
 80048e8:	bf00      	nop
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000dd0 	.word	0x20000dd0
 80048f8:	200019d0 	.word	0x200019d0
 80048fc:	200019d8 	.word	0x200019d8
 8004900:	200019e0 	.word	0x200019e0
 8004904:	200019dc 	.word	0x200019dc
 8004908:	200019e4 	.word	0x200019e4

0800490c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004914:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	e002      	b.n	8004920 <prvInsertBlockIntoFreeList+0x14>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d8f7      	bhi.n	800491a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4413      	add	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	429a      	cmp	r2, r3
 800493a:	d108      	bne.n	800494e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	441a      	add	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	441a      	add	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d118      	bne.n	8004994 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <prvInsertBlockIntoFreeList+0xac>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d00d      	beq.n	800498a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	441a      	add	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e008      	b.n	800499c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <prvInsertBlockIntoFreeList+0xac>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e003      	b.n	800499c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d002      	beq.n	80049aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	200019d0 	.word	0x200019d0
 80049b8:	200019d8 	.word	0x200019d8

080049bc <__libc_init_array>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	2600      	movs	r6, #0
 80049c0:	4d0c      	ldr	r5, [pc, #48]	; (80049f4 <__libc_init_array+0x38>)
 80049c2:	4c0d      	ldr	r4, [pc, #52]	; (80049f8 <__libc_init_array+0x3c>)
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	42a6      	cmp	r6, r4
 80049ca:	d109      	bne.n	80049e0 <__libc_init_array+0x24>
 80049cc:	f000 f830 	bl	8004a30 <_init>
 80049d0:	2600      	movs	r6, #0
 80049d2:	4d0a      	ldr	r5, [pc, #40]	; (80049fc <__libc_init_array+0x40>)
 80049d4:	4c0a      	ldr	r4, [pc, #40]	; (8004a00 <__libc_init_array+0x44>)
 80049d6:	1b64      	subs	r4, r4, r5
 80049d8:	10a4      	asrs	r4, r4, #2
 80049da:	42a6      	cmp	r6, r4
 80049dc:	d105      	bne.n	80049ea <__libc_init_array+0x2e>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e4:	4798      	blx	r3
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7ee      	b.n	80049c8 <__libc_init_array+0xc>
 80049ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ee:	4798      	blx	r3
 80049f0:	3601      	adds	r6, #1
 80049f2:	e7f2      	b.n	80049da <__libc_init_array+0x1e>
 80049f4:	08004ae8 	.word	0x08004ae8
 80049f8:	08004ae8 	.word	0x08004ae8
 80049fc:	08004ae8 	.word	0x08004ae8
 8004a00:	08004aec 	.word	0x08004aec

08004a04 <memcpy>:
 8004a04:	440a      	add	r2, r1
 8004a06:	4291      	cmp	r1, r2
 8004a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a0c:	d100      	bne.n	8004a10 <memcpy+0xc>
 8004a0e:	4770      	bx	lr
 8004a10:	b510      	push	{r4, lr}
 8004a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a16:	4291      	cmp	r1, r2
 8004a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a1c:	d1f9      	bne.n	8004a12 <memcpy+0xe>
 8004a1e:	bd10      	pop	{r4, pc}

08004a20 <memset>:
 8004a20:	4603      	mov	r3, r0
 8004a22:	4402      	add	r2, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
